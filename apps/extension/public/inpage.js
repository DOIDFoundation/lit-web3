!function(){"use strict";function _mergeNamespaces(n,m){for(var i2=0;i2<m.length;i2++){const e=m[i2];if("string"!=typeof e&&!Array.isArray(e))for(const k in e)if("default"!==k&&!(k in n)){const d=Object.getOwnPropertyDescriptor(e,k);d&&Object.defineProperty(n,k,d.get?d:{enumerable:!0,get:()=>e[k]})}}return Object.freeze(Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}))}if("undefined"==typeof process){const process2={env:{VITE_APP_NAME:"DOID Extension",VITE_APP_TITLE:"DOID Extension",BASE_URL:"/",MODE:"development",DEV:!0,PROD:!1,SSR:!1,VITE_APP_VER:'"0.0.1"',VITE_APP_MDI:'"<link rel=\\"stylesheet\\" href=\\"https://cdn.jsdelivr.net/npm/@mdi/font@7.1.96/css/materialdesignicons.min.css\\"/>"'},version:"0.0.1"};Object.defineProperty(globalThis,"process",{value:process2})}"undefined"==typeof globalThis&&Object.defineProperty(globalThis,"globalThis",{value:globalThis}),process;let promise;void 0===process.nextTick&&Object.defineProperty(process,"nextTick",{value:(fn,...args)=>setTimeout((()=>fn(...args)))});var commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{};function getAugmentedNamespace(n){if(n.__esModule)return n;var f=n.default;if("function"==typeof f){var a=function a2(){if(this instanceof a2){var args=[null];return args.push.apply(args,arguments),new(Function.bind.apply(f,args))}return f.apply(this,arguments)};a.prototype=f.prototype}else a={};return Object.defineProperty(a,"__esModule",{value:!0}),Object.keys(n).forEach((function(k){var d=Object.getOwnPropertyDescriptor(n,k);Object.defineProperty(a,k,d.get?d:{enumerable:!0,get:function(){return n[k]}})})),a}for(var browserExports$3={},browser$6={get exports(){return browserExports$3},set exports(v){browserExports$3=v}},streamExports={},stream={get exports(){return streamExports},set exports(v){streamExports=v}},buffer={},base64Js={byteLength:function(b64){var lens=getLens(b64),validLen=lens[0],placeHoldersLen=lens[1];return 3*(validLen+placeHoldersLen)/4-placeHoldersLen},toByteArray:function(b64){var tmp,i2,lens=getLens(b64),validLen=lens[0],placeHoldersLen=lens[1],arr2=new Arr(function(b64,validLen,placeHoldersLen){return 3*(validLen+placeHoldersLen)/4-placeHoldersLen}(0,validLen,placeHoldersLen)),curByte=0,len2=placeHoldersLen>0?validLen-4:validLen;for(i2=0;i2<len2;i2+=4)tmp=revLookup[b64.charCodeAt(i2)]<<18|revLookup[b64.charCodeAt(i2+1)]<<12|revLookup[b64.charCodeAt(i2+2)]<<6|revLookup[b64.charCodeAt(i2+3)],arr2[curByte++]=tmp>>16&255,arr2[curByte++]=tmp>>8&255,arr2[curByte++]=255&tmp;2===placeHoldersLen&&(tmp=revLookup[b64.charCodeAt(i2)]<<2|revLookup[b64.charCodeAt(i2+1)]>>4,arr2[curByte++]=255&tmp);1===placeHoldersLen&&(tmp=revLookup[b64.charCodeAt(i2)]<<10|revLookup[b64.charCodeAt(i2+1)]<<4|revLookup[b64.charCodeAt(i2+2)]>>2,arr2[curByte++]=tmp>>8&255,arr2[curByte++]=255&tmp);return arr2},fromByteArray:function(uint8){for(var tmp,len2=uint8.length,extraBytes=len2%3,parts=[],i2=0,len22=len2-extraBytes;i2<len22;i2+=16383)parts.push(encodeChunk(uint8,i2,i2+16383>len22?len22:i2+16383));1===extraBytes?(tmp=uint8[len2-1],parts.push(lookup[tmp>>2]+lookup[tmp<<4&63]+"==")):2===extraBytes&&(tmp=(uint8[len2-2]<<8)+uint8[len2-1],parts.push(lookup[tmp>>10]+lookup[tmp>>4&63]+lookup[tmp<<2&63]+"="));return parts.join("")}},lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;function getLens(b64){var len2=b64.length;if(len2%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var validLen=b64.indexOf("=");return-1===validLen&&(validLen=len2),[validLen,validLen===len2?0:4-validLen%4]}function encodeChunk(uint8,start2,end){for(var tmp,num,output=[],i2=start2;i2<end;i2+=3)tmp=(uint8[i2]<<16&16711680)+(uint8[i2+1]<<8&65280)+(255&uint8[i2+2]),output.push(lookup[(num=tmp)>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[63&num]);return output.join("")}revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63;var ieee754={
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
read:function(buffer2,offset,isLE,mLen,nBytes){var e,m,eLen=8*nBytes-mLen-1,eMax=(1<<eLen)-1,eBias=eMax>>1,nBits=-7,i2=isLE?nBytes-1:0,d=isLE?-1:1,s=buffer2[offset+i2];for(i2+=d,e=s&(1<<-nBits)-1,s>>=-nBits,nBits+=eLen;nBits>0;e=256*e+buffer2[offset+i2],i2+=d,nBits-=8);for(m=e&(1<<-nBits)-1,e>>=-nBits,nBits+=mLen;nBits>0;m=256*m+buffer2[offset+i2],i2+=d,nBits-=8);if(0===e)e=1-eBias;else{if(e===eMax)return m?NaN:1/0*(s?-1:1);m+=Math.pow(2,mLen),e-=eBias}return(s?-1:1)*m*Math.pow(2,e-mLen)},write:function(buffer2,value,offset,isLE,mLen,nBytes){var e,m,c,eLen=8*nBytes-mLen-1,eMax=(1<<eLen)-1,eBias=eMax>>1,rt=23===mLen?Math.pow(2,-24)-Math.pow(2,-77):0,i2=isLE?0:nBytes-1,d=isLE?1:-1,s=value<0||0===value&&1/value<0?1:0;for(value=Math.abs(value),isNaN(value)||value===1/0?(m=isNaN(value)?1:0,e=eMax):(e=Math.floor(Math.log(value)/Math.LN2),value*(c=Math.pow(2,-e))<1&&(e--,c*=2),(value+=e+eBias>=1?rt/c:rt*Math.pow(2,1-eBias))*c>=2&&(e++,c/=2),e+eBias>=eMax?(m=0,e=eMax):e+eBias>=1?(m=(value*c-1)*Math.pow(2,mLen),e+=eBias):(m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen),e=0));mLen>=8;buffer2[offset+i2]=255&m,i2+=d,m/=256,mLen-=8);for(e=e<<mLen|m,eLen+=mLen;eLen>0;buffer2[offset+i2]=255&e,i2+=d,e/=256,eLen-=8);buffer2[offset+i2-d]|=128*s}};
/*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
!function(exports){const base642=base64Js,ieee754$1=ieee754,customInspectSymbol="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;exports.Buffer=Buffer2,exports.SlowBuffer=function(length){+length!=length&&(length=0);return Buffer2.alloc(+length)},exports.INSPECT_MAX_BYTES=50;const K_MAX_LENGTH=2147483647;function createBuffer(length){if(length>K_MAX_LENGTH)throw new RangeError('The value "'+length+'" is invalid for option "size"');const buf=new Uint8Array(length);return Object.setPrototypeOf(buf,Buffer2.prototype),buf}function Buffer2(arg,encodingOrOffset,length){if("number"==typeof arg){if("string"==typeof encodingOrOffset)throw new TypeError('The "string" argument must be of type string. Received type number');return allocUnsafe(arg)}return from2(arg,encodingOrOffset,length)}function from2(value,encodingOrOffset,length){if("string"==typeof value)return function(string2,encoding){"string"==typeof encoding&&""!==encoding||(encoding="utf8");if(!Buffer2.isEncoding(encoding))throw new TypeError("Unknown encoding: "+encoding);const length=0|byteLength2(string2,encoding);let buf=createBuffer(length);const actual=buf.write(string2,encoding);actual!==length&&(buf=buf.slice(0,actual));return buf}(value,encodingOrOffset);if(ArrayBuffer.isView(value))return function(arrayView){if(isInstance(arrayView,Uint8Array)){const copy=new Uint8Array(arrayView);return fromArrayBuffer(copy.buffer,copy.byteOffset,copy.byteLength)}return fromArrayLike(arrayView)}(value);if(null==value)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof value);if(isInstance(value,ArrayBuffer)||value&&isInstance(value.buffer,ArrayBuffer))return fromArrayBuffer(value,encodingOrOffset,length);if("undefined"!=typeof SharedArrayBuffer&&(isInstance(value,SharedArrayBuffer)||value&&isInstance(value.buffer,SharedArrayBuffer)))return fromArrayBuffer(value,encodingOrOffset,length);if("number"==typeof value)throw new TypeError('The "value" argument must not be of type number. Received type number');const valueOf=value.valueOf&&value.valueOf();if(null!=valueOf&&valueOf!==value)return Buffer2.from(valueOf,encodingOrOffset,length);const b=function(obj){if(Buffer2.isBuffer(obj)){const len2=0|checked(obj.length),buf=createBuffer(len2);return 0===buf.length||obj.copy(buf,0,0,len2),buf}if(void 0!==obj.length)return"number"!=typeof obj.length||numberIsNaN(obj.length)?createBuffer(0):fromArrayLike(obj);if("Buffer"===obj.type&&Array.isArray(obj.data))return fromArrayLike(obj.data)}(value);if(b)return b;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof value[Symbol.toPrimitive])return Buffer2.from(value[Symbol.toPrimitive]("string"),encodingOrOffset,length);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof value)}function assertSize(size2){if("number"!=typeof size2)throw new TypeError('"size" argument must be of type number');if(size2<0)throw new RangeError('The value "'+size2+'" is invalid for option "size"')}function allocUnsafe(size2){return assertSize(size2),createBuffer(size2<0?0:0|checked(size2))}function fromArrayLike(array2){const length=array2.length<0?0:0|checked(array2.length),buf=createBuffer(length);for(let i2=0;i2<length;i2+=1)buf[i2]=255&array2[i2];return buf}function fromArrayBuffer(array2,byteOffset,length){if(byteOffset<0||array2.byteLength<byteOffset)throw new RangeError('"offset" is outside of buffer bounds');if(array2.byteLength<byteOffset+(length||0))throw new RangeError('"length" is outside of buffer bounds');let buf;return buf=void 0===byteOffset&&void 0===length?new Uint8Array(array2):void 0===length?new Uint8Array(array2,byteOffset):new Uint8Array(array2,byteOffset,length),Object.setPrototypeOf(buf,Buffer2.prototype),buf}function checked(length){if(length>=K_MAX_LENGTH)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+K_MAX_LENGTH.toString(16)+" bytes");return 0|length}function byteLength2(string2,encoding){if(Buffer2.isBuffer(string2))return string2.length;if(ArrayBuffer.isView(string2)||isInstance(string2,ArrayBuffer))return string2.byteLength;if("string"!=typeof string2)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof string2);const len2=string2.length,mustMatch=arguments.length>2&&!0===arguments[2];if(!mustMatch&&0===len2)return 0;let loweredCase=!1;for(;;)switch(encoding){case"ascii":case"latin1":case"binary":return len2;case"utf8":case"utf-8":return utf8ToBytes(string2).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*len2;case"hex":return len2>>>1;case"base64":return base64ToBytes(string2).length;default:if(loweredCase)return mustMatch?-1:utf8ToBytes(string2).length;encoding=(""+encoding).toLowerCase(),loweredCase=!0}}function slowToString(encoding,start2,end){let loweredCase=!1;if((void 0===start2||start2<0)&&(start2=0),start2>this.length)return"";if((void 0===end||end>this.length)&&(end=this.length),end<=0)return"";if((end>>>=0)<=(start2>>>=0))return"";for(encoding||(encoding="utf8");;)switch(encoding){case"hex":return hexSlice(this,start2,end);case"utf8":case"utf-8":return utf8Slice(this,start2,end);case"ascii":return asciiSlice(this,start2,end);case"latin1":case"binary":return latin1Slice(this,start2,end);case"base64":return base64Slice(this,start2,end);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,start2,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase(),loweredCase=!0}}function swap(b,n,m){const i2=b[n];b[n]=b[m],b[m]=i2}function bidirectionalIndexOf(buffer2,val,byteOffset,encoding,dir){if(0===buffer2.length)return-1;if("string"==typeof byteOffset?(encoding=byteOffset,byteOffset=0):byteOffset>2147483647?byteOffset=2147483647:byteOffset<-2147483648&&(byteOffset=-2147483648),numberIsNaN(byteOffset=+byteOffset)&&(byteOffset=dir?0:buffer2.length-1),byteOffset<0&&(byteOffset=buffer2.length+byteOffset),byteOffset>=buffer2.length){if(dir)return-1;byteOffset=buffer2.length-1}else if(byteOffset<0){if(!dir)return-1;byteOffset=0}if("string"==typeof val&&(val=Buffer2.from(val,encoding)),Buffer2.isBuffer(val))return 0===val.length?-1:arrayIndexOf(buffer2,val,byteOffset,encoding,dir);if("number"==typeof val)return val&=255,"function"==typeof Uint8Array.prototype.indexOf?dir?Uint8Array.prototype.indexOf.call(buffer2,val,byteOffset):Uint8Array.prototype.lastIndexOf.call(buffer2,val,byteOffset):arrayIndexOf(buffer2,[val],byteOffset,encoding,dir);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(arr2,val,byteOffset,encoding,dir){let i2,indexSize=1,arrLength=arr2.length,valLength=val.length;if(void 0!==encoding&&("ucs2"===(encoding=String(encoding).toLowerCase())||"ucs-2"===encoding||"utf16le"===encoding||"utf-16le"===encoding)){if(arr2.length<2||val.length<2)return-1;indexSize=2,arrLength/=2,valLength/=2,byteOffset/=2}function read(buf,i3){return 1===indexSize?buf[i3]:buf.readUInt16BE(i3*indexSize)}if(dir){let foundIndex=-1;for(i2=byteOffset;i2<arrLength;i2++)if(read(arr2,i2)===read(val,-1===foundIndex?0:i2-foundIndex)){if(-1===foundIndex&&(foundIndex=i2),i2-foundIndex+1===valLength)return foundIndex*indexSize}else-1!==foundIndex&&(i2-=i2-foundIndex),foundIndex=-1}else for(byteOffset+valLength>arrLength&&(byteOffset=arrLength-valLength),i2=byteOffset;i2>=0;i2--){let found=!0;for(let j=0;j<valLength;j++)if(read(arr2,i2+j)!==read(val,j)){found=!1;break}if(found)return i2}return-1}function hexWrite(buf,string2,offset,length){offset=Number(offset)||0;const remaining=buf.length-offset;length?(length=Number(length))>remaining&&(length=remaining):length=remaining;const strLen=string2.length;let i2;for(length>strLen/2&&(length=strLen/2),i2=0;i2<length;++i2){const parsed=parseInt(string2.substr(2*i2,2),16);if(numberIsNaN(parsed))return i2;buf[offset+i2]=parsed}return i2}function utf8Write(buf,string2,offset,length){return blitBuffer(utf8ToBytes(string2,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string2,offset,length){return blitBuffer(function(str){const byteArray=[];for(let i2=0;i2<str.length;++i2)byteArray.push(255&str.charCodeAt(i2));return byteArray}(string2),buf,offset,length)}function base64Write(buf,string2,offset,length){return blitBuffer(base64ToBytes(string2),buf,offset,length)}function ucs2Write(buf,string2,offset,length){return blitBuffer(function(str,units){let c,hi,lo;const byteArray=[];for(let i2=0;i2<str.length&&!((units-=2)<0);++i2)c=str.charCodeAt(i2),hi=c>>8,lo=c%256,byteArray.push(lo),byteArray.push(hi);return byteArray}(string2,buf.length-offset),buf,offset,length)}function base64Slice(buf,start2,end){return 0===start2&&end===buf.length?base642.fromByteArray(buf):base642.fromByteArray(buf.slice(start2,end))}function utf8Slice(buf,start2,end){end=Math.min(buf.length,end);const res=[];let i2=start2;for(;i2<end;){const firstByte=buf[i2];let codePoint=null,bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(i2+bytesPerSequence<=end){let secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:firstByte<128&&(codePoint=firstByte);break;case 2:secondByte=buf[i2+1],128==(192&secondByte)&&(tempCodePoint=(31&firstByte)<<6|63&secondByte,tempCodePoint>127&&(codePoint=tempCodePoint));break;case 3:secondByte=buf[i2+1],thirdByte=buf[i2+2],128==(192&secondByte)&&128==(192&thirdByte)&&(tempCodePoint=(15&firstByte)<<12|(63&secondByte)<<6|63&thirdByte,tempCodePoint>2047&&(tempCodePoint<55296||tempCodePoint>57343)&&(codePoint=tempCodePoint));break;case 4:secondByte=buf[i2+1],thirdByte=buf[i2+2],fourthByte=buf[i2+3],128==(192&secondByte)&&128==(192&thirdByte)&&128==(192&fourthByte)&&(tempCodePoint=(15&firstByte)<<18|(63&secondByte)<<12|(63&thirdByte)<<6|63&fourthByte,tempCodePoint>65535&&tempCodePoint<1114112&&(codePoint=tempCodePoint))}}null===codePoint?(codePoint=65533,bytesPerSequence=1):codePoint>65535&&(codePoint-=65536,res.push(codePoint>>>10&1023|55296),codePoint=56320|1023&codePoint),res.push(codePoint),i2+=bytesPerSequence}return function(codePoints){const len2=codePoints.length;if(len2<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,codePoints);let res="",i2=0;for(;i2<len2;)res+=String.fromCharCode.apply(String,codePoints.slice(i2,i2+=MAX_ARGUMENTS_LENGTH));return res}(res)}exports.kMaxLength=K_MAX_LENGTH,Buffer2.TYPED_ARRAY_SUPPORT=function(){try{const arr2=new Uint8Array(1),proto={foo:function(){return 42}};return Object.setPrototypeOf(proto,Uint8Array.prototype),Object.setPrototypeOf(arr2,proto),42===arr2.foo()}catch(e){return!1}}(),Buffer2.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Buffer2.prototype,"parent",{enumerable:!0,get:function(){if(Buffer2.isBuffer(this))return this.buffer}}),Object.defineProperty(Buffer2.prototype,"offset",{enumerable:!0,get:function(){if(Buffer2.isBuffer(this))return this.byteOffset}}),Buffer2.poolSize=8192,Buffer2.from=function(value,encodingOrOffset,length){return from2(value,encodingOrOffset,length)},Object.setPrototypeOf(Buffer2.prototype,Uint8Array.prototype),Object.setPrototypeOf(Buffer2,Uint8Array),Buffer2.alloc=function(size2,fill,encoding){return function(size2,fill,encoding){return assertSize(size2),size2<=0?createBuffer(size2):void 0!==fill?"string"==typeof encoding?createBuffer(size2).fill(fill,encoding):createBuffer(size2).fill(fill):createBuffer(size2)}(size2,fill,encoding)},Buffer2.allocUnsafe=function(size2){return allocUnsafe(size2)},Buffer2.allocUnsafeSlow=function(size2){return allocUnsafe(size2)},Buffer2.isBuffer=function(b){return null!=b&&!0===b._isBuffer&&b!==Buffer2.prototype},Buffer2.compare=function(a,b){if(isInstance(a,Uint8Array)&&(a=Buffer2.from(a,a.offset,a.byteLength)),isInstance(b,Uint8Array)&&(b=Buffer2.from(b,b.offset,b.byteLength)),!Buffer2.isBuffer(a)||!Buffer2.isBuffer(b))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(a===b)return 0;let x=a.length,y=b.length;for(let i2=0,len2=Math.min(x,y);i2<len2;++i2)if(a[i2]!==b[i2]){x=a[i2],y=b[i2];break}return x<y?-1:y<x?1:0},Buffer2.isEncoding=function(encoding){switch(String(encoding).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer2.concat=function(list,length){if(!Array.isArray(list))throw new TypeError('"list" argument must be an Array of Buffers');if(0===list.length)return Buffer2.alloc(0);let i2;if(void 0===length)for(length=0,i2=0;i2<list.length;++i2)length+=list[i2].length;const buffer2=Buffer2.allocUnsafe(length);let pos=0;for(i2=0;i2<list.length;++i2){let buf=list[i2];if(isInstance(buf,Uint8Array))pos+buf.length>buffer2.length?(Buffer2.isBuffer(buf)||(buf=Buffer2.from(buf)),buf.copy(buffer2,pos)):Uint8Array.prototype.set.call(buffer2,buf,pos);else{if(!Buffer2.isBuffer(buf))throw new TypeError('"list" argument must be an Array of Buffers');buf.copy(buffer2,pos)}pos+=buf.length}return buffer2},Buffer2.byteLength=byteLength2,Buffer2.prototype._isBuffer=!0,Buffer2.prototype.swap16=function(){const len2=this.length;if(len2%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let i2=0;i2<len2;i2+=2)swap(this,i2,i2+1);return this},Buffer2.prototype.swap32=function(){const len2=this.length;if(len2%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let i2=0;i2<len2;i2+=4)swap(this,i2,i2+3),swap(this,i2+1,i2+2);return this},Buffer2.prototype.swap64=function(){const len2=this.length;if(len2%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let i2=0;i2<len2;i2+=8)swap(this,i2,i2+7),swap(this,i2+1,i2+6),swap(this,i2+2,i2+5),swap(this,i2+3,i2+4);return this},Buffer2.prototype.toString=function(){const length=this.length;return 0===length?"":0===arguments.length?utf8Slice(this,0,length):slowToString.apply(this,arguments)},Buffer2.prototype.toLocaleString=Buffer2.prototype.toString,Buffer2.prototype.equals=function(b){if(!Buffer2.isBuffer(b))throw new TypeError("Argument must be a Buffer");return this===b||0===Buffer2.compare(this,b)},Buffer2.prototype.inspect=function(){let str="";const max2=exports.INSPECT_MAX_BYTES;return str=this.toString("hex",0,max2).replace(/(.{2})/g,"$1 ").trim(),this.length>max2&&(str+=" ... "),"<Buffer "+str+">"},customInspectSymbol&&(Buffer2.prototype[customInspectSymbol]=Buffer2.prototype.inspect),Buffer2.prototype.compare=function(target,start2,end,thisStart,thisEnd){if(isInstance(target,Uint8Array)&&(target=Buffer2.from(target,target.offset,target.byteLength)),!Buffer2.isBuffer(target))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof target);if(void 0===start2&&(start2=0),void 0===end&&(end=target?target.length:0),void 0===thisStart&&(thisStart=0),void 0===thisEnd&&(thisEnd=this.length),start2<0||end>target.length||thisStart<0||thisEnd>this.length)throw new RangeError("out of range index");if(thisStart>=thisEnd&&start2>=end)return 0;if(thisStart>=thisEnd)return-1;if(start2>=end)return 1;if(this===target)return 0;let x=(thisEnd>>>=0)-(thisStart>>>=0),y=(end>>>=0)-(start2>>>=0);const len2=Math.min(x,y),thisCopy=this.slice(thisStart,thisEnd),targetCopy=target.slice(start2,end);for(let i2=0;i2<len2;++i2)if(thisCopy[i2]!==targetCopy[i2]){x=thisCopy[i2],y=targetCopy[i2];break}return x<y?-1:y<x?1:0},Buffer2.prototype.includes=function(val,byteOffset,encoding){return-1!==this.indexOf(val,byteOffset,encoding)},Buffer2.prototype.indexOf=function(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,!0)},Buffer2.prototype.lastIndexOf=function(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,!1)},Buffer2.prototype.write=function(string2,offset,length,encoding){if(void 0===offset)encoding="utf8",length=this.length,offset=0;else if(void 0===length&&"string"==typeof offset)encoding=offset,length=this.length,offset=0;else{if(!isFinite(offset))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");offset>>>=0,isFinite(length)?(length>>>=0,void 0===encoding&&(encoding="utf8")):(encoding=length,length=void 0)}const remaining=this.length-offset;if((void 0===length||length>remaining)&&(length=remaining),string2.length>0&&(length<0||offset<0)||offset>this.length)throw new RangeError("Attempt to write outside buffer bounds");encoding||(encoding="utf8");let loweredCase=!1;for(;;)switch(encoding){case"hex":return hexWrite(this,string2,offset,length);case"utf8":case"utf-8":return utf8Write(this,string2,offset,length);case"ascii":case"latin1":case"binary":return asciiWrite(this,string2,offset,length);case"base64":return base64Write(this,string2,offset,length);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,string2,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase(),loweredCase=!0}},Buffer2.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const MAX_ARGUMENTS_LENGTH=4096;function asciiSlice(buf,start2,end){let ret="";end=Math.min(buf.length,end);for(let i2=start2;i2<end;++i2)ret+=String.fromCharCode(127&buf[i2]);return ret}function latin1Slice(buf,start2,end){let ret="";end=Math.min(buf.length,end);for(let i2=start2;i2<end;++i2)ret+=String.fromCharCode(buf[i2]);return ret}function hexSlice(buf,start2,end){const len2=buf.length;(!start2||start2<0)&&(start2=0),(!end||end<0||end>len2)&&(end=len2);let out="";for(let i2=start2;i2<end;++i2)out+=hexSliceLookupTable[buf[i2]];return out}function utf16leSlice(buf,start2,end){const bytes2=buf.slice(start2,end);let res="";for(let i2=0;i2<bytes2.length-1;i2+=2)res+=String.fromCharCode(bytes2[i2]+256*bytes2[i2+1]);return res}function checkOffset(offset,ext,length){if(offset%1!=0||offset<0)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}function checkInt(buf,value,offset,ext,max2,min2){if(!Buffer2.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max2||value<min2)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError("Index out of range")}function wrtBigUInt64LE(buf,value,offset,min2,max2){checkIntBI(value,min2,max2,buf,offset,7);let lo=Number(value&BigInt(4294967295));buf[offset++]=lo,lo>>=8,buf[offset++]=lo,lo>>=8,buf[offset++]=lo,lo>>=8,buf[offset++]=lo;let hi=Number(value>>BigInt(32)&BigInt(4294967295));return buf[offset++]=hi,hi>>=8,buf[offset++]=hi,hi>>=8,buf[offset++]=hi,hi>>=8,buf[offset++]=hi,offset}function wrtBigUInt64BE(buf,value,offset,min2,max2){checkIntBI(value,min2,max2,buf,offset,7);let lo=Number(value&BigInt(4294967295));buf[offset+7]=lo,lo>>=8,buf[offset+6]=lo,lo>>=8,buf[offset+5]=lo,lo>>=8,buf[offset+4]=lo;let hi=Number(value>>BigInt(32)&BigInt(4294967295));return buf[offset+3]=hi,hi>>=8,buf[offset+2]=hi,hi>>=8,buf[offset+1]=hi,hi>>=8,buf[offset]=hi,offset+8}function checkIEEE754(buf,value,offset,ext,max2,min2){if(offset+ext>buf.length)throw new RangeError("Index out of range");if(offset<0)throw new RangeError("Index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){return value=+value,offset>>>=0,noAssert||checkIEEE754(buf,0,offset,4),ieee754$1.write(buf,value,offset,littleEndian,23,4),offset+4}function writeDouble(buf,value,offset,littleEndian,noAssert){return value=+value,offset>>>=0,noAssert||checkIEEE754(buf,0,offset,8),ieee754$1.write(buf,value,offset,littleEndian,52,8),offset+8}Buffer2.prototype.slice=function(start2,end){const len2=this.length;(start2=~~start2)<0?(start2+=len2)<0&&(start2=0):start2>len2&&(start2=len2),(end=void 0===end?len2:~~end)<0?(end+=len2)<0&&(end=0):end>len2&&(end=len2),end<start2&&(end=start2);const newBuf=this.subarray(start2,end);return Object.setPrototypeOf(newBuf,Buffer2.prototype),newBuf},Buffer2.prototype.readUintLE=Buffer2.prototype.readUIntLE=function(offset,byteLength3,noAssert){offset>>>=0,byteLength3>>>=0,noAssert||checkOffset(offset,byteLength3,this.length);let val=this[offset],mul=1,i2=0;for(;++i2<byteLength3&&(mul*=256);)val+=this[offset+i2]*mul;return val},Buffer2.prototype.readUintBE=Buffer2.prototype.readUIntBE=function(offset,byteLength3,noAssert){offset>>>=0,byteLength3>>>=0,noAssert||checkOffset(offset,byteLength3,this.length);let val=this[offset+--byteLength3],mul=1;for(;byteLength3>0&&(mul*=256);)val+=this[offset+--byteLength3]*mul;return val},Buffer2.prototype.readUint8=Buffer2.prototype.readUInt8=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,1,this.length),this[offset]},Buffer2.prototype.readUint16LE=Buffer2.prototype.readUInt16LE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,2,this.length),this[offset]|this[offset+1]<<8},Buffer2.prototype.readUint16BE=Buffer2.prototype.readUInt16BE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,2,this.length),this[offset]<<8|this[offset+1]},Buffer2.prototype.readUint32LE=Buffer2.prototype.readUInt32LE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,4,this.length),(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+16777216*this[offset+3]},Buffer2.prototype.readUint32BE=Buffer2.prototype.readUInt32BE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,4,this.length),16777216*this[offset]+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])},Buffer2.prototype.readBigUInt64LE=defineBigIntMethod((function(offset){validateNumber2(offset>>>=0,"offset");const first=this[offset],last=this[offset+7];void 0!==first&&void 0!==last||boundsError(offset,this.length-8);const lo=first+256*this[++offset]+65536*this[++offset]+this[++offset]*2**24,hi=this[++offset]+256*this[++offset]+65536*this[++offset]+last*2**24;return BigInt(lo)+(BigInt(hi)<<BigInt(32))})),Buffer2.prototype.readBigUInt64BE=defineBigIntMethod((function(offset){validateNumber2(offset>>>=0,"offset");const first=this[offset],last=this[offset+7];void 0!==first&&void 0!==last||boundsError(offset,this.length-8);const hi=first*2**24+65536*this[++offset]+256*this[++offset]+this[++offset],lo=this[++offset]*2**24+65536*this[++offset]+256*this[++offset]+last;return(BigInt(hi)<<BigInt(32))+BigInt(lo)})),Buffer2.prototype.readIntLE=function(offset,byteLength3,noAssert){offset>>>=0,byteLength3>>>=0,noAssert||checkOffset(offset,byteLength3,this.length);let val=this[offset],mul=1,i2=0;for(;++i2<byteLength3&&(mul*=256);)val+=this[offset+i2]*mul;return mul*=128,val>=mul&&(val-=Math.pow(2,8*byteLength3)),val},Buffer2.prototype.readIntBE=function(offset,byteLength3,noAssert){offset>>>=0,byteLength3>>>=0,noAssert||checkOffset(offset,byteLength3,this.length);let i2=byteLength3,mul=1,val=this[offset+--i2];for(;i2>0&&(mul*=256);)val+=this[offset+--i2]*mul;return mul*=128,val>=mul&&(val-=Math.pow(2,8*byteLength3)),val},Buffer2.prototype.readInt8=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,1,this.length),128&this[offset]?-1*(255-this[offset]+1):this[offset]},Buffer2.prototype.readInt16LE=function(offset,noAssert){offset>>>=0,noAssert||checkOffset(offset,2,this.length);const val=this[offset]|this[offset+1]<<8;return 32768&val?4294901760|val:val},Buffer2.prototype.readInt16BE=function(offset,noAssert){offset>>>=0,noAssert||checkOffset(offset,2,this.length);const val=this[offset+1]|this[offset]<<8;return 32768&val?4294901760|val:val},Buffer2.prototype.readInt32LE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,4,this.length),this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24},Buffer2.prototype.readInt32BE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,4,this.length),this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]},Buffer2.prototype.readBigInt64LE=defineBigIntMethod((function(offset){validateNumber2(offset>>>=0,"offset");const first=this[offset],last=this[offset+7];void 0!==first&&void 0!==last||boundsError(offset,this.length-8);const val=this[offset+4]+256*this[offset+5]+65536*this[offset+6]+(last<<24);return(BigInt(val)<<BigInt(32))+BigInt(first+256*this[++offset]+65536*this[++offset]+this[++offset]*2**24)})),Buffer2.prototype.readBigInt64BE=defineBigIntMethod((function(offset){validateNumber2(offset>>>=0,"offset");const first=this[offset],last=this[offset+7];void 0!==first&&void 0!==last||boundsError(offset,this.length-8);const val=(first<<24)+65536*this[++offset]+256*this[++offset]+this[++offset];return(BigInt(val)<<BigInt(32))+BigInt(this[++offset]*2**24+65536*this[++offset]+256*this[++offset]+last)})),Buffer2.prototype.readFloatLE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,4,this.length),ieee754$1.read(this,offset,!0,23,4)},Buffer2.prototype.readFloatBE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,4,this.length),ieee754$1.read(this,offset,!1,23,4)},Buffer2.prototype.readDoubleLE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,8,this.length),ieee754$1.read(this,offset,!0,52,8)},Buffer2.prototype.readDoubleBE=function(offset,noAssert){return offset>>>=0,noAssert||checkOffset(offset,8,this.length),ieee754$1.read(this,offset,!1,52,8)},Buffer2.prototype.writeUintLE=Buffer2.prototype.writeUIntLE=function(value,offset,byteLength3,noAssert){if(value=+value,offset>>>=0,byteLength3>>>=0,!noAssert){checkInt(this,value,offset,byteLength3,Math.pow(2,8*byteLength3)-1,0)}let mul=1,i2=0;for(this[offset]=255&value;++i2<byteLength3&&(mul*=256);)this[offset+i2]=value/mul&255;return offset+byteLength3},Buffer2.prototype.writeUintBE=Buffer2.prototype.writeUIntBE=function(value,offset,byteLength3,noAssert){if(value=+value,offset>>>=0,byteLength3>>>=0,!noAssert){checkInt(this,value,offset,byteLength3,Math.pow(2,8*byteLength3)-1,0)}let i2=byteLength3-1,mul=1;for(this[offset+i2]=255&value;--i2>=0&&(mul*=256);)this[offset+i2]=value/mul&255;return offset+byteLength3},Buffer2.prototype.writeUint8=Buffer2.prototype.writeUInt8=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,1,255,0),this[offset]=255&value,offset+1},Buffer2.prototype.writeUint16LE=Buffer2.prototype.writeUInt16LE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,2,65535,0),this[offset]=255&value,this[offset+1]=value>>>8,offset+2},Buffer2.prototype.writeUint16BE=Buffer2.prototype.writeUInt16BE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,2,65535,0),this[offset]=value>>>8,this[offset+1]=255&value,offset+2},Buffer2.prototype.writeUint32LE=Buffer2.prototype.writeUInt32LE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,4,4294967295,0),this[offset+3]=value>>>24,this[offset+2]=value>>>16,this[offset+1]=value>>>8,this[offset]=255&value,offset+4},Buffer2.prototype.writeUint32BE=Buffer2.prototype.writeUInt32BE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,4,4294967295,0),this[offset]=value>>>24,this[offset+1]=value>>>16,this[offset+2]=value>>>8,this[offset+3]=255&value,offset+4},Buffer2.prototype.writeBigUInt64LE=defineBigIntMethod((function(value,offset=0){return wrtBigUInt64LE(this,value,offset,BigInt(0),BigInt("0xffffffffffffffff"))})),Buffer2.prototype.writeBigUInt64BE=defineBigIntMethod((function(value,offset=0){return wrtBigUInt64BE(this,value,offset,BigInt(0),BigInt("0xffffffffffffffff"))})),Buffer2.prototype.writeIntLE=function(value,offset,byteLength3,noAssert){if(value=+value,offset>>>=0,!noAssert){const limit=Math.pow(2,8*byteLength3-1);checkInt(this,value,offset,byteLength3,limit-1,-limit)}let i2=0,mul=1,sub=0;for(this[offset]=255&value;++i2<byteLength3&&(mul*=256);)value<0&&0===sub&&0!==this[offset+i2-1]&&(sub=1),this[offset+i2]=(value/mul>>0)-sub&255;return offset+byteLength3},Buffer2.prototype.writeIntBE=function(value,offset,byteLength3,noAssert){if(value=+value,offset>>>=0,!noAssert){const limit=Math.pow(2,8*byteLength3-1);checkInt(this,value,offset,byteLength3,limit-1,-limit)}let i2=byteLength3-1,mul=1,sub=0;for(this[offset+i2]=255&value;--i2>=0&&(mul*=256);)value<0&&0===sub&&0!==this[offset+i2+1]&&(sub=1),this[offset+i2]=(value/mul>>0)-sub&255;return offset+byteLength3},Buffer2.prototype.writeInt8=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,1,127,-128),value<0&&(value=255+value+1),this[offset]=255&value,offset+1},Buffer2.prototype.writeInt16LE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,2,32767,-32768),this[offset]=255&value,this[offset+1]=value>>>8,offset+2},Buffer2.prototype.writeInt16BE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,2,32767,-32768),this[offset]=value>>>8,this[offset+1]=255&value,offset+2},Buffer2.prototype.writeInt32LE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,4,2147483647,-2147483648),this[offset]=255&value,this[offset+1]=value>>>8,this[offset+2]=value>>>16,this[offset+3]=value>>>24,offset+4},Buffer2.prototype.writeInt32BE=function(value,offset,noAssert){return value=+value,offset>>>=0,noAssert||checkInt(this,value,offset,4,2147483647,-2147483648),value<0&&(value=4294967295+value+1),this[offset]=value>>>24,this[offset+1]=value>>>16,this[offset+2]=value>>>8,this[offset+3]=255&value,offset+4},Buffer2.prototype.writeBigInt64LE=defineBigIntMethod((function(value,offset=0){return wrtBigUInt64LE(this,value,offset,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Buffer2.prototype.writeBigInt64BE=defineBigIntMethod((function(value,offset=0){return wrtBigUInt64BE(this,value,offset,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Buffer2.prototype.writeFloatLE=function(value,offset,noAssert){return writeFloat(this,value,offset,!0,noAssert)},Buffer2.prototype.writeFloatBE=function(value,offset,noAssert){return writeFloat(this,value,offset,!1,noAssert)},Buffer2.prototype.writeDoubleLE=function(value,offset,noAssert){return writeDouble(this,value,offset,!0,noAssert)},Buffer2.prototype.writeDoubleBE=function(value,offset,noAssert){return writeDouble(this,value,offset,!1,noAssert)},Buffer2.prototype.copy=function(target,targetStart,start2,end){if(!Buffer2.isBuffer(target))throw new TypeError("argument should be a Buffer");if(start2||(start2=0),end||0===end||(end=this.length),targetStart>=target.length&&(targetStart=target.length),targetStart||(targetStart=0),end>0&&end<start2&&(end=start2),end===start2)return 0;if(0===target.length||0===this.length)return 0;if(targetStart<0)throw new RangeError("targetStart out of bounds");if(start2<0||start2>=this.length)throw new RangeError("Index out of range");if(end<0)throw new RangeError("sourceEnd out of bounds");end>this.length&&(end=this.length),target.length-targetStart<end-start2&&(end=target.length-targetStart+start2);const len2=end-start2;return this===target&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(targetStart,start2,end):Uint8Array.prototype.set.call(target,this.subarray(start2,end),targetStart),len2},Buffer2.prototype.fill=function(val,start2,end,encoding){if("string"==typeof val){if("string"==typeof start2?(encoding=start2,start2=0,end=this.length):"string"==typeof end&&(encoding=end,end=this.length),void 0!==encoding&&"string"!=typeof encoding)throw new TypeError("encoding must be a string");if("string"==typeof encoding&&!Buffer2.isEncoding(encoding))throw new TypeError("Unknown encoding: "+encoding);if(1===val.length){const code2=val.charCodeAt(0);("utf8"===encoding&&code2<128||"latin1"===encoding)&&(val=code2)}}else"number"==typeof val?val&=255:"boolean"==typeof val&&(val=Number(val));if(start2<0||this.length<start2||this.length<end)throw new RangeError("Out of range index");if(end<=start2)return this;let i2;if(start2>>>=0,end=void 0===end?this.length:end>>>0,val||(val=0),"number"==typeof val)for(i2=start2;i2<end;++i2)this[i2]=val;else{const bytes2=Buffer2.isBuffer(val)?val:Buffer2.from(val,encoding),len2=bytes2.length;if(0===len2)throw new TypeError('The value "'+val+'" is invalid for argument "value"');for(i2=0;i2<end-start2;++i2)this[i2+start2]=bytes2[i2%len2]}return this};const errors2={};function E2(sym,getMessage2,Base){errors2[sym]=class extends Base{constructor(){super(),Object.defineProperty(this,"message",{value:getMessage2.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${sym}]`,this.stack,delete this.name}get code(){return sym}set code(value){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:value,writable:!0})}toString(){return`${this.name} [${sym}]: ${this.message}`}}}function addNumericalSeparator2(val){let res="",i2=val.length;const start2="-"===val[0]?1:0;for(;i2>=start2+4;i2-=3)res=`_${val.slice(i2-3,i2)}${res}`;return`${val.slice(0,i2)}${res}`}function checkIntBI(value,min2,max2,buf,offset,byteLength3){if(value>max2||value<min2){const n="bigint"==typeof min2?"n":"";let range2;throw range2=byteLength3>3?0===min2||min2===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(byteLength3+1)}${n}`:`>= -(2${n} ** ${8*(byteLength3+1)-1}${n}) and < 2 ** ${8*(byteLength3+1)-1}${n}`:`>= ${min2}${n} and <= ${max2}${n}`,new errors2.ERR_OUT_OF_RANGE("value",range2,value)}!function(buf,offset,byteLength3){validateNumber2(offset,"offset"),void 0!==buf[offset]&&void 0!==buf[offset+byteLength3]||boundsError(offset,buf.length-(byteLength3+1))}(buf,offset,byteLength3)}function validateNumber2(value,name){if("number"!=typeof value)throw new errors2.ERR_INVALID_ARG_TYPE(name,"number",value)}function boundsError(value,length,type2){if(Math.floor(value)!==value)throw validateNumber2(value,type2),new errors2.ERR_OUT_OF_RANGE(type2||"offset","an integer",value);if(length<0)throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS;throw new errors2.ERR_OUT_OF_RANGE(type2||"offset",`>= ${type2?1:0} and <= ${length}`,value)}E2("ERR_BUFFER_OUT_OF_BOUNDS",(function(name){return name?`${name} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),E2("ERR_INVALID_ARG_TYPE",(function(name,actual){return`The "${name}" argument must be of type number. Received type ${typeof actual}`}),TypeError),E2("ERR_OUT_OF_RANGE",(function(str,range2,input){let msg=`The value of "${str}" is out of range.`,received=input;return Number.isInteger(input)&&Math.abs(input)>2**32?received=addNumericalSeparator2(String(input)):"bigint"==typeof input&&(received=String(input),(input>BigInt(2)**BigInt(32)||input<-(BigInt(2)**BigInt(32)))&&(received=addNumericalSeparator2(received)),received+="n"),msg+=` It must be ${range2}. Received ${received}`,msg}),RangeError);const INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;function utf8ToBytes(string2,units){let codePoint;units=units||1/0;const length=string2.length;let leadSurrogate=null;const bytes2=[];for(let i2=0;i2<length;++i2){if(codePoint=string2.charCodeAt(i2),codePoint>55295&&codePoint<57344){if(!leadSurrogate){if(codePoint>56319){(units-=3)>-1&&bytes2.push(239,191,189);continue}if(i2+1===length){(units-=3)>-1&&bytes2.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(codePoint<56320){(units-=3)>-1&&bytes2.push(239,191,189),leadSurrogate=codePoint;continue}codePoint=65536+(leadSurrogate-55296<<10|codePoint-56320)}else leadSurrogate&&(units-=3)>-1&&bytes2.push(239,191,189);if(leadSurrogate=null,codePoint<128){if((units-=1)<0)break;bytes2.push(codePoint)}else if(codePoint<2048){if((units-=2)<0)break;bytes2.push(codePoint>>6|192,63&codePoint|128)}else if(codePoint<65536){if((units-=3)<0)break;bytes2.push(codePoint>>12|224,codePoint>>6&63|128,63&codePoint|128)}else{if(!(codePoint<1114112))throw new Error("Invalid code point");if((units-=4)<0)break;bytes2.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,63&codePoint|128)}}return bytes2}function base64ToBytes(str){return base642.toByteArray(function(str){if((str=(str=str.split("=")[0]).trim().replace(INVALID_BASE64_RE,"")).length<2)return"";for(;str.length%4!=0;)str+="=";return str}(str))}function blitBuffer(src,dst,offset,length){let i2;for(i2=0;i2<length&&!(i2+offset>=dst.length||i2>=src.length);++i2)dst[i2+offset]=src[i2];return i2}function isInstance(obj,type2){return obj instanceof type2||null!=obj&&null!=obj.constructor&&null!=obj.constructor.name&&obj.constructor.name===type2.name}function numberIsNaN(obj){return obj!=obj}const hexSliceLookupTable=function(){const table=new Array(256);for(let i2=0;i2<16;++i2){const i16=16*i2;for(let j=0;j<16;++j)table[i16+j]="0123456789abcdef"[i2]+"0123456789abcdef"[j]}return table}();function defineBigIntMethod(fn){return"undefined"==typeof BigInt?BufferBigIntNotDefined:fn}function BufferBigIntNotDefined(){throw new Error("BigInt not supported")}}(buffer);const index=_mergeNamespaces({__proto__:null,default:buffer},[buffer]);var primordials={ArrayIsArray:self2=>Array.isArray(self2),ArrayPrototypeIncludes:(self2,el)=>self2.includes(el),ArrayPrototypeIndexOf:(self2,el)=>self2.indexOf(el),ArrayPrototypeJoin:(self2,sep)=>self2.join(sep),ArrayPrototypeMap:(self2,fn)=>self2.map(fn),ArrayPrototypePop:(self2,el)=>self2.pop(el),ArrayPrototypePush:(self2,el)=>self2.push(el),ArrayPrototypeSlice:(self2,start2,end)=>self2.slice(start2,end),Error:Error,FunctionPrototypeCall:(fn,thisArgs,...args)=>fn.call(thisArgs,...args),FunctionPrototypeSymbolHasInstance:(self2,instance2)=>Function.prototype[Symbol.hasInstance].call(self2,instance2),MathFloor:Math.floor,Number:Number,NumberIsInteger:Number.isInteger,NumberIsNaN:Number.isNaN,NumberMAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:Number.MIN_SAFE_INTEGER,NumberParseInt:Number.parseInt,ObjectDefineProperties:(self2,props)=>Object.defineProperties(self2,props),ObjectDefineProperty:(self2,name,prop)=>Object.defineProperty(self2,name,prop),ObjectGetOwnPropertyDescriptor:(self2,name)=>Object.getOwnPropertyDescriptor(self2,name),ObjectKeys:obj=>Object.keys(obj),ObjectSetPrototypeOf:(target,proto)=>Object.setPrototypeOf(target,proto),Promise:Promise,PromisePrototypeCatch:(self2,fn)=>self2.catch(fn),PromisePrototypeThen:(self2,thenFn,catchFn)=>self2.then(thenFn,catchFn),PromiseReject:err=>Promise.reject(err),ReflectApply:Reflect.apply,RegExpPrototypeTest:(self2,value)=>self2.test(value),SafeSet:Set,String:String,StringPrototypeSlice:(self2,start2,end)=>self2.slice(start2,end),StringPrototypeToLowerCase:self2=>self2.toLowerCase(),StringPrototypeToUpperCase:self2=>self2.toUpperCase(),StringPrototypeTrim:self2=>self2.trim(),Symbol:Symbol,SymbolAsyncIterator:Symbol.asyncIterator,SymbolHasInstance:Symbol.hasInstance,SymbolIterator:Symbol.iterator,TypedArrayPrototypeSet:(self2,buf,len2)=>self2.set(buf,len2),Uint8Array:Uint8Array},utilExports={};!function(module){const bufferModule=buffer,AsyncFunction=Object.getPrototypeOf((async function(){})).constructor,Blob=globalThis.Blob||bufferModule.Blob,isBlob=void 0!==Blob?function(b){return b instanceof Blob}:function(b){return!1};class AggregateError2 extends Error{constructor(errors2){if(!Array.isArray(errors2))throw new TypeError("Expected input to be an Array, got "+typeof errors2);let message="";for(let i2=0;i2<errors2.length;i2++)message+=`    ${errors2[i2].stack}\n`;super(message),this.name="AggregateError",this.errors=errors2}}module.exports={AggregateError:AggregateError2,kEmptyObject:Object.freeze({}),once(callback){let called=!1;return function(...args){called||(called=!0,callback.apply(this,args))}},createDeferredPromise:function(){let resolve,reject;return{promise:new Promise(((res,rej)=>{resolve=res,reject=rej})),resolve:resolve,reject:reject}},promisify:fn=>new Promise(((resolve,reject)=>{fn(((err,...args)=>err?reject(err):resolve(...args)))})),debuglog:()=>function(){},format:(format2,...args)=>format2.replace(/%([sdifj])/g,(function(...[_unused,type2]){const replacement=args.shift();if("f"===type2)return replacement.toFixed(6);if("j"===type2)return JSON.stringify(replacement);if("s"===type2&&"object"==typeof replacement){return`${replacement.constructor!==Object?replacement.constructor.name:""} {}`.trim()}return replacement.toString()})),inspect(value){switch(typeof value){case"string":if(value.includes("'")){if(!value.includes('"'))return`"${value}"`;if(!value.includes("`")&&!value.includes("${"))return`\`${value}\``}return`'${value}'`;case"number":return isNaN(value)?"NaN":Object.is(value,-0)?String(value):value;case"bigint":return`${String(value)}n`;case"boolean":case"undefined":return String(value);case"object":return"{}"}},types:{isAsyncFunction:fn=>fn instanceof AsyncFunction,isArrayBufferView:arr2=>ArrayBuffer.isView(arr2)},isBlob:isBlob},module.exports.promisify.custom=Symbol.for("nodejs.util.promisify.custom")}({get exports(){return utilExports},set exports(v){utilExports=v}});var hasRequiredBrowser,operators={},browserExports$2={},browser$5={get exports(){return browserExports$2},set exports(v){browserExports$2=v}};function requireBrowser(){if(hasRequiredBrowser)return browserExports$2;hasRequiredBrowser=1;const{AbortController:AbortController2,AbortSignal:AbortSignal}="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0;return browser$5.exports=AbortController2,browserExports$2.AbortSignal=AbortSignal,browserExports$2.default=AbortController2,browserExports$2}const{format:format,inspect:inspect$1,AggregateError:CustomAggregateError}=utilExports,AggregateError=globalThis.AggregateError||CustomAggregateError,kIsNodeError=Symbol("kIsNodeError"),kTypes=["string","function","number","object","Function","Object","boolean","bigint","symbol"],classRegExp=/^([A-Z][a-z0-9]*)+$/,nodeInternalPrefix="__node_internal_",codes$1={};function assert$3(value,message){if(!value)throw new codes$1.ERR_INTERNAL_ASSERTION(message)}function addNumericalSeparator(val){let res="",i2=val.length;const start2="-"===val[0]?1:0;for(;i2>=start2+4;i2-=3)res=`_${val.slice(i2-3,i2)}${res}`;return`${val.slice(0,i2)}${res}`}function E(code2,message,Base){Base||(Base=Error);class NodeError extends Base{constructor(...args){super(function(key,msg,args){if("function"==typeof msg)return assert$3(msg.length<=args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`),msg(...args);const expectedLength=(msg.match(/%[dfijoOs]/g)||[]).length;return assert$3(expectedLength===args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`),0===args.length?msg:format(msg,...args)}(code2,message,args))}toString(){return`${this.name} [${code2}]: ${this.message}`}}Object.defineProperties(NodeError.prototype,{name:{value:Base.name,writable:!0,enumerable:!1,configurable:!0},toString:{value(){return`${this.name} [${code2}]: ${this.message}`},writable:!0,enumerable:!1,configurable:!0}}),NodeError.prototype.code=code2,NodeError.prototype[kIsNodeError]=!0,codes$1[code2]=NodeError}function hideStackFrames$1(fn){const hidden=nodeInternalPrefix+fn.name;return Object.defineProperty(fn,"name",{value:hidden}),fn}let AbortError$5=class extends Error{constructor(message="The operation was aborted",options=undefined){if(void 0!==options&&"object"!=typeof options)throw new codes$1.ERR_INVALID_ARG_TYPE("options","Object",options);super(message,options),this.code="ABORT_ERR",this.name="AbortError"}};E("ERR_ASSERTION","%s",Error),E("ERR_INVALID_ARG_TYPE",((name,expected,actual)=>{assert$3("string"==typeof name,"'name' must be a string"),Array.isArray(expected)||(expected=[expected]);let msg="The ";name.endsWith(" argument")?msg+=`${name} `:msg+=`"${name}" ${name.includes(".")?"property":"argument"} `,msg+="must be ";const types=[],instances=[],other=[];for(const value of expected)assert$3("string"==typeof value,"All expected entries have to be of type string"),kTypes.includes(value)?types.push(value.toLowerCase()):classRegExp.test(value)?instances.push(value):(assert$3("object"!==value,'The value "object" should be written as "Object"'),other.push(value));if(instances.length>0){const pos=types.indexOf("object");-1!==pos&&(types.splice(types,pos,1),instances.push("Object"))}if(types.length>0){switch(types.length){case 1:msg+=`of type ${types[0]}`;break;case 2:msg+=`one of type ${types[0]} or ${types[1]}`;break;default:{const last=types.pop();msg+=`one of type ${types.join(", ")}, or ${last}`}}(instances.length>0||other.length>0)&&(msg+=" or ")}if(instances.length>0){switch(instances.length){case 1:msg+=`an instance of ${instances[0]}`;break;case 2:msg+=`an instance of ${instances[0]} or ${instances[1]}`;break;default:{const last=instances.pop();msg+=`an instance of ${instances.join(", ")}, or ${last}`}}other.length>0&&(msg+=" or ")}switch(other.length){case 0:break;case 1:other[0].toLowerCase()!==other[0]&&(msg+="an "),msg+=`${other[0]}`;break;case 2:msg+=`one of ${other[0]} or ${other[1]}`;break;default:{const last=other.pop();msg+=`one of ${other.join(", ")}, or ${last}`}}if(null==actual)msg+=`. Received ${actual}`;else if("function"==typeof actual&&actual.name)msg+=`. Received function ${actual.name}`;else if("object"==typeof actual){var _actual$constructor;if(null!==(_actual$constructor=actual.constructor)&&void 0!==_actual$constructor&&_actual$constructor.name)msg+=`. Received an instance of ${actual.constructor.name}`;else{msg+=`. Received ${inspect$1(actual,{depth:-1})}`}}else{let inspected=inspect$1(actual,{colors:!1});inspected.length>25&&(inspected=`${inspected.slice(0,25)}...`),msg+=`. Received type ${typeof actual} (${inspected})`}return msg}),TypeError),E("ERR_INVALID_ARG_VALUE",((name,value,reason="is invalid")=>{let inspected=inspect$1(value);inspected.length>128&&(inspected=inspected.slice(0,128)+"...");return`The ${name.includes(".")?"property":"argument"} '${name}' ${reason}. Received ${inspected}`}),TypeError),E("ERR_INVALID_RETURN_VALUE",((input,name,value)=>{var _value$constructor;return`Expected ${input} to be returned from the "${name}" function but got ${null!=value&&null!==(_value$constructor=value.constructor)&&void 0!==_value$constructor&&_value$constructor.name?`instance of ${value.constructor.name}`:"type "+typeof value}.`}),TypeError),E("ERR_MISSING_ARGS",((...args)=>{let msg;assert$3(args.length>0,"At least one arg needs to be specified");const len2=args.length;switch(args=(Array.isArray(args)?args:[args]).map((a=>`"${a}"`)).join(" or "),len2){case 1:msg+=`The ${args[0]} argument`;break;case 2:msg+=`The ${args[0]} and ${args[1]} arguments`;break;default:{const last=args.pop();msg+=`The ${args.join(", ")}, and ${last} arguments`}}return`${msg} must be specified`}),TypeError),E("ERR_OUT_OF_RANGE",((str,range2,input)=>{let received;return assert$3(range2,'Missing "range" argument'),Number.isInteger(input)&&Math.abs(input)>2**32?received=addNumericalSeparator(String(input)):"bigint"==typeof input?(received=String(input),(input>2n**32n||input<-(2n**32n))&&(received=addNumericalSeparator(received)),received+="n"):received=inspect$1(input),`The value of "${str}" is out of range. It must be ${range2}. Received ${received}`}),RangeError),E("ERR_MULTIPLE_CALLBACK","Callback called multiple times",Error),E("ERR_METHOD_NOT_IMPLEMENTED","The %s method is not implemented",Error),E("ERR_STREAM_ALREADY_FINISHED","Cannot call %s after a stream was finished",Error),E("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable",Error),E("ERR_STREAM_DESTROYED","Cannot call %s after a stream was destroyed",Error),E("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),E("ERR_STREAM_PREMATURE_CLOSE","Premature close",Error),E("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF",Error),E("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event",Error),E("ERR_STREAM_WRITE_AFTER_END","write after end",Error),E("ERR_UNKNOWN_ENCODING","Unknown encoding: %s",TypeError);var errors$1={AbortError:AbortError$5,aggregateTwoErrors:hideStackFrames$1((function(innerError,outerError){if(innerError&&outerError&&innerError!==outerError){if(Array.isArray(outerError.errors))return outerError.errors.push(innerError),outerError;const err=new AggregateError([outerError,innerError],outerError.message);return err.code=outerError.code,err}return innerError||outerError})),hideStackFrames:hideStackFrames$1,codes:codes$1};const{ArrayIsArray:ArrayIsArray$2,ArrayPrototypeIncludes:ArrayPrototypeIncludes,ArrayPrototypeJoin:ArrayPrototypeJoin,ArrayPrototypeMap:ArrayPrototypeMap,NumberIsInteger:NumberIsInteger$1,NumberIsNaN:NumberIsNaN$2,NumberMAX_SAFE_INTEGER:NumberMAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:NumberMIN_SAFE_INTEGER,NumberParseInt:NumberParseInt,ObjectPrototypeHasOwnProperty:ObjectPrototypeHasOwnProperty,RegExpPrototypeExec:RegExpPrototypeExec,String:String$1,StringPrototypeToUpperCase:StringPrototypeToUpperCase,StringPrototypeTrim:StringPrototypeTrim}=primordials,{hideStackFrames:hideStackFrames,codes:{ERR_SOCKET_BAD_PORT:ERR_SOCKET_BAD_PORT,ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE$4,ERR_INVALID_ARG_VALUE:ERR_INVALID_ARG_VALUE$2,ERR_OUT_OF_RANGE:ERR_OUT_OF_RANGE$1,ERR_UNKNOWN_SIGNAL:ERR_UNKNOWN_SIGNAL}}=errors$1,{normalizeEncoding:normalizeEncoding$1}=utilExports,{isAsyncFunction:isAsyncFunction,isArrayBufferView:isArrayBufferView}=utilExports.types,signals={};const octalReg=/^[0-7]+$/,modeDesc="must be a 32-bit unsigned integer or an octal string";const validateInteger$1=hideStackFrames(((value,name,min2=NumberMIN_SAFE_INTEGER,max2=NumberMAX_SAFE_INTEGER)=>{if("number"!=typeof value)throw new ERR_INVALID_ARG_TYPE$4(name,"number",value);if(!NumberIsInteger$1(value))throw new ERR_OUT_OF_RANGE$1(name,"an integer",value);if(value<min2||value>max2)throw new ERR_OUT_OF_RANGE$1(name,`>= ${min2} && <= ${max2}`,value)})),validateInt32=hideStackFrames(((value,name,min2=-2147483648,max2=2147483647)=>{if("number"!=typeof value)throw new ERR_INVALID_ARG_TYPE$4(name,"number",value);if(!NumberIsInteger$1(value))throw new ERR_OUT_OF_RANGE$1(name,"an integer",value);if(value<min2||value>max2)throw new ERR_OUT_OF_RANGE$1(name,`>= ${min2} && <= ${max2}`,value)})),validateUint32=hideStackFrames(((value,name,positive=!1)=>{if("number"!=typeof value)throw new ERR_INVALID_ARG_TYPE$4(name,"number",value);if(!NumberIsInteger$1(value))throw new ERR_OUT_OF_RANGE$1(name,"an integer",value);const min2=positive?1:0;if(value<min2||value>4294967295)throw new ERR_OUT_OF_RANGE$1(name,`>= ${min2} && <= 4294967295`,value)}));function validateString(value,name){if("string"!=typeof value)throw new ERR_INVALID_ARG_TYPE$4(name,"string",value)}const validateOneOf=hideStackFrames(((value,name,oneOf)=>{if(!ArrayPrototypeIncludes(oneOf,value)){const allowed=ArrayPrototypeJoin(ArrayPrototypeMap(oneOf,(v=>"string"==typeof v?`'${v}'`:String$1(v))),", ");throw new ERR_INVALID_ARG_VALUE$2(name,value,"must be one of: "+allowed)}}));function getOwnPropertyValueOrDefault(options,key,defaultValue){return null!=options&&ObjectPrototypeHasOwnProperty(options,key)?options[key]:defaultValue}const validateObject$2=hideStackFrames(((value,name,options=null)=>{const allowArray=getOwnPropertyValueOrDefault(options,"allowArray",!1),allowFunction=getOwnPropertyValueOrDefault(options,"allowFunction",!1);if(!getOwnPropertyValueOrDefault(options,"nullable",!1)&&null===value||!allowArray&&ArrayIsArray$2(value)||"object"!=typeof value&&(!allowFunction||"function"!=typeof value))throw new ERR_INVALID_ARG_TYPE$4(name,"Object",value)})),validateArray=hideStackFrames(((value,name,minLength=0)=>{if(!ArrayIsArray$2(value))throw new ERR_INVALID_ARG_TYPE$4(name,"Array",value);if(value.length<minLength){throw new ERR_INVALID_ARG_VALUE$2(name,value,`must be longer than ${minLength}`)}}));const validateBuffer=hideStackFrames(((buffer2,name="buffer")=>{if(!isArrayBufferView(buffer2))throw new ERR_INVALID_ARG_TYPE$4(name,["Buffer","TypedArray","DataView"],buffer2)}));const validateAbortSignal$3=hideStackFrames(((signal,name)=>{if(void 0!==signal&&(null===signal||"object"!=typeof signal||!("aborted"in signal)))throw new ERR_INVALID_ARG_TYPE$4(name,"AbortSignal",signal)})),validateFunction$2=hideStackFrames(((value,name)=>{if("function"!=typeof value)throw new ERR_INVALID_ARG_TYPE$4(name,"Function",value)})),validatePlainFunction=hideStackFrames(((value,name)=>{if("function"!=typeof value||isAsyncFunction(value))throw new ERR_INVALID_ARG_TYPE$4(name,"Function",value)})),validateUndefined=hideStackFrames(((value,name)=>{if(void 0!==value)throw new ERR_INVALID_ARG_TYPE$4(name,"undefined",value)}));var cachedSetTimeout,cachedClearTimeout,validators={isInt32:function(value){return value===(0|value)},isUint32:function(value){return value===value>>>0},parseFileMode:function(value,name,def){if(void 0===value&&(value=def),"string"==typeof value){if(null===RegExpPrototypeExec(octalReg,value))throw new ERR_INVALID_ARG_VALUE$2(name,value,modeDesc);value=NumberParseInt(value,8)}return validateUint32(value,name),value},validateArray:validateArray,validateBoolean:function(value,name){if("boolean"!=typeof value)throw new ERR_INVALID_ARG_TYPE$4(name,"boolean",value)},validateBuffer:validateBuffer,validateEncoding:function(data,encoding){const normalizedEncoding=normalizeEncoding$1(encoding),length=data.length;if("hex"===normalizedEncoding&&length%2!=0)throw new ERR_INVALID_ARG_VALUE$2("encoding",encoding,`is invalid for data of length ${length}`)},validateFunction:validateFunction$2,validateInt32:validateInt32,validateInteger:validateInteger$1,validateNumber:function(value,name,min2=undefined,max2){if("number"!=typeof value)throw new ERR_INVALID_ARG_TYPE$4(name,"number",value);if(null!=min2&&value<min2||null!=max2&&value>max2||(null!=min2||null!=max2)&&NumberIsNaN$2(value))throw new ERR_OUT_OF_RANGE$1(name,`${null!=min2?`>= ${min2}`:""}${null!=min2&&null!=max2?" && ":""}${null!=max2?`<= ${max2}`:""}`,value)},validateObject:validateObject$2,validateOneOf:validateOneOf,validatePlainFunction:validatePlainFunction,validatePort:function(port,name="Port",allowZero=!0){if("number"!=typeof port&&"string"!=typeof port||"string"==typeof port&&0===StringPrototypeTrim(port).length||+port!=+port>>>0||port>65535||0===port&&!allowZero)throw new ERR_SOCKET_BAD_PORT(name,port,allowZero);return 0|port},validateSignalName:function(signal,name="signal"){if(validateString(signal,name),void 0===signals[signal]){if(void 0!==signals[StringPrototypeToUpperCase(signal)])throw new ERR_UNKNOWN_SIGNAL(signal+" (signals must use all capital letters)");throw new ERR_UNKNOWN_SIGNAL(signal)}},validateString:validateString,validateUint32:validateUint32,validateUndefined:validateUndefined,validateUnion:function(value,name,union2){if(!ArrayPrototypeIncludes(union2,value))throw new ERR_INVALID_ARG_TYPE$4(name,`('${ArrayPrototypeJoin(union2,"|")}')`,value)},validateAbortSignal:validateAbortSignal$3},endOfStreamExports={},endOfStream$1={get exports(){return endOfStreamExports},set exports(v){endOfStreamExports=v}},browserExports$1={},process$5={get exports(){return browserExports$1},set exports(v){browserExports$1=v}}.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(fun){if(cachedSetTimeout===setTimeout)return setTimeout(fun,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(fun,0);try{return cachedSetTimeout(fun,0)}catch(e){try{return cachedSetTimeout.call(null,fun,0)}catch(e2){return cachedSetTimeout.call(this,fun,0)}}}!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var timeout=runTimeout(cleanUpNextTick);draining=!0;for(var len2=queue.length;len2;){for(currentQueue=queue,queue=[];++queueIndex<len2;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,len2=queue.length}currentQueue=null,draining=!1,function(marker){if(cachedClearTimeout===clearTimeout)return clearTimeout(marker);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(marker);try{return cachedClearTimeout(marker)}catch(e){try{return cachedClearTimeout.call(null,marker)}catch(e2){return cachedClearTimeout.call(this,marker)}}}(timeout)}}function Item(fun,array2){this.fun=fun,this.array=array2}function noop$3(){}process$5.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1)for(var i2=1;i2<arguments.length;i2++)args[i2-1]=arguments[i2];queue.push(new Item(fun,args)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process$5.title="browser",process$5.browser=!0,process$5.env={},process$5.argv=[],process$5.version="",process$5.versions={},process$5.on=noop$3,process$5.addListener=noop$3,process$5.once=noop$3,process$5.off=noop$3,process$5.removeListener=noop$3,process$5.removeAllListeners=noop$3,process$5.emit=noop$3,process$5.prependListener=noop$3,process$5.prependOnceListener=noop$3,process$5.listeners=function(name){return[]},process$5.binding=function(name){throw new Error("process.binding is not supported")},process$5.cwd=function(){return"/"},process$5.chdir=function(dir){throw new Error("process.chdir is not supported")},process$5.umask=function(){return 0};const{Symbol:Symbol$4,SymbolAsyncIterator:SymbolAsyncIterator$2,SymbolIterator:SymbolIterator$2}=primordials,kDestroyed$1=Symbol$4("kDestroyed"),kIsErrored=Symbol$4("kIsErrored"),kIsReadable=Symbol$4("kIsReadable"),kIsDisturbed=Symbol$4("kIsDisturbed");function isReadableNodeStream$2(obj,strict=!1){var _obj$_readableState;return!(!obj||"function"!=typeof obj.pipe||"function"!=typeof obj.on||strict&&("function"!=typeof obj.pause||"function"!=typeof obj.resume)||obj._writableState&&!1===(null===(_obj$_readableState=obj._readableState)||void 0===_obj$_readableState?void 0:_obj$_readableState.readable)||obj._writableState&&!obj._readableState)}function isWritableNodeStream$1(obj){var _obj$_writableState;return!(!obj||"function"!=typeof obj.write||"function"!=typeof obj.on||obj._readableState&&!1===(null===(_obj$_writableState=obj._writableState)||void 0===_obj$_writableState?void 0:_obj$_writableState.writable))}function isNodeStream$4(obj){return obj&&(obj._readableState||obj._writableState||"function"==typeof obj.write&&"function"==typeof obj.on||"function"==typeof obj.pipe&&"function"==typeof obj.on)}function isDestroyed$1(stream2){if(!isNodeStream$4(stream2))return null;const wState=stream2._writableState,rState=stream2._readableState,state2=wState||rState;return!!(stream2.destroyed||stream2[kDestroyed$1]||null!=state2&&state2.destroyed)}function isWritableEnded(stream2){if(!isWritableNodeStream$1(stream2))return null;if(!0===stream2.writableEnded)return!0;const wState=stream2._writableState;return(null==wState||!wState.errored)&&("boolean"!=typeof(null==wState?void 0:wState.ended)?null:wState.ended)}function isReadableFinished$1(stream2,strict){if(!isReadableNodeStream$2(stream2))return null;const rState=stream2._readableState;return(null==rState||!rState.errored)&&("boolean"!=typeof(null==rState?void 0:rState.endEmitted)?null:!!(rState.endEmitted||!1===strict&&!0===rState.ended&&0===rState.length))}function isReadable$3(stream2){return stream2&&null!=stream2[kIsReadable]?stream2[kIsReadable]:"boolean"!=typeof(null==stream2?void 0:stream2.readable)?null:!isDestroyed$1(stream2)&&(isReadableNodeStream$2(stream2)&&stream2.readable&&!isReadableFinished$1(stream2))}function isWritable$2(stream2){return"boolean"!=typeof(null==stream2?void 0:stream2.writable)?null:!isDestroyed$1(stream2)&&(isWritableNodeStream$1(stream2)&&stream2.writable&&!isWritableEnded(stream2))}function isOutgoingMessage(stream2){return"boolean"==typeof stream2._closed&&"boolean"==typeof stream2._defaultKeepAlive&&"boolean"==typeof stream2._removedConnection&&"boolean"==typeof stream2._removedContLen}function isServerResponse(stream2){return"boolean"==typeof stream2._sent100&&isOutgoingMessage(stream2)}var utils$4={kDestroyed:kDestroyed$1,isDisturbed:function(stream2){var _stream$kIsDisturbed;return!(!stream2||!(null!==(_stream$kIsDisturbed=stream2[kIsDisturbed])&&void 0!==_stream$kIsDisturbed?_stream$kIsDisturbed:stream2.readableDidRead||stream2.readableAborted))},kIsDisturbed:kIsDisturbed,isErrored:function(stream2){var _ref,_ref2,_ref3,_ref4,_ref5,_stream$kIsErrored,_stream$_readableStat3,_stream$_writableStat3,_stream$_readableStat4,_stream$_writableStat4;return!(!stream2||!(null!==(_ref=null!==(_ref2=null!==(_ref3=null!==(_ref4=null!==(_ref5=null!==(_stream$kIsErrored=stream2[kIsErrored])&&void 0!==_stream$kIsErrored?_stream$kIsErrored:stream2.readableErrored)&&void 0!==_ref5?_ref5:stream2.writableErrored)&&void 0!==_ref4?_ref4:null===(_stream$_readableStat3=stream2._readableState)||void 0===_stream$_readableStat3?void 0:_stream$_readableStat3.errorEmitted)&&void 0!==_ref3?_ref3:null===(_stream$_writableStat3=stream2._writableState)||void 0===_stream$_writableStat3?void 0:_stream$_writableStat3.errorEmitted)&&void 0!==_ref2?_ref2:null===(_stream$_readableStat4=stream2._readableState)||void 0===_stream$_readableStat4?void 0:_stream$_readableStat4.errored)&&void 0!==_ref?_ref:null===(_stream$_writableStat4=stream2._writableState)||void 0===_stream$_writableStat4?void 0:_stream$_writableStat4.errored))},kIsErrored:kIsErrored,isReadable:isReadable$3,kIsReadable:kIsReadable,isClosed:function(stream2){if(!isNodeStream$4(stream2))return null;if("boolean"==typeof stream2.closed)return stream2.closed;const wState=stream2._writableState,rState=stream2._readableState;return"boolean"==typeof(null==wState?void 0:wState.closed)||"boolean"==typeof(null==rState?void 0:rState.closed)?(null==wState?void 0:wState.closed)||(null==rState?void 0:rState.closed):"boolean"==typeof stream2._closed&&isOutgoingMessage(stream2)?stream2._closed:null},isDestroyed:isDestroyed$1,isDuplexNodeStream:function(obj){return!(!obj||"function"!=typeof obj.pipe||!obj._readableState||"function"!=typeof obj.on||"function"!=typeof obj.write)},isFinished:function(stream2,opts2){return isNodeStream$4(stream2)?!!isDestroyed$1(stream2)||(!1===(null==opts2?void 0:opts2.readable)||!isReadable$3(stream2))&&(!1===(null==opts2?void 0:opts2.writable)||!isWritable$2(stream2)):null},isIterable:function(obj,isAsync){return null!=obj&&(!0===isAsync?"function"==typeof obj[SymbolAsyncIterator$2]:!1===isAsync?"function"==typeof obj[SymbolIterator$2]:"function"==typeof obj[SymbolAsyncIterator$2]||"function"==typeof obj[SymbolIterator$2])},isReadableNodeStream:isReadableNodeStream$2,isReadableEnded:function(stream2){if(!isReadableNodeStream$2(stream2))return null;if(!0===stream2.readableEnded)return!0;const rState=stream2._readableState;return!(!rState||rState.errored)&&("boolean"!=typeof(null==rState?void 0:rState.ended)?null:rState.ended)},isReadableFinished:isReadableFinished$1,isReadableErrored:function(stream2){var _stream$_readableStat,_stream$_readableStat2;return isNodeStream$4(stream2)?stream2.readableErrored?stream2.readableErrored:null!==(_stream$_readableStat=null===(_stream$_readableStat2=stream2._readableState)||void 0===_stream$_readableStat2?void 0:_stream$_readableStat2.errored)&&void 0!==_stream$_readableStat?_stream$_readableStat:null:null},isNodeStream:isNodeStream$4,isWritable:isWritable$2,isWritableNodeStream:isWritableNodeStream$1,isWritableEnded:isWritableEnded,isWritableFinished:function(stream2,strict){if(!isWritableNodeStream$1(stream2))return null;if(!0===stream2.writableFinished)return!0;const wState=stream2._writableState;return(null==wState||!wState.errored)&&("boolean"!=typeof(null==wState?void 0:wState.finished)?null:!!(wState.finished||!1===strict&&!0===wState.ended&&0===wState.length))},isWritableErrored:function(stream2){var _stream$_writableStat,_stream$_writableStat2;return isNodeStream$4(stream2)?stream2.writableErrored?stream2.writableErrored:null!==(_stream$_writableStat=null===(_stream$_writableStat2=stream2._writableState)||void 0===_stream$_writableStat2?void 0:_stream$_writableStat2.errored)&&void 0!==_stream$_writableStat?_stream$_writableStat:null:null},isServerRequest:function(stream2){var _stream$req;return"boolean"==typeof stream2._consuming&&"boolean"==typeof stream2._dumped&&void 0===(null===(_stream$req=stream2.req)||void 0===_stream$req?void 0:_stream$req.upgradeOrConnect)},isServerResponse:isServerResponse,willEmitClose:function(stream2){if(!isNodeStream$4(stream2))return null;const wState=stream2._writableState,rState=stream2._readableState,state2=wState||rState;return!state2&&isServerResponse(stream2)||!!(state2&&state2.autoDestroy&&state2.emitClose&&!1===state2.closed)}};const process$4=browserExports$1,{AbortError:AbortError$4,codes:codes}=errors$1,{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE$3,ERR_STREAM_PREMATURE_CLOSE:ERR_STREAM_PREMATURE_CLOSE$1}=codes,{kEmptyObject:kEmptyObject,once:once$6}=utilExports,{validateAbortSignal:validateAbortSignal$2,validateFunction:validateFunction$1,validateObject:validateObject$1}=validators,{Promise:Promise$4}=primordials,{isClosed:isClosed,isReadable:isReadable$2,isReadableNodeStream:isReadableNodeStream$1,isReadableFinished:isReadableFinished,isReadableErrored:isReadableErrored,isWritable:isWritable$1,isWritableNodeStream:isWritableNodeStream,isWritableFinished:isWritableFinished,isWritableErrored:isWritableErrored,isNodeStream:isNodeStream$3,willEmitClose:_willEmitClose}=utils$4;const nop=()=>{};function eos$4(stream2,options,callback){var _options$readable,_options$writable;2===arguments.length?(callback=options,options=kEmptyObject):null==options?options=kEmptyObject:validateObject$1(options,"options"),validateFunction$1(callback,"callback"),validateAbortSignal$2(options.signal,"options.signal"),callback=once$6(callback);const readable2=null!==(_options$readable=options.readable)&&void 0!==_options$readable?_options$readable:isReadableNodeStream$1(stream2),writable2=null!==(_options$writable=options.writable)&&void 0!==_options$writable?_options$writable:isWritableNodeStream(stream2);if(!isNodeStream$3(stream2))throw new ERR_INVALID_ARG_TYPE$3("stream","Stream",stream2);const wState=stream2._writableState,rState=stream2._readableState,onlegacyfinish=()=>{stream2.writable||onfinish()};let willEmitClose2=_willEmitClose(stream2)&&isReadableNodeStream$1(stream2)===readable2&&isWritableNodeStream(stream2)===writable2,writableFinished=isWritableFinished(stream2,!1);const onfinish=()=>{writableFinished=!0,stream2.destroyed&&(willEmitClose2=!1),(!willEmitClose2||stream2.readable&&!readable2)&&(readable2&&!readableFinished||callback.call(stream2))};let readableFinished=isReadableFinished(stream2,!1);const onend=()=>{readableFinished=!0,stream2.destroyed&&(willEmitClose2=!1),(!willEmitClose2||stream2.writable&&!writable2)&&(writable2&&!writableFinished||callback.call(stream2))},onerror=err=>{callback.call(stream2,err)};let closed=isClosed(stream2);const onclose=()=>{closed=!0;const errored=isWritableErrored(stream2)||isReadableErrored(stream2);return errored&&"boolean"!=typeof errored?callback.call(stream2,errored):readable2&&!readableFinished&&isReadableNodeStream$1(stream2,!0)&&!isReadableFinished(stream2,!1)?callback.call(stream2,new ERR_STREAM_PREMATURE_CLOSE$1):!writable2||writableFinished||isWritableFinished(stream2,!1)?void callback.call(stream2):callback.call(stream2,new ERR_STREAM_PREMATURE_CLOSE$1)},onrequest=()=>{stream2.req.on("finish",onfinish)};!function(stream2){return stream2.setHeader&&"function"==typeof stream2.abort}(stream2)?writable2&&!wState&&(stream2.on("end",onlegacyfinish),stream2.on("close",onlegacyfinish)):(stream2.on("complete",onfinish),willEmitClose2||stream2.on("abort",onclose),stream2.req?onrequest():stream2.on("request",onrequest)),willEmitClose2||"boolean"!=typeof stream2.aborted||stream2.on("aborted",onclose),stream2.on("end",onend),stream2.on("finish",onfinish),!1!==options.error&&stream2.on("error",onerror),stream2.on("close",onclose),closed?process$4.nextTick(onclose):null!=wState&&wState.errorEmitted||null!=rState&&rState.errorEmitted?willEmitClose2||process$4.nextTick(onclose):(readable2||willEmitClose2&&!isReadable$2(stream2)||!writableFinished&&!1!==isWritable$1(stream2))&&(writable2||willEmitClose2&&!isWritable$1(stream2)||!readableFinished&&!1!==isReadable$2(stream2))?rState&&stream2.req&&stream2.aborted&&process$4.nextTick(onclose):process$4.nextTick(onclose);const cleanup=()=>{callback=nop,stream2.removeListener("aborted",onclose),stream2.removeListener("complete",onfinish),stream2.removeListener("abort",onclose),stream2.removeListener("request",onrequest),stream2.req&&stream2.req.removeListener("finish",onfinish),stream2.removeListener("end",onlegacyfinish),stream2.removeListener("close",onlegacyfinish),stream2.removeListener("finish",onfinish),stream2.removeListener("end",onend),stream2.removeListener("error",onerror),stream2.removeListener("close",onclose)};if(options.signal&&!closed){const abort=()=>{const endCallback=callback;cleanup(),endCallback.call(stream2,new AbortError$4(void 0,{cause:options.signal.reason}))};if(options.signal.aborted)process$4.nextTick(abort);else{const originalCallback=callback;callback=once$6(((...args)=>{options.signal.removeEventListener("abort",abort),originalCallback.apply(stream2,args)})),options.signal.addEventListener("abort",abort)}}return cleanup}endOfStream$1.exports=eos$4,endOfStreamExports.finished=function(stream2,opts2){return new Promise$4(((resolve,reject)=>{eos$4(stream2,opts2,(err=>{err?reject(err):resolve()}))}))};const AbortController$1=globalThis.AbortController||requireBrowser().AbortController,{codes:{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE$2,ERR_MISSING_ARGS:ERR_MISSING_ARGS$2,ERR_OUT_OF_RANGE:ERR_OUT_OF_RANGE},AbortError:AbortError$3}=errors$1,{validateAbortSignal:validateAbortSignal$1,validateInteger:validateInteger,validateObject:validateObject}=validators,kWeakHandler=primordials.Symbol("kWeak"),{finished:finished$1}=endOfStreamExports,{ArrayPrototypePush:ArrayPrototypePush,MathFloor:MathFloor$1,Number:Number$1,NumberIsNaN:NumberIsNaN$1,Promise:Promise$3,PromiseReject:PromiseReject,PromisePrototypeThen:PromisePrototypeThen$1,Symbol:Symbol$3}=primordials,kEmpty=Symbol$3("kEmpty"),kEof=Symbol$3("kEof");function map$1(fn,options){if("function"!=typeof fn)throw new ERR_INVALID_ARG_TYPE$2("fn",["Function","AsyncFunction"],fn);null!=options&&validateObject(options,"options"),null!=(null==options?void 0:options.signal)&&validateAbortSignal$1(options.signal,"options.signal");let concurrency=1;return null!=(null==options?void 0:options.concurrency)&&(concurrency=MathFloor$1(options.concurrency)),validateInteger(concurrency,"concurrency",1),async function*(){var _options$signal,_options$signal2;const ac=new AbortController$1,stream2=this,queue2=[],signal=ac.signal,signalOpt={signal:signal},abort=()=>ac.abort();let next,resume;null!=options&&null!==(_options$signal=options.signal)&&void 0!==_options$signal&&_options$signal.aborted&&abort(),null==options||null===(_options$signal2=options.signal)||void 0===_options$signal2||_options$signal2.addEventListener("abort",abort);let done2=!1;function onDone(){done2=!0}!async function(){try{for await(let val of stream2){var _val;if(done2)return;if(signal.aborted)throw new AbortError$3;try{val=fn(val,signalOpt)}catch(err){val=PromiseReject(err)}val!==kEmpty&&("function"==typeof(null===(_val=val)||void 0===_val?void 0:_val.catch)&&val.catch(onDone),queue2.push(val),next&&(next(),next=null),!done2&&queue2.length&&queue2.length>=concurrency&&await new Promise$3((resolve=>{resume=resolve})))}queue2.push(kEof)}catch(err){const val=PromiseReject(err);PromisePrototypeThen$1(val,void 0,onDone),queue2.push(val)}finally{var _options$signal3;done2=!0,next&&(next(),next=null),null==options||null===(_options$signal3=options.signal)||void 0===_options$signal3||_options$signal3.removeEventListener("abort",abort)}}();try{for(;;){for(;queue2.length>0;){const val=await queue2[0];if(val===kEof)return;if(signal.aborted)throw new AbortError$3;val!==kEmpty&&(yield val),queue2.shift(),resume&&(resume(),resume=null)}await new Promise$3((resolve=>{next=resolve}))}}finally{ac.abort(),done2=!0,resume&&(resume(),resume=null)}}.call(this)}async function some(fn,options=undefined){for await(const unused of filter.call(this,fn,options))return!0;return!1}function filter(fn,options){if("function"!=typeof fn)throw new ERR_INVALID_ARG_TYPE$2("fn",["Function","AsyncFunction"],fn);return map$1.call(this,(async function(value,options2){return await fn(value,options2)?value:kEmpty}),options)}class ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS$2{constructor(){super("reduce"),this.message="Reduce of an empty stream requires an initial value"}}function toIntegerOrInfinity(number2){if(number2=Number$1(number2),NumberIsNaN$1(number2))return 0;if(number2<0)throw new ERR_OUT_OF_RANGE("number",">= 0",number2);return number2}operators.streamReturningOperators={asIndexedPairs:function(options=undefined){return null!=options&&validateObject(options,"options"),null!=(null==options?void 0:options.signal)&&validateAbortSignal$1(options.signal,"options.signal"),async function*(){let index2=0;for await(const val of this){var _options$signal4;if(null!=options&&null!==(_options$signal4=options.signal)&&void 0!==_options$signal4&&_options$signal4.aborted)throw new AbortError$3({cause:options.signal.reason});yield[index2++,val]}}.call(this)},drop:function(number2,options=undefined){return null!=options&&validateObject(options,"options"),null!=(null==options?void 0:options.signal)&&validateAbortSignal$1(options.signal,"options.signal"),number2=toIntegerOrInfinity(number2),async function*(){var _options$signal8;if(null!=options&&null!==(_options$signal8=options.signal)&&void 0!==_options$signal8&&_options$signal8.aborted)throw new AbortError$3;for await(const val of this){var _options$signal9;if(null!=options&&null!==(_options$signal9=options.signal)&&void 0!==_options$signal9&&_options$signal9.aborted)throw new AbortError$3;number2--<=0&&(yield val)}}.call(this)},filter:filter,flatMap:function(fn,options){const values=map$1.call(this,fn,options);return async function*(){for await(const val of values)yield*val}.call(this)},map:map$1,take:function(number2,options=undefined){return null!=options&&validateObject(options,"options"),null!=(null==options?void 0:options.signal)&&validateAbortSignal$1(options.signal,"options.signal"),number2=toIntegerOrInfinity(number2),async function*(){var _options$signal10;if(null!=options&&null!==(_options$signal10=options.signal)&&void 0!==_options$signal10&&_options$signal10.aborted)throw new AbortError$3;for await(const val of this){var _options$signal11;if(null!=options&&null!==(_options$signal11=options.signal)&&void 0!==_options$signal11&&_options$signal11.aborted)throw new AbortError$3;if(!(number2-- >0))return;yield val}}.call(this)}},operators.promiseReturningOperators={every:async function(fn,options=undefined){if("function"!=typeof fn)throw new ERR_INVALID_ARG_TYPE$2("fn",["Function","AsyncFunction"],fn);return!(await some.call(this,(async(...args)=>!(await fn(...args))),options))},forEach:async function(fn,options){if("function"!=typeof fn)throw new ERR_INVALID_ARG_TYPE$2("fn",["Function","AsyncFunction"],fn);for await(const unused of map$1.call(this,(async function(value,options2){return await fn(value,options2),kEmpty}),options));},reduce:async function(reducer,initialValue,options){var _options$signal5;if("function"!=typeof reducer)throw new ERR_INVALID_ARG_TYPE$2("reducer",["Function","AsyncFunction"],reducer);null!=options&&validateObject(options,"options"),null!=(null==options?void 0:options.signal)&&validateAbortSignal$1(options.signal,"options.signal");let hasInitialValue=arguments.length>1;if(null!=options&&null!==(_options$signal5=options.signal)&&void 0!==_options$signal5&&_options$signal5.aborted){const err=new AbortError$3(void 0,{cause:options.signal.reason});throw this.once("error",(()=>{})),await finished$1(this.destroy(err)),err}const ac=new AbortController$1,signal=ac.signal;if(null!=options&&options.signal){const opts2={once:!0,[kWeakHandler]:this};options.signal.addEventListener("abort",(()=>ac.abort()),opts2)}let gotAnyItemFromStream=!1;try{for await(const value of this){var _options$signal6;if(gotAnyItemFromStream=!0,null!=options&&null!==(_options$signal6=options.signal)&&void 0!==_options$signal6&&_options$signal6.aborted)throw new AbortError$3;hasInitialValue?initialValue=await reducer(initialValue,value,{signal:signal}):(initialValue=value,hasInitialValue=!0)}if(!gotAnyItemFromStream&&!hasInitialValue)throw new ReduceAwareErrMissingArgs}finally{ac.abort()}return initialValue},toArray:async function(options){null!=options&&validateObject(options,"options"),null!=(null==options?void 0:options.signal)&&validateAbortSignal$1(options.signal,"options.signal");const result=[];for await(const val of this){var _options$signal7;if(null!=options&&null!==(_options$signal7=options.signal)&&void 0!==_options$signal7&&_options$signal7.aborted)throw new AbortError$3(void 0,{cause:options.signal.reason});ArrayPrototypePush(result,val)}return result},some:some,find:async function(fn,options){for await(const result of filter.call(this,fn,options))return result}};const process$3=browserExports$1,{aggregateTwoErrors:aggregateTwoErrors$1,codes:{ERR_MULTIPLE_CALLBACK:ERR_MULTIPLE_CALLBACK},AbortError:AbortError$2}=errors$1,{Symbol:Symbol$2}=primordials,{kDestroyed:kDestroyed,isDestroyed:isDestroyed,isFinished:isFinished,isServerRequest:isServerRequest}=utils$4,kDestroy=Symbol$2("kDestroy"),kConstruct=Symbol$2("kConstruct");function checkError(err,w,r){err&&(err.stack,w&&!w.errored&&(w.errored=err),r&&!r.errored&&(r.errored=err))}function _destroy(self2,err,cb){let called=!1;function onDestroy(err2){if(called)return;called=!0;const r=self2._readableState,w=self2._writableState;checkError(err2,w,r),w&&(w.closed=!0),r&&(r.closed=!0),"function"==typeof cb&&cb(err2),err2?process$3.nextTick(emitErrorCloseNT,self2,err2):process$3.nextTick(emitCloseNT,self2)}try{self2._destroy(err||null,onDestroy)}catch(err2){onDestroy(err2)}}function emitErrorCloseNT(self2,err){emitErrorNT$2(self2,err),emitCloseNT(self2)}function emitCloseNT(self2){const r=self2._readableState,w=self2._writableState;w&&(w.closeEmitted=!0),r&&(r.closeEmitted=!0),(w&&w.emitClose||r&&r.emitClose)&&self2.emit("close")}function emitErrorNT$2(self2,err){const r=self2._readableState,w=self2._writableState;w&&w.errorEmitted||r&&r.errorEmitted||(w&&(w.errorEmitted=!0),r&&(r.errorEmitted=!0),self2.emit("error",err))}function errorOrDestroy(stream2,err,sync){const r=stream2._readableState,w=stream2._writableState;if(w&&w.destroyed||r&&r.destroyed)return this;r&&r.autoDestroy||w&&w.autoDestroy?stream2.destroy(err):err&&(err.stack,w&&!w.errored&&(w.errored=err),r&&!r.errored&&(r.errored=err),sync?process$3.nextTick(emitErrorNT$2,stream2,err):emitErrorNT$2(stream2,err))}function constructNT(stream2){let called=!1;function onConstruct(err){if(called)return void errorOrDestroy(stream2,null!=err?err:new ERR_MULTIPLE_CALLBACK);called=!0;const r=stream2._readableState,w=stream2._writableState,s=w||r;r&&(r.constructed=!0),w&&(w.constructed=!0),s.destroyed?stream2.emit(kDestroy,err):err?errorOrDestroy(stream2,err,!0):process$3.nextTick(emitConstructNT,stream2)}try{stream2._construct(onConstruct)}catch(err){onConstruct(err)}}function emitConstructNT(stream2){stream2.emit(kConstruct)}function isRequest$2(stream2){return stream2&&stream2.setHeader&&"function"==typeof stream2.abort}function emitCloseLegacy(stream2){stream2.emit("close")}function emitErrorCloseLegacy(stream2,err){stream2.emit("error",err),process$3.nextTick(emitCloseLegacy,stream2)}var ReflectOwnKeys,destroy_1$2={construct:function(stream2,cb){if("function"!=typeof stream2._construct)return;const r=stream2._readableState,w=stream2._writableState;r&&(r.constructed=!1),w&&(w.constructed=!1),stream2.once(kConstruct,cb),stream2.listenerCount(kConstruct)>1||process$3.nextTick(constructNT,stream2)},destroyer:function(stream2,err){stream2&&!isDestroyed(stream2)&&(err||isFinished(stream2)||(err=new AbortError$2),isServerRequest(stream2)?(stream2.socket=null,stream2.destroy(err)):isRequest$2(stream2)?stream2.abort():isRequest$2(stream2.req)?stream2.req.abort():"function"==typeof stream2.destroy?stream2.destroy(err):"function"==typeof stream2.close?stream2.close():err?process$3.nextTick(emitErrorCloseLegacy,stream2,err):process$3.nextTick(emitCloseLegacy,stream2),stream2.destroyed||(stream2[kDestroyed]=!0))},destroy:function(err,cb){const r=this._readableState,w=this._writableState,s=w||r;return w&&w.destroyed||r&&r.destroyed?("function"==typeof cb&&cb(),this):(checkError(err,w,r),w&&(w.destroyed=!0),r&&(r.destroyed=!0),s.constructed?_destroy(this,err,cb):this.once(kDestroy,(function(er){_destroy(this,aggregateTwoErrors$1(er,err),cb)})),this)},undestroy:function(){const r=this._readableState,w=this._writableState;r&&(r.constructed=!0,r.closed=!1,r.closeEmitted=!1,r.destroyed=!1,r.errored=null,r.errorEmitted=!1,r.reading=!1,r.ended=!1===r.readable,r.endEmitted=!1===r.readable),w&&(w.constructed=!0,w.destroyed=!1,w.closed=!1,w.closeEmitted=!1,w.errored=null,w.errorEmitted=!1,w.finalCalled=!1,w.prefinished=!1,w.ended=!1===w.writable,w.ending=!1===w.writable,w.finished=!1===w.writable)},errorOrDestroy:errorOrDestroy},eventsExports={},events={get exports(){return eventsExports},set exports(v){eventsExports=v}},R="object"==typeof Reflect?Reflect:null,ReflectApply$1=R&&"function"==typeof R.apply?R.apply:function(target,receiver,args){return Function.prototype.apply.call(target,receiver,args)};ReflectOwnKeys=R&&"function"==typeof R.ownKeys?R.ownKeys:Object.getOwnPropertySymbols?function(target){return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))}:function(target){return Object.getOwnPropertyNames(target)};var NumberIsNaN=Number.isNaN||function(value){return value!=value};function EventEmitter(){EventEmitter.init.call(this)}events.exports=EventEmitter,eventsExports.once=function(emitter,name){return new Promise((function(resolve,reject){function errorListener(err){emitter.removeListener(name,resolver),reject(err)}function resolver(){"function"==typeof emitter.removeListener&&emitter.removeListener("error",errorListener),resolve([].slice.call(arguments))}eventTargetAgnosticAddListener(emitter,name,resolver,{once:!0}),"error"!==name&&function(emitter,handler,flags){"function"==typeof emitter.on&&eventTargetAgnosticAddListener(emitter,"error",handler,flags)}(emitter,errorListener,{once:!0})}))},EventEmitter.EventEmitter=EventEmitter,EventEmitter.prototype._events=void 0,EventEmitter.prototype._eventsCount=0,EventEmitter.prototype._maxListeners=void 0;var defaultMaxListeners=10;function checkListener(listener){if("function"!=typeof listener)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof listener)}function _getMaxListeners(that){return void 0===that._maxListeners?EventEmitter.defaultMaxListeners:that._maxListeners}function _addListener(target,type2,listener,prepend){var m,events2,existing,warning;if(checkListener(listener),void 0===(events2=target._events)?(events2=target._events=Object.create(null),target._eventsCount=0):(void 0!==events2.newListener&&(target.emit("newListener",type2,listener.listener?listener.listener:listener),events2=target._events),existing=events2[type2]),void 0===existing)existing=events2[type2]=listener,++target._eventsCount;else if("function"==typeof existing?existing=events2[type2]=prepend?[listener,existing]:[existing,listener]:prepend?existing.unshift(listener):existing.push(listener),(m=_getMaxListeners(target))>0&&existing.length>m&&!existing.warned){existing.warned=!0;var w=new Error("Possible EventEmitter memory leak detected. "+existing.length+" "+String(type2)+" listeners added. Use emitter.setMaxListeners() to increase limit");w.name="MaxListenersExceededWarning",w.emitter=target,w.type=type2,w.count=existing.length,warning=w,console&&console.warn&&console.warn(warning)}return target}function onceWrapper(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function _onceWrap(target,type2,listener){var state2={fired:!1,wrapFn:void 0,target:target,type:type2,listener:listener},wrapped=onceWrapper.bind(state2);return wrapped.listener=listener,state2.wrapFn=wrapped,wrapped}function _listeners(target,type2,unwrap){var events2=target._events;if(void 0===events2)return[];var evlistener=events2[type2];return void 0===evlistener?[]:"function"==typeof evlistener?unwrap?[evlistener.listener||evlistener]:[evlistener]:unwrap?function(arr2){for(var ret=new Array(arr2.length),i2=0;i2<ret.length;++i2)ret[i2]=arr2[i2].listener||arr2[i2];return ret}(evlistener):arrayClone$1(evlistener,evlistener.length)}function listenerCount(type2){var events2=this._events;if(void 0!==events2){var evlistener=events2[type2];if("function"==typeof evlistener)return 1;if(void 0!==evlistener)return evlistener.length}return 0}function arrayClone$1(arr2,n){for(var copy=new Array(n),i2=0;i2<n;++i2)copy[i2]=arr2[i2];return copy}function eventTargetAgnosticAddListener(emitter,name,listener,flags){if("function"==typeof emitter.on)flags.once?emitter.once(name,listener):emitter.on(name,listener);else{if("function"!=typeof emitter.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof emitter);emitter.addEventListener(name,(function wrapListener(arg){flags.once&&emitter.removeEventListener(name,wrapListener),listener(arg)}))}}Object.defineProperty(EventEmitter,"defaultMaxListeners",{enumerable:!0,get:function(){return defaultMaxListeners},set:function(arg){if("number"!=typeof arg||arg<0||NumberIsNaN(arg))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+arg+".");defaultMaxListeners=arg}}),EventEmitter.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function(n){if("number"!=typeof n||n<0||NumberIsNaN(n))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+".");return this._maxListeners=n,this},EventEmitter.prototype.getMaxListeners=function(){return _getMaxListeners(this)},EventEmitter.prototype.emit=function(type2){for(var args=[],i2=1;i2<arguments.length;i2++)args.push(arguments[i2]);var doError="error"===type2,events2=this._events;if(void 0!==events2)doError=doError&&void 0===events2.error;else if(!doError)return!1;if(doError){var er;if(args.length>0&&(er=args[0]),er instanceof Error)throw er;var err=new Error("Unhandled error."+(er?" ("+er.message+")":""));throw err.context=er,err}var handler=events2[type2];if(void 0===handler)return!1;if("function"==typeof handler)ReflectApply$1(handler,this,args);else{var len2=handler.length,listeners=arrayClone$1(handler,len2);for(i2=0;i2<len2;++i2)ReflectApply$1(listeners[i2],this,args)}return!0},EventEmitter.prototype.addListener=function(type2,listener){return _addListener(this,type2,listener,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function(type2,listener){return _addListener(this,type2,listener,!0)},EventEmitter.prototype.once=function(type2,listener){return checkListener(listener),this.on(type2,_onceWrap(this,type2,listener)),this},EventEmitter.prototype.prependOnceListener=function(type2,listener){return checkListener(listener),this.prependListener(type2,_onceWrap(this,type2,listener)),this},EventEmitter.prototype.removeListener=function(type2,listener){var list,events2,position,i2,originalListener;if(checkListener(listener),void 0===(events2=this._events))return this;if(void 0===(list=events2[type2]))return this;if(list===listener||list.listener===listener)0==--this._eventsCount?this._events=Object.create(null):(delete events2[type2],events2.removeListener&&this.emit("removeListener",type2,list.listener||listener));else if("function"!=typeof list){for(position=-1,i2=list.length-1;i2>=0;i2--)if(list[i2]===listener||list[i2].listener===listener){originalListener=list[i2].listener,position=i2;break}if(position<0)return this;0===position?list.shift():function(list,index2){for(;index2+1<list.length;index2++)list[index2]=list[index2+1];list.pop()}(list,position),1===list.length&&(events2[type2]=list[0]),void 0!==events2.removeListener&&this.emit("removeListener",type2,originalListener||listener)}return this},EventEmitter.prototype.off=EventEmitter.prototype.removeListener,EventEmitter.prototype.removeAllListeners=function(type2){var listeners,events2,i2;if(void 0===(events2=this._events))return this;if(void 0===events2.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==events2[type2]&&(0==--this._eventsCount?this._events=Object.create(null):delete events2[type2]),this;if(0===arguments.length){var key,keys=Object.keys(events2);for(i2=0;i2<keys.length;++i2)"removeListener"!==(key=keys[i2])&&this.removeAllListeners(key);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(listeners=events2[type2]))this.removeListener(type2,listeners);else if(void 0!==listeners)for(i2=listeners.length-1;i2>=0;i2--)this.removeListener(type2,listeners[i2]);return this},EventEmitter.prototype.listeners=function(type2){return _listeners(this,type2,!0)},EventEmitter.prototype.rawListeners=function(type2){return _listeners(this,type2,!1)},EventEmitter.listenerCount=function(emitter,type2){return"function"==typeof emitter.listenerCount?emitter.listenerCount(type2):listenerCount.call(emitter,type2)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function(){return this._eventsCount>0?ReflectOwnKeys(this._events):[]};const{ArrayIsArray:ArrayIsArray$1,ObjectSetPrototypeOf:ObjectSetPrototypeOf$2}=primordials,{EventEmitter:EE}=eventsExports;function Stream$1(opts2){EE.call(this,opts2)}function prependListener(emitter,event,fn){if("function"==typeof emitter.prependListener)return emitter.prependListener(event,fn);emitter._events&&emitter._events[event]?ArrayIsArray$1(emitter._events[event])?emitter._events[event].unshift(fn):emitter._events[event]=[fn,emitter._events[event]]:emitter.on(event,fn)}ObjectSetPrototypeOf$2(Stream$1.prototype,EE.prototype),ObjectSetPrototypeOf$2(Stream$1,EE),Stream$1.prototype.pipe=function(dest,options){const source=this;function ondata(chunk){dest.writable&&!1===dest.write(chunk)&&source.pause&&source.pause()}function ondrain(){source.readable&&source.resume&&source.resume()}source.on("data",ondata),dest.on("drain",ondrain),dest._isStdio||options&&!1===options.end||(source.on("end",onend),source.on("close",onclose));let didOnEnd=!1;function onend(){didOnEnd||(didOnEnd=!0,dest.end())}function onclose(){didOnEnd||(didOnEnd=!0,"function"==typeof dest.destroy&&dest.destroy())}function onerror(er){cleanup(),0===EE.listenerCount(this,"error")&&this.emit("error",er)}function cleanup(){source.removeListener("data",ondata),dest.removeListener("drain",ondrain),source.removeListener("end",onend),source.removeListener("close",onclose),source.removeListener("error",onerror),dest.removeListener("error",onerror),source.removeListener("end",cleanup),source.removeListener("close",cleanup),dest.removeListener("close",cleanup)}return prependListener(source,"error",onerror),prependListener(dest,"error",onerror),source.on("end",cleanup),source.on("close",cleanup),dest.on("close",cleanup),dest.emit("pipe",source),dest};var legacy={Stream:Stream$1,prependListener:prependListener},addAbortSignalExports={};!function(module){const{AbortError:AbortError2,codes:codes2}=errors$1,eos2=endOfStreamExports,{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE2}=codes2;module.exports.addAbortSignal=function(signal,stream2){if(((signal,name)=>{if("object"!=typeof signal||!("aborted"in signal))throw new ERR_INVALID_ARG_TYPE2(name,"AbortSignal",signal)})(signal,"signal"),!(obj=stream2)||"function"!=typeof obj.pipe)throw new ERR_INVALID_ARG_TYPE2("stream","stream.Stream",stream2);var obj;return module.exports.addAbortSignalNoValidate(signal,stream2)},module.exports.addAbortSignalNoValidate=function(signal,stream2){if("object"!=typeof signal||!("aborted"in signal))return stream2;const onAbort=()=>{stream2.destroy(new AbortError2(void 0,{cause:signal.reason}))};return signal.aborted?onAbort():(signal.addEventListener("abort",onAbort),eos2(stream2,(()=>signal.removeEventListener("abort",onAbort)))),stream2}}({get exports(){return addAbortSignalExports},set exports(v){addAbortSignalExports=v}});const{StringPrototypeSlice:StringPrototypeSlice,SymbolIterator:SymbolIterator$1,TypedArrayPrototypeSet:TypedArrayPrototypeSet,Uint8Array:Uint8Array$1}=primordials,{Buffer:Buffer$4}=buffer,{inspect:inspect}=utilExports;var buffer_list=class{constructor(){this.head=null,this.tail=null,this.length=0}push(v){const entry={data:v,next:null};this.length>0?this.tail.next=entry:this.head=entry,this.tail=entry,++this.length}unshift(v){const entry={data:v,next:this.head};0===this.length&&(this.tail=entry),this.head=entry,++this.length}shift(){if(0===this.length)return;const ret=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,ret}clear(){this.head=this.tail=null,this.length=0}join(s){if(0===this.length)return"";let p=this.head,ret=""+p.data;for(;null!==(p=p.next);)ret+=s+p.data;return ret}concat(n){if(0===this.length)return Buffer$4.alloc(0);const ret=Buffer$4.allocUnsafe(n>>>0);let p=this.head,i2=0;for(;p;)TypedArrayPrototypeSet(ret,p.data,i2),i2+=p.data.length,p=p.next;return ret}consume(n,hasStrings){const data=this.head.data;if(n<data.length){const slice=data.slice(0,n);return this.head.data=data.slice(n),slice}return n===data.length?this.shift():hasStrings?this._getString(n):this._getBuffer(n)}first(){return this.head.data}*[SymbolIterator$1](){for(let p=this.head;p;p=p.next)yield p.data}_getString(n){let ret="",p=this.head,c=0;do{const str=p.data;if(!(n>str.length)){n===str.length?(ret+=str,++c,p.next?this.head=p.next:this.head=this.tail=null):(ret+=StringPrototypeSlice(str,0,n),this.head=p,p.data=StringPrototypeSlice(str,n));break}ret+=str,n-=str.length,++c}while(null!==(p=p.next));return this.length-=c,ret}_getBuffer(n){const ret=Buffer$4.allocUnsafe(n),retLen=n;let p=this.head,c=0;do{const buf=p.data;if(!(n>buf.length)){n===buf.length?(TypedArrayPrototypeSet(ret,buf,retLen-n),++c,p.next?this.head=p.next:this.head=this.tail=null):(TypedArrayPrototypeSet(ret,new Uint8Array$1(buf.buffer,buf.byteOffset,n),retLen-n),this.head=p,p.data=buf.slice(n));break}TypedArrayPrototypeSet(ret,buf,retLen-n),n-=buf.length,++c}while(null!==(p=p.next));return this.length-=c,ret}[Symbol.for("nodejs.util.inspect.custom")](_,options){return inspect(this,{...options,depth:0,customInspect:!1})}};const{MathFloor:MathFloor,NumberIsInteger:NumberIsInteger}=primordials,{ERR_INVALID_ARG_VALUE:ERR_INVALID_ARG_VALUE$1}=errors$1.codes;function getDefaultHighWaterMark(objectMode){return objectMode?16:16384}var state={getHighWaterMark:function(state2,options,duplexKey,isDuplex){const hwm=function(options,isDuplex,duplexKey){return null!=options.highWaterMark?options.highWaterMark:isDuplex?options[duplexKey]:null}(options,isDuplex,duplexKey);if(null!=hwm){if(!NumberIsInteger(hwm)||hwm<0){throw new ERR_INVALID_ARG_VALUE$1(isDuplex?`options.${duplexKey}`:"options.highWaterMark",hwm)}return MathFloor(hwm)}return getDefaultHighWaterMark(state2.objectMode)},getDefaultHighWaterMark:getDefaultHighWaterMark},string_decoder$1={},safeBufferExports={};!function(module,exports){var buffer$1=buffer,Buffer2=buffer$1.Buffer;function copyProps(src,dst){for(var key in src)dst[key]=src[key]}function SafeBuffer(arg,encodingOrOffset,length){return Buffer2(arg,encodingOrOffset,length)}Buffer2.from&&Buffer2.alloc&&Buffer2.allocUnsafe&&Buffer2.allocUnsafeSlow?module.exports=buffer$1:(copyProps(buffer$1,exports),exports.Buffer=SafeBuffer),copyProps(Buffer2,SafeBuffer),SafeBuffer.from=function(arg,encodingOrOffset,length){if("number"==typeof arg)throw new TypeError("Argument must not be a number");return Buffer2(arg,encodingOrOffset,length)},SafeBuffer.alloc=function(size2,fill,encoding){if("number"!=typeof size2)throw new TypeError("Argument must be a number");var buf=Buffer2(size2);return void 0!==fill?"string"==typeof encoding?buf.fill(fill,encoding):buf.fill(fill):buf.fill(0),buf},SafeBuffer.allocUnsafe=function(size2){if("number"!=typeof size2)throw new TypeError("Argument must be a number");return Buffer2(size2)},SafeBuffer.allocUnsafeSlow=function(size2){if("number"!=typeof size2)throw new TypeError("Argument must be a number");return buffer$1.SlowBuffer(size2)}}({get exports(){return safeBufferExports},set exports(v){safeBufferExports=v}},safeBufferExports);var Buffer$3=safeBufferExports.Buffer,isEncoding=Buffer$3.isEncoding||function(encoding){switch((encoding=""+encoding)&&encoding.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function StringDecoder(encoding){var nb;switch(this.encoding=function(enc){var nenc=function(enc){if(!enc)return"utf8";for(var retried;;)switch(enc){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return enc;default:if(retried)return;enc=(""+enc).toLowerCase(),retried=!0}}(enc);if("string"!=typeof nenc&&(Buffer$3.isEncoding===isEncoding||!isEncoding(enc)))throw new Error("Unknown encoding: "+enc);return nenc||enc}(encoding),this.encoding){case"utf16le":this.text=utf16Text,this.end=utf16End,nb=4;break;case"utf8":this.fillLast=utf8FillLast,nb=4;break;case"base64":this.text=base64Text,this.end=base64End,nb=3;break;default:return this.write=simpleWrite,void(this.end=simpleEnd)}this.lastNeed=0,this.lastTotal=0,this.lastChar=Buffer$3.allocUnsafe(nb)}function utf8CheckByte(byte){return byte<=127?0:byte>>5==6?2:byte>>4==14?3:byte>>3==30?4:-1}function utf8FillLast(buf){var p=this.lastTotal-this.lastNeed,r=function(self2,buf,p){if(128!=(192&buf[0]))return self2.lastNeed=0,"�".repeat(p);if(self2.lastNeed>1&&buf.length>1){if(128!=(192&buf[1]))return self2.lastNeed=1,"�".repeat(p+1);if(self2.lastNeed>2&&buf.length>2&&128!=(192&buf[2]))return self2.lastNeed=2,"�".repeat(p+2)}}(this,buf,p);return void 0!==r?r:this.lastNeed<=buf.length?(buf.copy(this.lastChar,p,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(buf.copy(this.lastChar,p,0,buf.length),void(this.lastNeed-=buf.length))}function utf16Text(buf,i2){if((buf.length-i2)%2==0){var r=buf.toString("utf16le",i2);if(r){var c=r.charCodeAt(r.length-1);if(c>=55296&&c<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=buf[buf.length-2],this.lastChar[1]=buf[buf.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=buf[buf.length-1],buf.toString("utf16le",i2,buf.length-1)}function utf16End(buf){var r=buf&&buf.length?this.write(buf):"";if(this.lastNeed){var end=this.lastTotal-this.lastNeed;return r+this.lastChar.toString("utf16le",0,end)}return r}function base64Text(buf,i2){var n=(buf.length-i2)%3;return 0===n?buf.toString("base64",i2):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=buf[buf.length-1]:(this.lastChar[0]=buf[buf.length-2],this.lastChar[1]=buf[buf.length-1]),buf.toString("base64",i2,buf.length-n))}function base64End(buf){var r=buf&&buf.length?this.write(buf):"";return this.lastNeed?r+this.lastChar.toString("base64",0,3-this.lastNeed):r}function simpleWrite(buf){return buf.toString(this.encoding)}function simpleEnd(buf){return buf&&buf.length?this.write(buf):""}string_decoder$1.StringDecoder=StringDecoder,StringDecoder.prototype.write=function(buf){if(0===buf.length)return"";var r,i2;if(this.lastNeed){if(void 0===(r=this.fillLast(buf)))return"";i2=this.lastNeed,this.lastNeed=0}else i2=0;return i2<buf.length?r?r+this.text(buf,i2):this.text(buf,i2):r||""},StringDecoder.prototype.end=function(buf){var r=buf&&buf.length?this.write(buf):"";return this.lastNeed?r+"�".repeat(this.lastTotal-this.lastNeed):r},StringDecoder.prototype.text=function(buf,i2){var total=function(self2,buf,i2){var j=buf.length-1;if(j<i2)return 0;var nb=utf8CheckByte(buf[j]);if(nb>=0)return nb>0&&(self2.lastNeed=nb-1),nb;if(--j<i2)return 0;if(nb=utf8CheckByte(buf[j]),nb>=0)return nb>0&&(self2.lastNeed=nb-2),nb;if(--j<i2)return 0;if(nb=utf8CheckByte(buf[j]),nb>=0)return nb>0&&(2===nb?nb=0:self2.lastNeed=nb-3),nb;return 0}(this,buf,i2);if(!this.lastNeed)return buf.toString("utf8",i2);this.lastTotal=total;var end=buf.length-(total-this.lastNeed);return buf.copy(this.lastChar,0,end),buf.toString("utf8",i2,end)},StringDecoder.prototype.fillLast=function(buf){if(this.lastNeed<=buf.length)return buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,buf.length),this.lastNeed-=buf.length};const process$2=browserExports$1,{PromisePrototypeThen:PromisePrototypeThen,SymbolAsyncIterator:SymbolAsyncIterator$1,SymbolIterator:SymbolIterator}=primordials,{Buffer:Buffer$2}=buffer,{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE$1,ERR_STREAM_NULL_VALUES:ERR_STREAM_NULL_VALUES}=errors$1.codes;var readable,hasRequiredReadable,writable,hasRequiredWritable,duplexify,hasRequiredDuplexify,duplex,hasRequiredDuplex,from_1=function(Readable2,iterable,opts2){let iterator2,isAsync;if("string"==typeof iterable||iterable instanceof Buffer$2)return new Readable2({objectMode:!0,...opts2,read(){this.push(iterable),this.push(null)}});if(iterable&&iterable[SymbolAsyncIterator$1])isAsync=!0,iterator2=iterable[SymbolAsyncIterator$1]();else{if(!iterable||!iterable[SymbolIterator])throw new ERR_INVALID_ARG_TYPE$1("iterable",["Iterable"],iterable);isAsync=!1,iterator2=iterable[SymbolIterator]()}const readable2=new Readable2({objectMode:!0,highWaterMark:1,...opts2});let reading=!1;return readable2._read=function(){reading||(reading=!0,async function(){for(;;){try{const{value:value,done:done2}=isAsync?await iterator2.next():iterator2.next();if(done2)readable2.push(null);else{const res=value&&"function"==typeof value.then?await value:value;if(null===res)throw reading=!1,new ERR_STREAM_NULL_VALUES;if(readable2.push(res))continue;reading=!1}}catch(err){readable2.destroy(err)}break}}())},readable2._destroy=function(error,cb){PromisePrototypeThen(async function(error){const hadError=null!=error,hasThrow="function"==typeof iterator2.throw;if(hadError&&hasThrow){const{value:value,done:done2}=await iterator2.throw(error);if(await value,done2)return}if("function"==typeof iterator2.return){const{value:value}=await iterator2.return();await value}}(error),(()=>process$2.nextTick(cb,error)),(e=>process$2.nextTick(cb,e||error)))},readable2};function requireReadable(){if(hasRequiredReadable)return readable;hasRequiredReadable=1;const process2=browserExports$1,{ArrayPrototypeIndexOf:ArrayPrototypeIndexOf,NumberIsInteger:NumberIsInteger2,NumberIsNaN:NumberIsNaN2,NumberParseInt:NumberParseInt2,ObjectDefineProperties:ObjectDefineProperties,ObjectKeys:ObjectKeys2,ObjectSetPrototypeOf:ObjectSetPrototypeOf2,Promise:Promise2,SafeSet:SafeSet,SymbolAsyncIterator:SymbolAsyncIterator2,Symbol:Symbol2}=primordials;readable=Readable2,Readable2.ReadableState=ReadableState;const{EventEmitter:EE2}=eventsExports,{Stream:Stream2,prependListener:prependListener2}=legacy,{Buffer:Buffer2}=buffer,{addAbortSignal:addAbortSignal2}=addAbortSignalExports,eos2=endOfStreamExports;let debug2=utilExports.debuglog("stream",(fn=>{debug2=fn}));const BufferList2=buffer_list,destroyImpl2=destroy_1$2,{getHighWaterMark:getHighWaterMark2,getDefaultHighWaterMark:getDefaultHighWaterMark2}=state,{aggregateTwoErrors:aggregateTwoErrors2,codes:{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE2,ERR_METHOD_NOT_IMPLEMENTED:ERR_METHOD_NOT_IMPLEMENTED2,ERR_OUT_OF_RANGE:ERR_OUT_OF_RANGE2,ERR_STREAM_PUSH_AFTER_EOF:ERR_STREAM_PUSH_AFTER_EOF,ERR_STREAM_UNSHIFT_AFTER_END_EVENT:ERR_STREAM_UNSHIFT_AFTER_END_EVENT}}=errors$1,{validateObject:validateObject2}=validators,kPaused=Symbol2("kPaused"),{StringDecoder:StringDecoder2}=string_decoder$1,from2=from_1;ObjectSetPrototypeOf2(Readable2.prototype,Stream2.prototype),ObjectSetPrototypeOf2(Readable2,Stream2);const nop2=()=>{},{errorOrDestroy:errorOrDestroy2}=destroyImpl2;function ReadableState(options,stream2,isDuplex){"boolean"!=typeof isDuplex&&(isDuplex=stream2 instanceof requireDuplex()),this.objectMode=!(!options||!options.objectMode),isDuplex&&(this.objectMode=this.objectMode||!(!options||!options.readableObjectMode)),this.highWaterMark=options?getHighWaterMark2(this,options,"readableHighWaterMark",isDuplex):getDefaultHighWaterMark2(!1),this.buffer=new BufferList2,this.length=0,this.pipes=[],this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.constructed=!0,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this[kPaused]=null,this.errorEmitted=!1,this.emitClose=!options||!1!==options.emitClose,this.autoDestroy=!options||!1!==options.autoDestroy,this.destroyed=!1,this.errored=null,this.closed=!1,this.closeEmitted=!1,this.defaultEncoding=options&&options.defaultEncoding||"utf8",this.awaitDrainWriters=null,this.multiAwaitDrain=!1,this.readingMore=!1,this.dataEmitted=!1,this.decoder=null,this.encoding=null,options&&options.encoding&&(this.decoder=new StringDecoder2(options.encoding),this.encoding=options.encoding)}function Readable2(options){if(!(this instanceof Readable2))return new Readable2(options);const isDuplex=this instanceof requireDuplex();this._readableState=new ReadableState(options,this,isDuplex),options&&("function"==typeof options.read&&(this._read=options.read),"function"==typeof options.destroy&&(this._destroy=options.destroy),"function"==typeof options.construct&&(this._construct=options.construct),options.signal&&!isDuplex&&addAbortSignal2(options.signal,this)),Stream2.call(this,options),destroyImpl2.construct(this,(()=>{this._readableState.needReadable&&maybeReadMore(this,this._readableState)}))}function readableAddChunk(stream2,chunk,encoding,addToFront){debug2("readableAddChunk",chunk);const state2=stream2._readableState;let err;if(state2.objectMode||("string"==typeof chunk?(encoding=encoding||state2.defaultEncoding,state2.encoding!==encoding&&(addToFront&&state2.encoding?chunk=Buffer2.from(chunk,encoding).toString(state2.encoding):(chunk=Buffer2.from(chunk,encoding),encoding=""))):chunk instanceof Buffer2?encoding="":Stream2._isUint8Array(chunk)?(chunk=Stream2._uint8ArrayToBuffer(chunk),encoding=""):null!=chunk&&(err=new ERR_INVALID_ARG_TYPE2("chunk",["string","Buffer","Uint8Array"],chunk))),err)errorOrDestroy2(stream2,err);else if(null===chunk)state2.reading=!1,function(stream2,state2){if(debug2("onEofChunk"),state2.ended)return;if(state2.decoder){const chunk=state2.decoder.end();chunk&&chunk.length&&(state2.buffer.push(chunk),state2.length+=state2.objectMode?1:chunk.length)}state2.ended=!0,state2.sync?emitReadable(stream2):(state2.needReadable=!1,state2.emittedReadable=!0,emitReadable_(stream2))}(stream2,state2);else if(state2.objectMode||chunk&&chunk.length>0)if(addToFront)if(state2.endEmitted)errorOrDestroy2(stream2,new ERR_STREAM_UNSHIFT_AFTER_END_EVENT);else{if(state2.destroyed||state2.errored)return!1;addChunk(stream2,state2,chunk,!0)}else if(state2.ended)errorOrDestroy2(stream2,new ERR_STREAM_PUSH_AFTER_EOF);else{if(state2.destroyed||state2.errored)return!1;state2.reading=!1,state2.decoder&&!encoding?(chunk=state2.decoder.write(chunk),state2.objectMode||0!==chunk.length?addChunk(stream2,state2,chunk,!1):maybeReadMore(stream2,state2)):addChunk(stream2,state2,chunk,!1)}else addToFront||(state2.reading=!1,maybeReadMore(stream2,state2));return!state2.ended&&(state2.length<state2.highWaterMark||0===state2.length)}function addChunk(stream2,state2,chunk,addToFront){state2.flowing&&0===state2.length&&!state2.sync&&stream2.listenerCount("data")>0?(state2.multiAwaitDrain?state2.awaitDrainWriters.clear():state2.awaitDrainWriters=null,state2.dataEmitted=!0,stream2.emit("data",chunk)):(state2.length+=state2.objectMode?1:chunk.length,addToFront?state2.buffer.unshift(chunk):state2.buffer.push(chunk),state2.needReadable&&emitReadable(stream2)),maybeReadMore(stream2,state2)}Readable2.prototype.destroy=destroyImpl2.destroy,Readable2.prototype._undestroy=destroyImpl2.undestroy,Readable2.prototype._destroy=function(err,cb){cb(err)},Readable2.prototype[EE2.captureRejectionSymbol]=function(err){this.destroy(err)},Readable2.prototype.push=function(chunk,encoding){return readableAddChunk(this,chunk,encoding,!1)},Readable2.prototype.unshift=function(chunk,encoding){return readableAddChunk(this,chunk,encoding,!0)},Readable2.prototype.isPaused=function(){const state2=this._readableState;return!0===state2[kPaused]||!1===state2.flowing},Readable2.prototype.setEncoding=function(enc){const decoder=new StringDecoder2(enc);this._readableState.decoder=decoder,this._readableState.encoding=this._readableState.decoder.encoding;const buffer2=this._readableState.buffer;let content="";for(const data of buffer2)content+=decoder.write(data);return buffer2.clear(),""!==content&&buffer2.push(content),this._readableState.length=content.length,this};const MAX_HWM=1073741824;function howMuchToRead(n,state2){return n<=0||0===state2.length&&state2.ended?0:state2.objectMode?1:NumberIsNaN2(n)?state2.flowing&&state2.length?state2.buffer.first().length:state2.length:n<=state2.length?n:state2.ended?state2.length:0}function emitReadable(stream2){const state2=stream2._readableState;debug2("emitReadable",state2.needReadable,state2.emittedReadable),state2.needReadable=!1,state2.emittedReadable||(debug2("emitReadable",state2.flowing),state2.emittedReadable=!0,process2.nextTick(emitReadable_,stream2))}function emitReadable_(stream2){const state2=stream2._readableState;debug2("emitReadable_",state2.destroyed,state2.length,state2.ended),state2.destroyed||state2.errored||!state2.length&&!state2.ended||(stream2.emit("readable"),state2.emittedReadable=!1),state2.needReadable=!state2.flowing&&!state2.ended&&state2.length<=state2.highWaterMark,flow(stream2)}function maybeReadMore(stream2,state2){!state2.readingMore&&state2.constructed&&(state2.readingMore=!0,process2.nextTick(maybeReadMore_,stream2,state2))}function maybeReadMore_(stream2,state2){for(;!state2.reading&&!state2.ended&&(state2.length<state2.highWaterMark||state2.flowing&&0===state2.length);){const len2=state2.length;if(debug2("maybeReadMore read 0"),stream2.read(0),len2===state2.length)break}state2.readingMore=!1}function updateReadableListening(self2){const state2=self2._readableState;state2.readableListening=self2.listenerCount("readable")>0,state2.resumeScheduled&&!1===state2[kPaused]?state2.flowing=!0:self2.listenerCount("data")>0?self2.resume():state2.readableListening||(state2.flowing=null)}function nReadingNextTick(self2){debug2("readable nexttick read 0"),self2.read(0)}function resume_(stream2,state2){debug2("resume",state2.reading),state2.reading||stream2.read(0),state2.resumeScheduled=!1,stream2.emit("resume"),flow(stream2),state2.flowing&&!state2.reading&&stream2.read(0)}function flow(stream2){const state2=stream2._readableState;for(debug2("flow",state2.flowing);state2.flowing&&null!==stream2.read(););}function streamToAsyncIterator(stream2,options){"function"!=typeof stream2.read&&(stream2=Readable2.wrap(stream2,{objectMode:!0}));const iter=async function*(stream2,options){let error,callback=nop2;function next(resolve){this===stream2?(callback(),callback=nop2):callback=resolve}stream2.on("readable",next);const cleanup=eos2(stream2,{writable:!1},(err=>{error=err?aggregateTwoErrors2(error,err):null,callback(),callback=nop2}));try{for(;;){const chunk=stream2.destroyed?null:stream2.read();if(null!==chunk)yield chunk;else{if(error)throw error;if(null===error)return;await new Promise2(next)}}}catch(err){throw error=aggregateTwoErrors2(error,err),error}finally{!error&&!1===(null==options?void 0:options.destroyOnReturn)||void 0!==error&&!stream2._readableState.autoDestroy?(stream2.off("readable",next),cleanup()):destroyImpl2.destroyer(stream2,null)}}(stream2,options);return iter.stream=stream2,iter}function fromList(n,state2){if(0===state2.length)return null;let ret;return state2.objectMode?ret=state2.buffer.shift():!n||n>=state2.length?(ret=state2.decoder?state2.buffer.join(""):1===state2.buffer.length?state2.buffer.first():state2.buffer.concat(state2.length),state2.buffer.clear()):ret=state2.buffer.consume(n,state2.decoder),ret}function endReadable(stream2){const state2=stream2._readableState;debug2("endReadable",state2.endEmitted),state2.endEmitted||(state2.ended=!0,process2.nextTick(endReadableNT,state2,stream2))}function endReadableNT(state2,stream2){if(debug2("endReadableNT",state2.endEmitted,state2.length),!state2.errored&&!state2.closeEmitted&&!state2.endEmitted&&0===state2.length)if(state2.endEmitted=!0,stream2.emit("end"),stream2.writable&&!1===stream2.allowHalfOpen)process2.nextTick(endWritableNT,stream2);else if(state2.autoDestroy){const wState=stream2._writableState;(!wState||wState.autoDestroy&&(wState.finished||!1===wState.writable))&&stream2.destroy()}}function endWritableNT(stream2){stream2.writable&&!stream2.writableEnded&&!stream2.destroyed&&stream2.end()}let webStreamsAdapters;function lazyWebStreams(){return void 0===webStreamsAdapters&&(webStreamsAdapters={}),webStreamsAdapters}return Readable2.prototype.read=function(n){debug2("read",n),void 0===n?n=NaN:NumberIsInteger2(n)||(n=NumberParseInt2(n,10));const state2=this._readableState,nOrig=n;if(n>state2.highWaterMark&&(state2.highWaterMark=function(n){if(n>MAX_HWM)throw new ERR_OUT_OF_RANGE2("size","<= 1GiB",n);return n--,n|=n>>>1,n|=n>>>2,n|=n>>>4,n|=n>>>8,n|=n>>>16,++n}(n)),0!==n&&(state2.emittedReadable=!1),0===n&&state2.needReadable&&((0!==state2.highWaterMark?state2.length>=state2.highWaterMark:state2.length>0)||state2.ended))return debug2("read: emitReadable",state2.length,state2.ended),0===state2.length&&state2.ended?endReadable(this):emitReadable(this),null;if(0===(n=howMuchToRead(n,state2))&&state2.ended)return 0===state2.length&&endReadable(this),null;let ret,doRead=state2.needReadable;if(debug2("need readable",doRead),(0===state2.length||state2.length-n<state2.highWaterMark)&&(doRead=!0,debug2("length less than watermark",doRead)),state2.ended||state2.reading||state2.destroyed||state2.errored||!state2.constructed)doRead=!1,debug2("reading, ended or constructing",doRead);else if(doRead){debug2("do read"),state2.reading=!0,state2.sync=!0,0===state2.length&&(state2.needReadable=!0);try{this._read(state2.highWaterMark)}catch(err){errorOrDestroy2(this,err)}state2.sync=!1,state2.reading||(n=howMuchToRead(nOrig,state2))}return ret=n>0?fromList(n,state2):null,null===ret?(state2.needReadable=state2.length<=state2.highWaterMark,n=0):(state2.length-=n,state2.multiAwaitDrain?state2.awaitDrainWriters.clear():state2.awaitDrainWriters=null),0===state2.length&&(state2.ended||(state2.needReadable=!0),nOrig!==n&&state2.ended&&endReadable(this)),null===ret||state2.errorEmitted||state2.closeEmitted||(state2.dataEmitted=!0,this.emit("data",ret)),ret},Readable2.prototype._read=function(n){throw new ERR_METHOD_NOT_IMPLEMENTED2("_read()")},Readable2.prototype.pipe=function(dest,pipeOpts){const src=this,state2=this._readableState;1===state2.pipes.length&&(state2.multiAwaitDrain||(state2.multiAwaitDrain=!0,state2.awaitDrainWriters=new SafeSet(state2.awaitDrainWriters?[state2.awaitDrainWriters]:[]))),state2.pipes.push(dest),debug2("pipe count=%d opts=%j",state2.pipes.length,pipeOpts);const endFn=(!pipeOpts||!1!==pipeOpts.end)&&dest!==process2.stdout&&dest!==process2.stderr?onend:unpipe;function onunpipe(readable2,unpipeInfo){debug2("onunpipe"),readable2===src&&unpipeInfo&&!1===unpipeInfo.hasUnpiped&&(unpipeInfo.hasUnpiped=!0,function(){debug2("cleanup"),dest.removeListener("close",onclose),dest.removeListener("finish",onfinish),ondrain&&dest.removeListener("drain",ondrain);dest.removeListener("error",onerror),dest.removeListener("unpipe",onunpipe),src.removeListener("end",onend),src.removeListener("end",unpipe),src.removeListener("data",ondata),cleanedUp=!0,ondrain&&state2.awaitDrainWriters&&(!dest._writableState||dest._writableState.needDrain)&&ondrain()}())}function onend(){debug2("onend"),dest.end()}let ondrain;state2.endEmitted?process2.nextTick(endFn):src.once("end",endFn),dest.on("unpipe",onunpipe);let cleanedUp=!1;function pause(){cleanedUp||(1===state2.pipes.length&&state2.pipes[0]===dest?(debug2("false write response, pause",0),state2.awaitDrainWriters=dest,state2.multiAwaitDrain=!1):state2.pipes.length>1&&state2.pipes.includes(dest)&&(debug2("false write response, pause",state2.awaitDrainWriters.size),state2.awaitDrainWriters.add(dest)),src.pause()),ondrain||(ondrain=function(src,dest){return function(){const state2=src._readableState;state2.awaitDrainWriters===dest?(debug2("pipeOnDrain",1),state2.awaitDrainWriters=null):state2.multiAwaitDrain&&(debug2("pipeOnDrain",state2.awaitDrainWriters.size),state2.awaitDrainWriters.delete(dest)),state2.awaitDrainWriters&&0!==state2.awaitDrainWriters.size||!src.listenerCount("data")||src.resume()}}(src,dest),dest.on("drain",ondrain))}function ondata(chunk){debug2("ondata");const ret=dest.write(chunk);debug2("dest.write",ret),!1===ret&&pause()}function onerror(er){if(debug2("onerror",er),unpipe(),dest.removeListener("error",onerror),0===dest.listenerCount("error")){const s=dest._writableState||dest._readableState;s&&!s.errorEmitted?errorOrDestroy2(dest,er):dest.emit("error",er)}}function onclose(){dest.removeListener("finish",onfinish),unpipe()}function onfinish(){debug2("onfinish"),dest.removeListener("close",onclose),unpipe()}function unpipe(){debug2("unpipe"),src.unpipe(dest)}return src.on("data",ondata),prependListener2(dest,"error",onerror),dest.once("close",onclose),dest.once("finish",onfinish),dest.emit("pipe",src),!0===dest.writableNeedDrain?state2.flowing&&pause():state2.flowing||(debug2("pipe resume"),src.resume()),dest},Readable2.prototype.unpipe=function(dest){const state2=this._readableState;if(0===state2.pipes.length)return this;if(!dest){const dests=state2.pipes;state2.pipes=[],this.pause();for(let i2=0;i2<dests.length;i2++)dests[i2].emit("unpipe",this,{hasUnpiped:!1});return this}const index2=ArrayPrototypeIndexOf(state2.pipes,dest);return-1===index2||(state2.pipes.splice(index2,1),0===state2.pipes.length&&this.pause(),dest.emit("unpipe",this,{hasUnpiped:!1})),this},Readable2.prototype.on=function(ev,fn){const res=Stream2.prototype.on.call(this,ev,fn),state2=this._readableState;return"data"===ev?(state2.readableListening=this.listenerCount("readable")>0,!1!==state2.flowing&&this.resume()):"readable"===ev&&(state2.endEmitted||state2.readableListening||(state2.readableListening=state2.needReadable=!0,state2.flowing=!1,state2.emittedReadable=!1,debug2("on readable",state2.length,state2.reading),state2.length?emitReadable(this):state2.reading||process2.nextTick(nReadingNextTick,this))),res},Readable2.prototype.addListener=Readable2.prototype.on,Readable2.prototype.removeListener=function(ev,fn){const res=Stream2.prototype.removeListener.call(this,ev,fn);return"readable"===ev&&process2.nextTick(updateReadableListening,this),res},Readable2.prototype.off=Readable2.prototype.removeListener,Readable2.prototype.removeAllListeners=function(ev){const res=Stream2.prototype.removeAllListeners.apply(this,arguments);return"readable"!==ev&&void 0!==ev||process2.nextTick(updateReadableListening,this),res},Readable2.prototype.resume=function(){const state2=this._readableState;return state2.flowing||(debug2("resume"),state2.flowing=!state2.readableListening,function(stream2,state2){state2.resumeScheduled||(state2.resumeScheduled=!0,process2.nextTick(resume_,stream2,state2))}(this,state2)),state2[kPaused]=!1,this},Readable2.prototype.pause=function(){return debug2("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug2("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState[kPaused]=!0,this},Readable2.prototype.wrap=function(stream2){let paused=!1;stream2.on("data",(chunk=>{!this.push(chunk)&&stream2.pause&&(paused=!0,stream2.pause())})),stream2.on("end",(()=>{this.push(null)})),stream2.on("error",(err=>{errorOrDestroy2(this,err)})),stream2.on("close",(()=>{this.destroy()})),stream2.on("destroy",(()=>{this.destroy()})),this._read=()=>{paused&&stream2.resume&&(paused=!1,stream2.resume())};const streamKeys=ObjectKeys2(stream2);for(let j=1;j<streamKeys.length;j++){const i2=streamKeys[j];void 0===this[i2]&&"function"==typeof stream2[i2]&&(this[i2]=stream2[i2].bind(stream2))}return this},Readable2.prototype[SymbolAsyncIterator2]=function(){return streamToAsyncIterator(this)},Readable2.prototype.iterator=function(options){return void 0!==options&&validateObject2(options,"options"),streamToAsyncIterator(this,options)},ObjectDefineProperties(Readable2.prototype,{readable:{__proto__:null,get(){const r=this._readableState;return!(!r||!1===r.readable||r.destroyed||r.errorEmitted||r.endEmitted)},set(val){this._readableState&&(this._readableState.readable=!!val)}},readableDidRead:{__proto__:null,enumerable:!1,get:function(){return this._readableState.dataEmitted}},readableAborted:{__proto__:null,enumerable:!1,get:function(){return!(!1===this._readableState.readable||!this._readableState.destroyed&&!this._readableState.errored||this._readableState.endEmitted)}},readableHighWaterMark:{__proto__:null,enumerable:!1,get:function(){return this._readableState.highWaterMark}},readableBuffer:{__proto__:null,enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}},readableFlowing:{__proto__:null,enumerable:!1,get:function(){return this._readableState.flowing},set:function(state2){this._readableState&&(this._readableState.flowing=state2)}},readableLength:{__proto__:null,enumerable:!1,get(){return this._readableState.length}},readableObjectMode:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.objectMode}},readableEncoding:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.encoding:null}},errored:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.errored:null}},closed:{__proto__:null,get(){return!!this._readableState&&this._readableState.closed}},destroyed:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.destroyed},set(value){this._readableState&&(this._readableState.destroyed=value)}},readableEnded:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.endEmitted}}}),ObjectDefineProperties(ReadableState.prototype,{pipesCount:{__proto__:null,get(){return this.pipes.length}},paused:{__proto__:null,get(){return!1!==this[kPaused]},set(value){this[kPaused]=!!value}}}),Readable2._fromList=fromList,Readable2.from=function(iterable,opts2){return from2(Readable2,iterable,opts2)},Readable2.fromWeb=function(readableStream,options){return lazyWebStreams().newStreamReadableFromReadableStream(readableStream,options)},Readable2.toWeb=function(streamReadable,options){return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable,options)},Readable2.wrap=function(src,options){var _ref,_src$readableObjectMo;return new Readable2({objectMode:null===(_ref=null!==(_src$readableObjectMo=src.readableObjectMode)&&void 0!==_src$readableObjectMo?_src$readableObjectMo:src.objectMode)||void 0===_ref||_ref,...options,destroy(err,callback){destroyImpl2.destroyer(src,err),callback(err)}}).wrap(src)},readable}function requireWritable(){if(hasRequiredWritable)return writable;hasRequiredWritable=1;const process2=browserExports$1,{ArrayPrototypeSlice:ArrayPrototypeSlice,Error:Error2,FunctionPrototypeSymbolHasInstance:FunctionPrototypeSymbolHasInstance,ObjectDefineProperty:ObjectDefineProperty2,ObjectDefineProperties:ObjectDefineProperties,ObjectSetPrototypeOf:ObjectSetPrototypeOf2,StringPrototypeToLowerCase:StringPrototypeToLowerCase,Symbol:Symbol2,SymbolHasInstance:SymbolHasInstance}=primordials;writable=Writable,Writable.WritableState=WritableState;const{EventEmitter:EE2}=eventsExports,Stream2=legacy.Stream,{Buffer:Buffer2}=buffer,destroyImpl2=destroy_1$2,{addAbortSignal:addAbortSignal2}=addAbortSignalExports,{getHighWaterMark:getHighWaterMark2,getDefaultHighWaterMark:getDefaultHighWaterMark2}=state,{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE2,ERR_METHOD_NOT_IMPLEMENTED:ERR_METHOD_NOT_IMPLEMENTED2,ERR_MULTIPLE_CALLBACK:ERR_MULTIPLE_CALLBACK2,ERR_STREAM_CANNOT_PIPE:ERR_STREAM_CANNOT_PIPE,ERR_STREAM_DESTROYED:ERR_STREAM_DESTROYED2,ERR_STREAM_ALREADY_FINISHED:ERR_STREAM_ALREADY_FINISHED,ERR_STREAM_NULL_VALUES:ERR_STREAM_NULL_VALUES2,ERR_STREAM_WRITE_AFTER_END:ERR_STREAM_WRITE_AFTER_END,ERR_UNKNOWN_ENCODING:ERR_UNKNOWN_ENCODING}=errors$1.codes,{errorOrDestroy:errorOrDestroy2}=destroyImpl2;function nop2(){}ObjectSetPrototypeOf2(Writable.prototype,Stream2.prototype),ObjectSetPrototypeOf2(Writable,Stream2);const kOnFinished=Symbol2("kOnFinished");function WritableState(options,stream2,isDuplex){"boolean"!=typeof isDuplex&&(isDuplex=stream2 instanceof requireDuplex()),this.objectMode=!(!options||!options.objectMode),isDuplex&&(this.objectMode=this.objectMode||!(!options||!options.writableObjectMode)),this.highWaterMark=options?getHighWaterMark2(this,options,"writableHighWaterMark",isDuplex):getDefaultHighWaterMark2(!1),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;const noDecode=!(!options||!1!==options.decodeStrings);this.decodeStrings=!noDecode,this.defaultEncoding=options&&options.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=onwrite.bind(void 0,stream2),this.writecb=null,this.writelen=0,this.afterWriteTickInfo=null,resetBuffer(this),this.pendingcb=0,this.constructed=!0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!options||!1!==options.emitClose,this.autoDestroy=!options||!1!==options.autoDestroy,this.errored=null,this.closed=!1,this.closeEmitted=!1,this[kOnFinished]=[]}function resetBuffer(state2){state2.buffered=[],state2.bufferedIndex=0,state2.allBuffers=!0,state2.allNoop=!0}function Writable(options){const isDuplex=this instanceof requireDuplex();if(!isDuplex&&!FunctionPrototypeSymbolHasInstance(Writable,this))return new Writable(options);this._writableState=new WritableState(options,this,isDuplex),options&&("function"==typeof options.write&&(this._write=options.write),"function"==typeof options.writev&&(this._writev=options.writev),"function"==typeof options.destroy&&(this._destroy=options.destroy),"function"==typeof options.final&&(this._final=options.final),"function"==typeof options.construct&&(this._construct=options.construct),options.signal&&addAbortSignal2(options.signal,this)),Stream2.call(this,options),destroyImpl2.construct(this,(()=>{const state2=this._writableState;state2.writing||clearBuffer(this,state2),finishMaybe(this,state2)}))}function _write(stream2,chunk,encoding,cb){const state2=stream2._writableState;if("function"==typeof encoding)cb=encoding,encoding=state2.defaultEncoding;else{if(encoding){if("buffer"!==encoding&&!Buffer2.isEncoding(encoding))throw new ERR_UNKNOWN_ENCODING(encoding)}else encoding=state2.defaultEncoding;"function"!=typeof cb&&(cb=nop2)}if(null===chunk)throw new ERR_STREAM_NULL_VALUES2;if(!state2.objectMode)if("string"==typeof chunk)!1!==state2.decodeStrings&&(chunk=Buffer2.from(chunk,encoding),encoding="buffer");else if(chunk instanceof Buffer2)encoding="buffer";else{if(!Stream2._isUint8Array(chunk))throw new ERR_INVALID_ARG_TYPE2("chunk",["string","Buffer","Uint8Array"],chunk);chunk=Stream2._uint8ArrayToBuffer(chunk),encoding="buffer"}let err;return state2.ending?err=new ERR_STREAM_WRITE_AFTER_END:state2.destroyed&&(err=new ERR_STREAM_DESTROYED2("write")),err?(process2.nextTick(cb,err),errorOrDestroy2(stream2,err,!0),err):(state2.pendingcb++,function(stream2,state2,chunk,encoding,callback){const len2=state2.objectMode?1:chunk.length;state2.length+=len2;const ret=state2.length<state2.highWaterMark;ret||(state2.needDrain=!0);state2.writing||state2.corked||state2.errored||!state2.constructed?(state2.buffered.push({chunk:chunk,encoding:encoding,callback:callback}),state2.allBuffers&&"buffer"!==encoding&&(state2.allBuffers=!1),state2.allNoop&&callback!==nop2&&(state2.allNoop=!1)):(state2.writelen=len2,state2.writecb=callback,state2.writing=!0,state2.sync=!0,stream2._write(chunk,encoding,state2.onwrite),state2.sync=!1);return ret&&!state2.errored&&!state2.destroyed}(stream2,state2,chunk,encoding,cb))}function doWrite(stream2,state2,writev,len2,chunk,encoding,cb){state2.writelen=len2,state2.writecb=cb,state2.writing=!0,state2.sync=!0,state2.destroyed?state2.onwrite(new ERR_STREAM_DESTROYED2("write")):writev?stream2._writev(chunk,state2.onwrite):stream2._write(chunk,encoding,state2.onwrite),state2.sync=!1}function onwriteError(stream2,state2,er,cb){--state2.pendingcb,cb(er),errorBuffer(state2),errorOrDestroy2(stream2,er)}function onwrite(stream2,er){const state2=stream2._writableState,sync=state2.sync,cb=state2.writecb;"function"==typeof cb?(state2.writing=!1,state2.writecb=null,state2.length-=state2.writelen,state2.writelen=0,er?(er.stack,state2.errored||(state2.errored=er),stream2._readableState&&!stream2._readableState.errored&&(stream2._readableState.errored=er),sync?process2.nextTick(onwriteError,stream2,state2,er,cb):onwriteError(stream2,state2,er,cb)):(state2.buffered.length>state2.bufferedIndex&&clearBuffer(stream2,state2),sync?null!==state2.afterWriteTickInfo&&state2.afterWriteTickInfo.cb===cb?state2.afterWriteTickInfo.count++:(state2.afterWriteTickInfo={count:1,cb:cb,stream:stream2,state:state2},process2.nextTick(afterWriteTick,state2.afterWriteTickInfo)):afterWrite(stream2,state2,1,cb))):errorOrDestroy2(stream2,new ERR_MULTIPLE_CALLBACK2)}function afterWriteTick({stream:stream2,state:state2,count:count,cb:cb}){return state2.afterWriteTickInfo=null,afterWrite(stream2,state2,count,cb)}function afterWrite(stream2,state2,count,cb){for(!state2.ending&&!stream2.destroyed&&0===state2.length&&state2.needDrain&&(state2.needDrain=!1,stream2.emit("drain"));count-- >0;)state2.pendingcb--,cb();state2.destroyed&&errorBuffer(state2),finishMaybe(stream2,state2)}function errorBuffer(state2){if(state2.writing)return;for(let n=state2.bufferedIndex;n<state2.buffered.length;++n){var _state$errored;const{chunk:chunk,callback:callback}=state2.buffered[n],len2=state2.objectMode?1:chunk.length;state2.length-=len2,callback(null!==(_state$errored=state2.errored)&&void 0!==_state$errored?_state$errored:new ERR_STREAM_DESTROYED2("write"))}const onfinishCallbacks=state2[kOnFinished].splice(0);for(let i2=0;i2<onfinishCallbacks.length;i2++){var _state$errored2;onfinishCallbacks[i2](null!==(_state$errored2=state2.errored)&&void 0!==_state$errored2?_state$errored2:new ERR_STREAM_DESTROYED2("end"))}resetBuffer(state2)}function clearBuffer(stream2,state2){if(state2.corked||state2.bufferProcessing||state2.destroyed||!state2.constructed)return;const{buffered:buffered,bufferedIndex:bufferedIndex,objectMode:objectMode}=state2,bufferedLength=buffered.length-bufferedIndex;if(!bufferedLength)return;let i2=bufferedIndex;if(state2.bufferProcessing=!0,bufferedLength>1&&stream2._writev){state2.pendingcb-=bufferedLength-1;const callback=state2.allNoop?nop2:err=>{for(let n=i2;n<buffered.length;++n)buffered[n].callback(err)},chunks=state2.allNoop&&0===i2?buffered:ArrayPrototypeSlice(buffered,i2);chunks.allBuffers=state2.allBuffers,doWrite(stream2,state2,!0,state2.length,chunks,"",callback),resetBuffer(state2)}else{do{const{chunk:chunk,encoding:encoding,callback:callback}=buffered[i2];buffered[i2++]=null;doWrite(stream2,state2,!1,objectMode?1:chunk.length,chunk,encoding,callback)}while(i2<buffered.length&&!state2.writing);i2===buffered.length?resetBuffer(state2):i2>256?(buffered.splice(0,i2),state2.bufferedIndex=0):state2.bufferedIndex=i2}state2.bufferProcessing=!1}function needFinish(state2){return state2.ending&&!state2.destroyed&&state2.constructed&&0===state2.length&&!state2.errored&&0===state2.buffered.length&&!state2.finished&&!state2.writing&&!state2.errorEmitted&&!state2.closeEmitted}function prefinish2(stream2,state2){state2.prefinished||state2.finalCalled||("function"!=typeof stream2._final||state2.destroyed?(state2.prefinished=!0,stream2.emit("prefinish")):(state2.finalCalled=!0,function(stream2,state2){let called=!1;function onFinish(err){if(called)errorOrDestroy2(stream2,null!=err?err:ERR_MULTIPLE_CALLBACK2());else if(called=!0,state2.pendingcb--,err){const onfinishCallbacks=state2[kOnFinished].splice(0);for(let i2=0;i2<onfinishCallbacks.length;i2++)onfinishCallbacks[i2](err);errorOrDestroy2(stream2,err,state2.sync)}else needFinish(state2)&&(state2.prefinished=!0,stream2.emit("prefinish"),state2.pendingcb++,process2.nextTick(finish,stream2,state2))}state2.sync=!0,state2.pendingcb++;try{stream2._final(onFinish)}catch(err){onFinish(err)}state2.sync=!1}(stream2,state2)))}function finishMaybe(stream2,state2,sync){needFinish(state2)&&(prefinish2(stream2,state2),0===state2.pendingcb&&(sync?(state2.pendingcb++,process2.nextTick(((stream3,state3)=>{needFinish(state3)?finish(stream3,state3):state3.pendingcb--}),stream2,state2)):needFinish(state2)&&(state2.pendingcb++,finish(stream2,state2))))}function finish(stream2,state2){state2.pendingcb--,state2.finished=!0;const onfinishCallbacks=state2[kOnFinished].splice(0);for(let i2=0;i2<onfinishCallbacks.length;i2++)onfinishCallbacks[i2]();if(stream2.emit("finish"),state2.autoDestroy){const rState=stream2._readableState;(!rState||rState.autoDestroy&&(rState.endEmitted||!1===rState.readable))&&stream2.destroy()}}WritableState.prototype.getBuffer=function(){return ArrayPrototypeSlice(this.buffered,this.bufferedIndex)},ObjectDefineProperty2(WritableState.prototype,"bufferedRequestCount",{__proto__:null,get(){return this.buffered.length-this.bufferedIndex}}),ObjectDefineProperty2(Writable,SymbolHasInstance,{__proto__:null,value:function(object2){return!!FunctionPrototypeSymbolHasInstance(this,object2)||this===Writable&&(object2&&object2._writableState instanceof WritableState)}}),Writable.prototype.pipe=function(){errorOrDestroy2(this,new ERR_STREAM_CANNOT_PIPE)},Writable.prototype.write=function(chunk,encoding,cb){return!0===_write(this,chunk,encoding,cb)},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){const state2=this._writableState;state2.corked&&(state2.corked--,state2.writing||clearBuffer(this,state2))},Writable.prototype.setDefaultEncoding=function(encoding){if("string"==typeof encoding&&(encoding=StringPrototypeToLowerCase(encoding)),!Buffer2.isEncoding(encoding))throw new ERR_UNKNOWN_ENCODING(encoding);return this._writableState.defaultEncoding=encoding,this},Writable.prototype._write=function(chunk,encoding,cb){if(!this._writev)throw new ERR_METHOD_NOT_IMPLEMENTED2("_write()");this._writev([{chunk:chunk,encoding:encoding}],cb)},Writable.prototype._writev=null,Writable.prototype.end=function(chunk,encoding,cb){const state2=this._writableState;let err;if("function"==typeof chunk?(cb=chunk,chunk=null,encoding=null):"function"==typeof encoding&&(cb=encoding,encoding=null),null!=chunk){const ret=_write(this,chunk,encoding);ret instanceof Error2&&(err=ret)}return state2.corked&&(state2.corked=1,this.uncork()),err||(state2.errored||state2.ending?state2.finished?err=new ERR_STREAM_ALREADY_FINISHED("end"):state2.destroyed&&(err=new ERR_STREAM_DESTROYED2("end")):(state2.ending=!0,finishMaybe(this,state2,!0),state2.ended=!0)),"function"==typeof cb&&(err||state2.finished?process2.nextTick(cb,err):state2[kOnFinished].push(cb)),this},ObjectDefineProperties(Writable.prototype,{closed:{__proto__:null,get(){return!!this._writableState&&this._writableState.closed}},destroyed:{__proto__:null,get(){return!!this._writableState&&this._writableState.destroyed},set(value){this._writableState&&(this._writableState.destroyed=value)}},writable:{__proto__:null,get(){const w=this._writableState;return!(!w||!1===w.writable||w.destroyed||w.errored||w.ending||w.ended)},set(val){this._writableState&&(this._writableState.writable=!!val)}},writableFinished:{__proto__:null,get(){return!!this._writableState&&this._writableState.finished}},writableObjectMode:{__proto__:null,get(){return!!this._writableState&&this._writableState.objectMode}},writableBuffer:{__proto__:null,get(){return this._writableState&&this._writableState.getBuffer()}},writableEnded:{__proto__:null,get(){return!!this._writableState&&this._writableState.ending}},writableNeedDrain:{__proto__:null,get(){const wState=this._writableState;return!!wState&&(!wState.destroyed&&!wState.ending&&wState.needDrain)}},writableHighWaterMark:{__proto__:null,get(){return this._writableState&&this._writableState.highWaterMark}},writableCorked:{__proto__:null,get(){return this._writableState?this._writableState.corked:0}},writableLength:{__proto__:null,get(){return this._writableState&&this._writableState.length}},errored:{__proto__:null,enumerable:!1,get(){return this._writableState?this._writableState.errored:null}},writableAborted:{__proto__:null,enumerable:!1,get:function(){return!(!1===this._writableState.writable||!this._writableState.destroyed&&!this._writableState.errored||this._writableState.finished)}}});const destroy2=destroyImpl2.destroy;let webStreamsAdapters;function lazyWebStreams(){return void 0===webStreamsAdapters&&(webStreamsAdapters={}),webStreamsAdapters}return Writable.prototype.destroy=function(err,cb){const state2=this._writableState;return!state2.destroyed&&(state2.bufferedIndex<state2.buffered.length||state2[kOnFinished].length)&&process2.nextTick(errorBuffer,state2),destroy2.call(this,err,cb),this},Writable.prototype._undestroy=destroyImpl2.undestroy,Writable.prototype._destroy=function(err,cb){cb(err)},Writable.prototype[EE2.captureRejectionSymbol]=function(err){this.destroy(err)},Writable.fromWeb=function(writableStream,options){return lazyWebStreams().newStreamWritableFromWritableStream(writableStream,options)},Writable.toWeb=function(streamWritable){return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable)},writable}function requireDuplexify(){if(hasRequiredDuplexify)return duplexify;hasRequiredDuplexify=1;const process2=browserExports$1,bufferModule=buffer,{isReadable:isReadable2,isWritable:isWritable2,isIterable:isIterable2,isNodeStream:isNodeStream2,isReadableNodeStream:isReadableNodeStream2,isWritableNodeStream:isWritableNodeStream2,isDuplexNodeStream:isDuplexNodeStream2}=utils$4,eos2=endOfStreamExports,{AbortError:AbortError2,codes:{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE2,ERR_INVALID_RETURN_VALUE:ERR_INVALID_RETURN_VALUE2}}=errors$1,{destroyer:destroyer2}=destroy_1$2,Duplex2=requireDuplex(),Readable2=requireReadable(),{createDeferredPromise:createDeferredPromise}=utilExports,from2=from_1,Blob=globalThis.Blob||bufferModule.Blob,isBlob=void 0!==Blob?function(b){return b instanceof Blob}:function(b){return!1},AbortController2=globalThis.AbortController||requireBrowser().AbortController,{FunctionPrototypeCall:FunctionPrototypeCall}=primordials;class Duplexify extends Duplex2{constructor(options){super(options),!1===(null==options?void 0:options.readable)&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===(null==options?void 0:options.writable)&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)}}function _duplexify(pair){const r=pair.readable&&"function"!=typeof pair.readable.read?Readable2.wrap(pair.readable):pair.readable,w=pair.writable;let ondrain,onfinish,onreadable,onclose,d,readable2=!!isReadable2(r),writable2=!!isWritable2(w);function onfinished(err){const cb=onclose;onclose=null,cb?cb(err):err?d.destroy(err):readable2||writable2||d.destroy()}return d=new Duplexify({readableObjectMode:!(null==r||!r.readableObjectMode),writableObjectMode:!(null==w||!w.writableObjectMode),readable:readable2,writable:writable2}),writable2&&(eos2(w,(err=>{writable2=!1,err&&destroyer2(r,err),onfinished(err)})),d._write=function(chunk,encoding,callback){w.write(chunk,encoding)?callback():ondrain=callback},d._final=function(callback){w.end(),onfinish=callback},w.on("drain",(function(){if(ondrain){const cb=ondrain;ondrain=null,cb()}})),w.on("finish",(function(){if(onfinish){const cb=onfinish;onfinish=null,cb()}}))),readable2&&(eos2(r,(err=>{readable2=!1,err&&destroyer2(r,err),onfinished(err)})),r.on("readable",(function(){if(onreadable){const cb=onreadable;onreadable=null,cb()}})),r.on("end",(function(){d.push(null)})),d._read=function(){for(;;){const buf=r.read();if(null===buf)return void(onreadable=d._read);if(!d.push(buf))return}}),d._destroy=function(err,callback){err||null===onclose||(err=new AbortError2),onreadable=null,ondrain=null,onfinish=null,null===onclose?callback(err):(onclose=callback,destroyer2(w,err),destroyer2(r,err))},d}return duplexify=function duplexify2(body,name){if(isDuplexNodeStream2(body))return body;if(isReadableNodeStream2(body))return _duplexify({readable:body});if(isWritableNodeStream2(body))return _duplexify({writable:body});if(isNodeStream2(body))return _duplexify({writable:!1,readable:!1});if("function"==typeof body){const{value:value,write:write,final:final2,destroy:destroy2}=function(fn){let{promise:promise2,resolve:resolve}=createDeferredPromise();const ac=new AbortController2,signal=ac.signal,value=fn(async function*(){for(;;){const _promise=promise2;promise2=null;const{chunk:chunk,done:done2,cb:cb}=await _promise;if(process2.nextTick(cb),done2)return;if(signal.aborted)throw new AbortError2(void 0,{cause:signal.reason});({promise:promise2,resolve:resolve}=createDeferredPromise()),yield chunk}}(),{signal:signal});return{value:value,write(chunk,encoding,cb){const _resolve=resolve;resolve=null,_resolve({chunk:chunk,done:!1,cb:cb})},final(cb){const _resolve=resolve;resolve=null,_resolve({done:!0,cb:cb})},destroy(err,cb){ac.abort(),cb(err)}}}(body);if(isIterable2(value))return from2(Duplexify,value,{objectMode:!0,write:write,final:final2,destroy:destroy2});const then2=null==value?void 0:value.then;if("function"==typeof then2){let d;const promise2=FunctionPrototypeCall(then2,value,(val=>{if(null!=val)throw new ERR_INVALID_RETURN_VALUE2("nully","body",val)}),(err=>{destroyer2(d,err)}));return d=new Duplexify({objectMode:!0,readable:!1,write:write,final(cb){final2((async()=>{try{await promise2,process2.nextTick(cb,null)}catch(err){process2.nextTick(cb,err)}}))},destroy:destroy2})}throw new ERR_INVALID_RETURN_VALUE2("Iterable, AsyncIterable or AsyncFunction",name,value)}if(isBlob(body))return duplexify2(body.arrayBuffer());if(isIterable2(body))return from2(Duplexify,body,{objectMode:!0,writable:!1});if("object"==typeof(null==body?void 0:body.writable)||"object"==typeof(null==body?void 0:body.readable)){return _duplexify({readable:null!=body&&body.readable?isReadableNodeStream2(null==body?void 0:body.readable)?null==body?void 0:body.readable:duplexify2(body.readable):void 0,writable:null!=body&&body.writable?isWritableNodeStream2(null==body?void 0:body.writable)?null==body?void 0:body.writable:duplexify2(body.writable):void 0})}const then=null==body?void 0:body.then;if("function"==typeof then){let d;return FunctionPrototypeCall(then,body,(val=>{null!=val&&d.push(val),d.push(null)}),(err=>{destroyer2(d,err)})),d=new Duplexify({objectMode:!0,writable:!1,read(){}})}throw new ERR_INVALID_ARG_TYPE2(name,["Blob","ReadableStream","WritableStream","Stream","Iterable","AsyncIterable","Function","{ readable, writable } pair","Promise"],body)}}function requireDuplex(){if(hasRequiredDuplex)return duplex;hasRequiredDuplex=1;const{ObjectDefineProperties:ObjectDefineProperties,ObjectGetOwnPropertyDescriptor:ObjectGetOwnPropertyDescriptor,ObjectKeys:ObjectKeys2,ObjectSetPrototypeOf:ObjectSetPrototypeOf2}=primordials;duplex=Duplex2;const Readable2=requireReadable(),Writable=requireWritable();ObjectSetPrototypeOf2(Duplex2.prototype,Readable2.prototype),ObjectSetPrototypeOf2(Duplex2,Readable2);{const keys=ObjectKeys2(Writable.prototype);for(let i2=0;i2<keys.length;i2++){const method=keys[i2];Duplex2.prototype[method]||(Duplex2.prototype[method]=Writable.prototype[method])}}function Duplex2(options){if(!(this instanceof Duplex2))return new Duplex2(options);Readable2.call(this,options),Writable.call(this,options),options?(this.allowHalfOpen=!1!==options.allowHalfOpen,!1===options.readable&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===options.writable&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)):this.allowHalfOpen=!0}let webStreamsAdapters,duplexify2;function lazyWebStreams(){return void 0===webStreamsAdapters&&(webStreamsAdapters={}),webStreamsAdapters}return ObjectDefineProperties(Duplex2.prototype,{writable:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writable")},writableHighWaterMark:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableHighWaterMark")},writableObjectMode:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableObjectMode")},writableBuffer:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableBuffer")},writableLength:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableLength")},writableFinished:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableFinished")},writableCorked:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableCorked")},writableEnded:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableEnded")},writableNeedDrain:{__proto__:null,...ObjectGetOwnPropertyDescriptor(Writable.prototype,"writableNeedDrain")},destroyed:{__proto__:null,get(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set(value){this._readableState&&this._writableState&&(this._readableState.destroyed=value,this._writableState.destroyed=value)}}}),Duplex2.fromWeb=function(pair,options){return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair,options)},Duplex2.toWeb=function(duplex2){return lazyWebStreams().newReadableWritablePairFromDuplex(duplex2)},Duplex2.from=function(body){return duplexify2||(duplexify2=requireDuplexify()),duplexify2(body,"body")},duplex}const{ObjectSetPrototypeOf:ObjectSetPrototypeOf$1,Symbol:Symbol$1}=primordials;var transform=Transform$5;const{ERR_METHOD_NOT_IMPLEMENTED:ERR_METHOD_NOT_IMPLEMENTED}=errors$1.codes,Duplex$4=requireDuplex(),{getHighWaterMark:getHighWaterMark}=state;ObjectSetPrototypeOf$1(Transform$5.prototype,Duplex$4.prototype),ObjectSetPrototypeOf$1(Transform$5,Duplex$4);const kCallback=Symbol$1("kCallback");function Transform$5(options){if(!(this instanceof Transform$5))return new Transform$5(options);const readableHighWaterMark=options?getHighWaterMark(this,options,"readableHighWaterMark",!0):null;0===readableHighWaterMark&&(options={...options,highWaterMark:null,readableHighWaterMark:readableHighWaterMark,writableHighWaterMark:options.writableHighWaterMark||0}),Duplex$4.call(this,options),this._readableState.sync=!1,this[kCallback]=null,options&&("function"==typeof options.transform&&(this._transform=options.transform),"function"==typeof options.flush&&(this._flush=options.flush)),this.on("prefinish",prefinish$1)}function final(cb){"function"!=typeof this._flush||this.destroyed?(this.push(null),cb&&cb()):this._flush(((er,data)=>{er?cb?cb(er):this.destroy(er):(null!=data&&this.push(data),this.push(null),cb&&cb())}))}function prefinish$1(){this._final!==final&&final.call(this)}Transform$5.prototype._final=final,Transform$5.prototype._transform=function(chunk,encoding,callback){throw new ERR_METHOD_NOT_IMPLEMENTED("_transform()")},Transform$5.prototype._write=function(chunk,encoding,callback){const rState=this._readableState,wState=this._writableState,length=rState.length;this._transform(chunk,encoding,((err,val)=>{err?callback(err):(null!=val&&this.push(val),wState.ended||length===rState.length||rState.length<rState.highWaterMark?callback():this[kCallback]=callback)}))},Transform$5.prototype._read=function(){if(this[kCallback]){const callback=this[kCallback];this[kCallback]=null,callback()}};const{ObjectSetPrototypeOf:ObjectSetPrototypeOf}=primordials;var passthrough=PassThrough$3;const Transform$4=transform;function PassThrough$3(options){if(!(this instanceof PassThrough$3))return new PassThrough$3(options);Transform$4.call(this,options)}ObjectSetPrototypeOf(PassThrough$3.prototype,Transform$4.prototype),ObjectSetPrototypeOf(PassThrough$3,Transform$4),PassThrough$3.prototype._transform=function(chunk,encoding,cb){cb(null,chunk)};const process$1=browserExports$1,{ArrayIsArray:ArrayIsArray,Promise:Promise$2,SymbolAsyncIterator:SymbolAsyncIterator}=primordials,eos$3=endOfStreamExports,{once:once$4}=utilExports,destroyImpl=destroy_1$2,Duplex$3=requireDuplex(),{aggregateTwoErrors:aggregateTwoErrors,codes:{ERR_INVALID_ARG_TYPE:ERR_INVALID_ARG_TYPE,ERR_INVALID_RETURN_VALUE:ERR_INVALID_RETURN_VALUE,ERR_MISSING_ARGS:ERR_MISSING_ARGS$1,ERR_STREAM_DESTROYED:ERR_STREAM_DESTROYED,ERR_STREAM_PREMATURE_CLOSE:ERR_STREAM_PREMATURE_CLOSE},AbortError:AbortError$1}=errors$1,{validateFunction:validateFunction,validateAbortSignal:validateAbortSignal}=validators,{isIterable:isIterable$2,isReadable:isReadable$1,isReadableNodeStream:isReadableNodeStream,isNodeStream:isNodeStream$2}=utils$4,AbortController=globalThis.AbortController||requireBrowser().AbortController;let PassThrough$2,Readable;function destroyer$3(stream2,reading,writing){let finished2=!1;stream2.on("close",(()=>{finished2=!0}));return{destroy:err=>{finished2||(finished2=!0,destroyImpl.destroyer(stream2,err||new ERR_STREAM_DESTROYED("pipe")))},cleanup:eos$3(stream2,{readable:reading,writable:writing},(err=>{finished2=!err}))}}function makeAsyncIterable(val){if(isIterable$2(val))return val;if(isReadableNodeStream(val))return async function*(val){Readable||(Readable=requireReadable());yield*Readable.prototype[SymbolAsyncIterator].call(val)}(val);throw new ERR_INVALID_ARG_TYPE("val",["Readable","Iterable","AsyncIterable"],val)}async function pump$1(iterable,writable2,finish,{end:end}){let error,onresolve=null;const resume=err=>{if(err&&(error=err),onresolve){const callback=onresolve;onresolve=null,callback()}},wait=()=>new Promise$2(((resolve,reject)=>{error?reject(error):onresolve=()=>{error?reject(error):resolve()}}));writable2.on("drain",resume);const cleanup=eos$3(writable2,{readable:!1},resume);try{writable2.writableNeedDrain&&await wait();for await(const chunk of iterable)writable2.write(chunk)||await wait();end&&writable2.end(),await wait(),finish()}catch(err){finish(error!==err?aggregateTwoErrors(error,err):err)}finally{cleanup(),writable2.off("drain",resume)}}function pipelineImpl(streams,callback,opts2){if(1===streams.length&&ArrayIsArray(streams[0])&&(streams=streams[0]),streams.length<2)throw new ERR_MISSING_ARGS$1("streams");const ac=new AbortController,signal=ac.signal,outerSignal=null==opts2?void 0:opts2.signal,lastStreamCleanup=[];function abort(){finishImpl(new AbortError$1)}let error,value;validateAbortSignal(outerSignal,"options.signal"),null==outerSignal||outerSignal.addEventListener("abort",abort);const destroys=[];let ret,finishCount=0;function finish(err){finishImpl(err,0==--finishCount)}function finishImpl(err,final2){if(!err||error&&"ERR_STREAM_PREMATURE_CLOSE"!==error.code||(error=err),error||final2){for(;destroys.length;)destroys.shift()(error);null==outerSignal||outerSignal.removeEventListener("abort",abort),ac.abort(),final2&&(error||lastStreamCleanup.forEach((fn=>fn())),process$1.nextTick(callback,error,value))}}for(let i2=0;i2<streams.length;i2++){const stream2=streams[i2],reading=i2<streams.length-1,writing=i2>0,end=reading||!1!==(null==opts2?void 0:opts2.end),isLastStream=i2===streams.length-1;if(isNodeStream$2(stream2)){let onError=function(err){err&&"AbortError"!==err.name&&"ERR_STREAM_PREMATURE_CLOSE"!==err.code&&finish(err)};if(end){const{destroy:destroy2,cleanup:cleanup}=destroyer$3(stream2,reading,writing);destroys.push(destroy2),isReadable$1(stream2)&&isLastStream&&lastStreamCleanup.push(cleanup)}stream2.on("error",onError),isReadable$1(stream2)&&isLastStream&&lastStreamCleanup.push((()=>{stream2.removeListener("error",onError)}))}if(0===i2)if("function"==typeof stream2){if(ret=stream2({signal:signal}),!isIterable$2(ret))throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or Stream","source",ret)}else ret=isIterable$2(stream2)||isReadableNodeStream(stream2)?stream2:Duplex$3.from(stream2);else if("function"==typeof stream2)if(ret=makeAsyncIterable(ret),ret=stream2(ret,{signal:signal}),reading){if(!isIterable$2(ret,!0))throw new ERR_INVALID_RETURN_VALUE("AsyncIterable",`transform[${i2-1}]`,ret)}else{var _ret;PassThrough$2||(PassThrough$2=passthrough);const pt=new PassThrough$2({objectMode:!0}),then=null===(_ret=ret)||void 0===_ret?void 0:_ret.then;if("function"==typeof then)finishCount++,then.call(ret,(val=>{value=val,null!=val&&pt.write(val),end&&pt.end(),process$1.nextTick(finish)}),(err=>{pt.destroy(err),process$1.nextTick(finish,err)}));else{if(!isIterable$2(ret,!0))throw new ERR_INVALID_RETURN_VALUE("AsyncIterable or Promise","destination",ret);finishCount++,pump$1(ret,pt,finish,{end:end})}ret=pt;const{destroy:destroy2,cleanup:cleanup}=destroyer$3(ret,!1,!0);destroys.push(destroy2),isLastStream&&lastStreamCleanup.push(cleanup)}else if(isNodeStream$2(stream2)){if(isReadableNodeStream(ret)){finishCount+=2;const cleanup=pipe$1(ret,stream2,finish,{end:end});isReadable$1(stream2)&&isLastStream&&lastStreamCleanup.push(cleanup)}else{if(!isIterable$2(ret))throw new ERR_INVALID_ARG_TYPE("val",["Readable","Iterable","AsyncIterable"],ret);finishCount++,pump$1(ret,stream2,finish,{end:end})}ret=stream2}else ret=Duplex$3.from(stream2)}return(null!=signal&&signal.aborted||null!=outerSignal&&outerSignal.aborted)&&process$1.nextTick(abort),ret}function pipe$1(src,dst,finish,{end:end}){let ended=!1;return dst.on("close",(()=>{ended||finish(new ERR_STREAM_PREMATURE_CLOSE)})),src.pipe(dst,{end:end}),end?src.once("end",(()=>{ended=!0,dst.end()})):finish(),eos$3(src,{readable:!0,writable:!1},(err=>{const rState=src._readableState;err&&"ERR_STREAM_PREMATURE_CLOSE"===err.code&&rState&&rState.ended&&!rState.errored&&!rState.errorEmitted?src.once("end",finish).once("error",finish):finish(err)})),eos$3(dst,{readable:!1,writable:!0},finish)}var pipeline_1={pipelineImpl:pipelineImpl,pipeline:function(...streams){return pipelineImpl(streams,once$4(function(streams){return validateFunction(streams[streams.length-1],"streams[stream.length - 1]"),streams.pop()}(streams)))}};const{pipeline:pipeline$2}=pipeline_1,Duplex$2=requireDuplex(),{destroyer:destroyer$2}=destroy_1$2,{isNodeStream:isNodeStream$1,isReadable:isReadable,isWritable:isWritable}=utils$4,{AbortError:AbortError,codes:{ERR_INVALID_ARG_VALUE:ERR_INVALID_ARG_VALUE,ERR_MISSING_ARGS:ERR_MISSING_ARGS}}=errors$1;const{ArrayPrototypePop:ArrayPrototypePop,Promise:Promise$1}=primordials,{isIterable:isIterable$1,isNodeStream:isNodeStream}=utils$4,{pipelineImpl:pl}=pipeline_1,{finished:finished}=endOfStreamExports;var promises$1={finished:finished,pipeline:function(...streams){return new Promise$1(((resolve,reject)=>{let signal,end;const lastArg=streams[streams.length-1];if(lastArg&&"object"==typeof lastArg&&!isNodeStream(lastArg)&&!isIterable$1(lastArg)){const options=ArrayPrototypePop(streams);signal=options.signal,end=options.end}pl(streams,((err,value)=>{err?reject(err):resolve(value)}),{signal:signal,end:end})}))}};const{Buffer:Buffer$1}=buffer,{ObjectDefineProperty:ObjectDefineProperty,ObjectKeys:ObjectKeys,ReflectApply:ReflectApply}=primordials,{promisify:{custom:customPromisify}}=utilExports,{streamReturningOperators:streamReturningOperators,promiseReturningOperators:promiseReturningOperators}=operators,{codes:{ERR_ILLEGAL_CONSTRUCTOR:ERR_ILLEGAL_CONSTRUCTOR}}=errors$1,compose=function(...streams){if(0===streams.length)throw new ERR_MISSING_ARGS("streams");if(1===streams.length)return Duplex$2.from(streams[0]);const orgStreams=[...streams];if("function"==typeof streams[0]&&(streams[0]=Duplex$2.from(streams[0])),"function"==typeof streams[streams.length-1]){const idx=streams.length-1;streams[idx]=Duplex$2.from(streams[idx])}for(let n=0;n<streams.length;++n)if(isNodeStream$1(streams[n])){if(n<streams.length-1&&!isReadable(streams[n]))throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`,orgStreams[n],"must be readable");if(n>0&&!isWritable(streams[n]))throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`,orgStreams[n],"must be writable")}let ondrain,onfinish,onreadable,onclose,d;const head=streams[0],tail=pipeline$2(streams,(function(err){const cb=onclose;onclose=null,cb?cb(err):err?d.destroy(err):readable2||writable2||d.destroy()})),writable2=!!isWritable(head),readable2=!!isReadable(tail);return d=new Duplex$2({writableObjectMode:!(null==head||!head.writableObjectMode),readableObjectMode:!(null==tail||!tail.writableObjectMode),writable:writable2,readable:readable2}),writable2&&(d._write=function(chunk,encoding,callback){head.write(chunk,encoding)?callback():ondrain=callback},d._final=function(callback){head.end(),onfinish=callback},head.on("drain",(function(){if(ondrain){const cb=ondrain;ondrain=null,cb()}})),tail.on("finish",(function(){if(onfinish){const cb=onfinish;onfinish=null,cb()}}))),readable2&&(tail.on("readable",(function(){if(onreadable){const cb=onreadable;onreadable=null,cb()}})),tail.on("end",(function(){d.push(null)})),d._read=function(){for(;;){const buf=tail.read();if(null===buf)return void(onreadable=d._read);if(!d.push(buf))return}}),d._destroy=function(err,callback){err||null===onclose||(err=new AbortError),onreadable=null,ondrain=null,onfinish=null,null===onclose?callback(err):(onclose=callback,destroyer$2(tail,err))},d},{pipeline:pipeline}=pipeline_1,{destroyer:destroyer$1}=destroy_1$2,eos$2=endOfStreamExports,promises=promises$1,utils$3=utils$4,Stream=stream.exports=legacy.Stream;Stream.isDisturbed=utils$3.isDisturbed,Stream.isErrored=utils$3.isErrored,Stream.isReadable=utils$3.isReadable,Stream.Readable=requireReadable();for(const key of ObjectKeys(streamReturningOperators)){let fn=function(...args){if(new.target)throw ERR_ILLEGAL_CONSTRUCTOR();return Stream.Readable.from(ReflectApply(op,this,args))};const op=streamReturningOperators[key];ObjectDefineProperty(fn,"name",{__proto__:null,value:op.name}),ObjectDefineProperty(fn,"length",{__proto__:null,value:op.length}),ObjectDefineProperty(Stream.Readable.prototype,key,{__proto__:null,value:fn,enumerable:!1,configurable:!0,writable:!0})}for(const key of ObjectKeys(promiseReturningOperators)){let fn=function(...args){if(new.target)throw ERR_ILLEGAL_CONSTRUCTOR();return ReflectApply(op,this,args)};const op=promiseReturningOperators[key];ObjectDefineProperty(fn,"name",{__proto__:null,value:op.name}),ObjectDefineProperty(fn,"length",{__proto__:null,value:op.length}),ObjectDefineProperty(Stream.Readable.prototype,key,{__proto__:null,value:fn,enumerable:!1,configurable:!0,writable:!0})}Stream.Writable=requireWritable(),Stream.Duplex=requireDuplex(),Stream.Transform=transform,Stream.PassThrough=passthrough,Stream.pipeline=pipeline;const{addAbortSignal:addAbortSignal}=addAbortSignalExports;Stream.addAbortSignal=addAbortSignal,Stream.finished=eos$2,Stream.destroy=destroyer$1,Stream.compose=compose,ObjectDefineProperty(Stream,"promises",{__proto__:null,configurable:!0,enumerable:!0,get:()=>promises}),ObjectDefineProperty(pipeline,customPromisify,{__proto__:null,enumerable:!0,get:()=>promises.pipeline}),ObjectDefineProperty(eos$2,customPromisify,{__proto__:null,enumerable:!0,get:()=>promises.finished}),Stream.Stream=Stream,Stream._isUint8Array=function(value){return value instanceof Uint8Array},Stream._uint8ArrayToBuffer=function(chunk){return Buffer$1.from(chunk.buffer,chunk.byteOffset,chunk.byteLength)},function(module){const CustomStream=streamExports,promises2=promises$1,originalDestroy=CustomStream.Readable.destroy;module.exports=CustomStream.Readable,module.exports._uint8ArrayToBuffer=CustomStream._uint8ArrayToBuffer,module.exports._isUint8Array=CustomStream._isUint8Array,module.exports.isDisturbed=CustomStream.isDisturbed,module.exports.isErrored=CustomStream.isErrored,module.exports.isReadable=CustomStream.isReadable,module.exports.Readable=CustomStream.Readable,module.exports.Writable=CustomStream.Writable,module.exports.Duplex=CustomStream.Duplex,module.exports.Transform=CustomStream.Transform,module.exports.PassThrough=CustomStream.PassThrough,module.exports.addAbortSignal=CustomStream.addAbortSignal,module.exports.finished=CustomStream.finished,module.exports.destroy=CustomStream.destroy,module.exports.destroy=originalDestroy,module.exports.pipeline=CustomStream.pipeline,module.exports.compose=CustomStream.compose,Object.defineProperty(CustomStream,"promises",{configurable:!0,enumerable:!0,get:()=>promises2}),module.exports.Stream=CustomStream.Stream,module.exports.default=module.exports}(browser$6),(async()=>{globalThis.Buffer?globalThis.Buffer:promise||(promise=new Promise((async resolve=>{resolve(globalThis.Buffer=(await Promise.resolve().then((()=>index))).Buffer)})))})();var browser$3={},WindowPostMessageStream$1={},BasePostMessageStream$1={},readableBrowserExports$1={},readableBrowser$1={get exports(){return readableBrowserExports$1},set exports(v){readableBrowserExports$1=v}},processNextickArgsExports$1={},processNextickArgs$1={get exports(){return processNextickArgsExports$1},set exports(v){processNextickArgsExports$1=v}};!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?processNextickArgs$1.exports=function(fn,arg1,arg2,arg3){if("function"!=typeof fn)throw new TypeError('"callback" argument must be a function');var args,i2,len2=arguments.length;switch(len2){case 0:case 1:return process.nextTick(fn);case 2:return process.nextTick((function(){fn.call(null,arg1)}));case 3:return process.nextTick((function(){fn.call(null,arg1,arg2)}));case 4:return process.nextTick((function(){fn.call(null,arg1,arg2,arg3)}));default:for(args=new Array(len2-1),i2=0;i2<args.length;)args[i2++]=arguments[i2];return process.nextTick((function(){fn.apply(null,args)}))}}:processNextickArgs$1.exports=process.nextTick;var toString={}.toString,isarray=Array.isArray||function(arr2){return"[object Array]"==toString.call(arr2)},streamBrowser$1=eventsExports.EventEmitter,util$4={};function objectToString(o){return Object.prototype.toString.call(o)}util$4.isArray=function(arg){return Array.isArray?Array.isArray(arg):"[object Array]"===objectToString(arg)},util$4.isBoolean=function(arg){return"boolean"==typeof arg},util$4.isNull=function(arg){return null===arg},util$4.isNullOrUndefined=function(arg){return null==arg},util$4.isNumber=function(arg){return"number"==typeof arg},util$4.isString=function(arg){return"string"==typeof arg},util$4.isSymbol=function(arg){return"symbol"==typeof arg},util$4.isUndefined=function(arg){return void 0===arg},util$4.isRegExp=function(re2){return"[object RegExp]"===objectToString(re2)},util$4.isObject=function(arg){return"object"==typeof arg&&null!==arg},util$4.isDate=function(d){return"[object Date]"===objectToString(d)},util$4.isError=function(e){return"[object Error]"===objectToString(e)||e instanceof Error},util$4.isFunction=function(arg){return"function"==typeof arg},util$4.isPrimitive=function(arg){return null===arg||"boolean"==typeof arg||"number"==typeof arg||"string"==typeof arg||"symbol"==typeof arg||void 0===arg},util$4.isBuffer=buffer.Buffer.isBuffer;var inherits_browserExports={},inherits_browser={get exports(){return inherits_browserExports},set exports(v){inherits_browserExports=v}};"function"==typeof Object.create?inherits_browser.exports=function(ctor,superCtor){superCtor&&(ctor.super_=superCtor,ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:!1,writable:!0,configurable:!0}}))}:inherits_browser.exports=function(ctor,superCtor){if(superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype,ctor.prototype=new TempCtor,ctor.prototype.constructor=ctor}};const __viteBrowserExternal=new Proxy({},{get(_,key){throw new Error(`Module "" has been externalized for browser compatibility. Cannot access ".${key}" in client code.  See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)}}),require$$2=getAugmentedNamespace(Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal},Symbol.toStringTag,{value:"Module"})));var BufferList$1,hasRequiredBufferList$1;function requireBufferList$1(){if(hasRequiredBufferList$1)return BufferList$1;hasRequiredBufferList$1=1;var Buffer2=safeBufferExports.Buffer;return BufferList$1=function(){function BufferList2(){!function(instance2,Constructor){if(!(instance2 instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,BufferList2),this.head=null,this.tail=null,this.length=0}return BufferList2.prototype.push=function(v){var entry={data:v,next:null};this.length>0?this.tail.next=entry:this.head=entry,this.tail=entry,++this.length},BufferList2.prototype.unshift=function(v){var entry={data:v,next:this.head};0===this.length&&(this.tail=entry),this.head=entry,++this.length},BufferList2.prototype.shift=function(){if(0!==this.length){var ret=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,ret}},BufferList2.prototype.clear=function(){this.head=this.tail=null,this.length=0},BufferList2.prototype.join=function(s){if(0===this.length)return"";for(var p=this.head,ret=""+p.data;p=p.next;)ret+=s+p.data;return ret},BufferList2.prototype.concat=function(n){if(0===this.length)return Buffer2.alloc(0);if(1===this.length)return this.head.data;for(var src,target,offset,ret=Buffer2.allocUnsafe(n>>>0),p=this.head,i2=0;p;)src=p.data,target=ret,offset=i2,src.copy(target,offset),i2+=p.data.length,p=p.next;return ret},BufferList2}()}var processNextTick=processNextickArgsExports$1;function emitErrorNT$1(self2,err){self2.emit("error",err)}var _stream_writable$1,hasRequired_stream_writable$1,_stream_duplex$1,hasRequired_stream_duplex$1,_stream_readable$1,hasRequired_stream_readable$1,destroy_1$1={destroy:function(err,cb){var _this=this,readableDestroyed=this._readableState&&this._readableState.destroyed,writableDestroyed=this._writableState&&this._writableState.destroyed;readableDestroyed||writableDestroyed?cb?cb(err):!err||this._writableState&&this._writableState.errorEmitted||processNextTick(emitErrorNT$1,this,err):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(err||null,(function(err2){!cb&&err2?(processNextTick(emitErrorNT$1,_this,err2),_this._writableState&&(_this._writableState.errorEmitted=!0)):cb&&cb(err2)})))},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}},browser$2=function(fn,msg){if(config("noDeprecation"))return fn;var warned=!1;return function(){if(!warned){if(config("throwDeprecation"))throw new Error(msg);config("traceDeprecation")?console.trace(msg):console.warn(msg),warned=!0}return fn.apply(this,arguments)}};function config(name){try{if(!globalThis.localStorage)return!1}catch(_){return!1}var val=globalThis.localStorage[name];return null!=val&&"true"===String(val).toLowerCase()}function require_stream_writable$1(){if(hasRequired_stream_writable$1)return _stream_writable$1;hasRequired_stream_writable$1=1;var processNextTick2=processNextickArgsExports$1;function CorkedRequest(state2){var _this=this;this.next=null,this.entry=null,this.finish=function(){!function(corkReq,state2,err){var entry=corkReq.entry;corkReq.entry=null;for(;entry;){var cb=entry.callback;state2.pendingcb--,cb(err),entry=entry.next}state2.corkedRequestsFree?state2.corkedRequestsFree.next=corkReq:state2.corkedRequestsFree=corkReq}(_this,state2)}}_stream_writable$1=Writable;var Duplex2,asyncWrite=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:processNextTick2;Writable.WritableState=WritableState;var util2=util$4;util2.inherits=inherits_browserExports;var internalUtil={deprecate:browser$2},Stream2=streamBrowser$1,Buffer2=safeBufferExports.Buffer,OurUint8Array=globalThis.Uint8Array||function(){};var realHasInstance,destroyImpl2=destroy_1$1;function nop2(){}function WritableState(options,stream2){Duplex2=Duplex2||require_stream_duplex$1(),options=options||{},this.objectMode=!!options.objectMode,stream2 instanceof Duplex2&&(this.objectMode=this.objectMode||!!options.writableObjectMode);var hwm=options.highWaterMark,defaultHwm=this.objectMode?16:16384;this.highWaterMark=hwm||0===hwm?hwm:defaultHwm,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var noDecode=!1===options.decodeStrings;this.decodeStrings=!noDecode,this.defaultEncoding=options.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(er){!function(stream2,er){var state2=stream2._writableState,sync=state2.sync,cb=state2.writecb;if(function(state2){state2.writing=!1,state2.writecb=null,state2.length-=state2.writelen,state2.writelen=0}(state2),er)!function(stream2,state2,sync,er,cb){--state2.pendingcb,sync?(processNextTick2(cb,er),processNextTick2(finishMaybe,stream2,state2),stream2._writableState.errorEmitted=!0,stream2.emit("error",er)):(cb(er),stream2._writableState.errorEmitted=!0,stream2.emit("error",er),finishMaybe(stream2,state2))}(stream2,state2,sync,er,cb);else{var finished2=needFinish(state2);finished2||state2.corked||state2.bufferProcessing||!state2.bufferedRequest||clearBuffer(stream2,state2),sync?asyncWrite(afterWrite,stream2,state2,finished2,cb):afterWrite(stream2,state2,finished2,cb)}}(stream2,er)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new CorkedRequest(this)}function Writable(options){if(Duplex2=Duplex2||require_stream_duplex$1(),!(realHasInstance.call(Writable,this)||this instanceof Duplex2))return new Writable(options);this._writableState=new WritableState(options,this),this.writable=!0,options&&("function"==typeof options.write&&(this._write=options.write),"function"==typeof options.writev&&(this._writev=options.writev),"function"==typeof options.destroy&&(this._destroy=options.destroy),"function"==typeof options.final&&(this._final=options.final)),Stream2.call(this)}function doWrite(stream2,state2,writev,len2,chunk,encoding,cb){state2.writelen=len2,state2.writecb=cb,state2.writing=!0,state2.sync=!0,writev?stream2._writev(chunk,state2.onwrite):stream2._write(chunk,encoding,state2.onwrite),state2.sync=!1}function afterWrite(stream2,state2,finished2,cb){finished2||function(stream2,state2){0===state2.length&&state2.needDrain&&(state2.needDrain=!1,stream2.emit("drain"))}(stream2,state2),state2.pendingcb--,cb(),finishMaybe(stream2,state2)}function clearBuffer(stream2,state2){state2.bufferProcessing=!0;var entry=state2.bufferedRequest;if(stream2._writev&&entry&&entry.next){var l=state2.bufferedRequestCount,buffer2=new Array(l),holder=state2.corkedRequestsFree;holder.entry=entry;for(var count=0,allBuffers=!0;entry;)buffer2[count]=entry,entry.isBuf||(allBuffers=!1),entry=entry.next,count+=1;buffer2.allBuffers=allBuffers,doWrite(stream2,state2,!0,state2.length,buffer2,"",holder.finish),state2.pendingcb++,state2.lastBufferedRequest=null,holder.next?(state2.corkedRequestsFree=holder.next,holder.next=null):state2.corkedRequestsFree=new CorkedRequest(state2)}else{for(;entry;){var chunk=entry.chunk,encoding=entry.encoding,cb=entry.callback;if(doWrite(stream2,state2,!1,state2.objectMode?1:chunk.length,chunk,encoding,cb),entry=entry.next,state2.writing)break}null===entry&&(state2.lastBufferedRequest=null)}state2.bufferedRequestCount=0,state2.bufferedRequest=entry,state2.bufferProcessing=!1}function needFinish(state2){return state2.ending&&0===state2.length&&null===state2.bufferedRequest&&!state2.finished&&!state2.writing}function callFinal(stream2,state2){stream2._final((function(err){state2.pendingcb--,err&&stream2.emit("error",err),state2.prefinished=!0,stream2.emit("prefinish"),finishMaybe(stream2,state2)}))}function finishMaybe(stream2,state2){var need=needFinish(state2);return need&&(!function(stream2,state2){state2.prefinished||state2.finalCalled||("function"==typeof stream2._final?(state2.pendingcb++,state2.finalCalled=!0,processNextTick2(callFinal,stream2,state2)):(state2.prefinished=!0,stream2.emit("prefinish")))}(stream2,state2),0===state2.pendingcb&&(state2.finished=!0,stream2.emit("finish"))),need}return util2.inherits(Writable,Stream2),WritableState.prototype.getBuffer=function(){for(var current=this.bufferedRequest,out=[];current;)out.push(current),current=current.next;return out},function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:internalUtil.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(_){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(realHasInstance=Function.prototype[Symbol.hasInstance],Object.defineProperty(Writable,Symbol.hasInstance,{value:function(object2){return!!realHasInstance.call(this,object2)||object2&&object2._writableState instanceof WritableState}})):realHasInstance=function(object2){return object2 instanceof this},Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},Writable.prototype.write=function(chunk,encoding,cb){var obj,state2=this._writableState,ret=!1,isBuf=(obj=chunk,(Buffer2.isBuffer(obj)||obj instanceof OurUint8Array)&&!state2.objectMode);return isBuf&&!Buffer2.isBuffer(chunk)&&(chunk=function(chunk){return Buffer2.from(chunk)}(chunk)),"function"==typeof encoding&&(cb=encoding,encoding=null),isBuf?encoding="buffer":encoding||(encoding=state2.defaultEncoding),"function"!=typeof cb&&(cb=nop2),state2.ended?function(stream2,cb){var er=new Error("write after end");stream2.emit("error",er),processNextTick2(cb,er)}(this,cb):(isBuf||function(stream2,state2,chunk,cb){var valid2=!0,er=!1;return null===chunk?er=new TypeError("May not write null values to stream"):"string"==typeof chunk||void 0===chunk||state2.objectMode||(er=new TypeError("Invalid non-string/buffer chunk")),er&&(stream2.emit("error",er),processNextTick2(cb,er),valid2=!1),valid2}(this,state2,chunk,cb))&&(state2.pendingcb++,ret=function(stream2,state2,isBuf,chunk,encoding,cb){if(!isBuf){var newChunk=function(state2,chunk,encoding){state2.objectMode||!1===state2.decodeStrings||"string"!=typeof chunk||(chunk=Buffer2.from(chunk,encoding));return chunk}(state2,chunk,encoding);chunk!==newChunk&&(isBuf=!0,encoding="buffer",chunk=newChunk)}var len2=state2.objectMode?1:chunk.length;state2.length+=len2;var ret=state2.length<state2.highWaterMark;ret||(state2.needDrain=!0);if(state2.writing||state2.corked){var last=state2.lastBufferedRequest;state2.lastBufferedRequest={chunk:chunk,encoding:encoding,isBuf:isBuf,callback:cb,next:null},last?last.next=state2.lastBufferedRequest:state2.bufferedRequest=state2.lastBufferedRequest,state2.bufferedRequestCount+=1}else doWrite(stream2,state2,!1,len2,chunk,encoding,cb);return ret}(this,state2,isBuf,chunk,encoding,cb)),ret},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){var state2=this._writableState;state2.corked&&(state2.corked--,state2.writing||state2.corked||state2.finished||state2.bufferProcessing||!state2.bufferedRequest||clearBuffer(this,state2))},Writable.prototype.setDefaultEncoding=function(encoding){if("string"==typeof encoding&&(encoding=encoding.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((encoding+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+encoding);return this._writableState.defaultEncoding=encoding,this},Writable.prototype._write=function(chunk,encoding,cb){cb(new Error("_write() is not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(chunk,encoding,cb){var state2=this._writableState;"function"==typeof chunk?(cb=chunk,chunk=null,encoding=null):"function"==typeof encoding&&(cb=encoding,encoding=null),null!=chunk&&this.write(chunk,encoding),state2.corked&&(state2.corked=1,this.uncork()),state2.ending||state2.finished||function(stream2,state2,cb){state2.ending=!0,finishMaybe(stream2,state2),cb&&(state2.finished?processNextTick2(cb):stream2.once("finish",cb));state2.ended=!0,stream2.writable=!1}(this,state2,cb)},Object.defineProperty(Writable.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(value){this._writableState&&(this._writableState.destroyed=value)}}),Writable.prototype.destroy=destroyImpl2.destroy,Writable.prototype._undestroy=destroyImpl2.undestroy,Writable.prototype._destroy=function(err,cb){this.end(),cb(err)},_stream_writable$1}function require_stream_duplex$1(){if(hasRequired_stream_duplex$1)return _stream_duplex$1;hasRequired_stream_duplex$1=1;var processNextTick2=processNextickArgsExports$1,objectKeys=Object.keys||function(obj){var keys2=[];for(var key in obj)keys2.push(key);return keys2};_stream_duplex$1=Duplex2;var util2=util$4;util2.inherits=inherits_browserExports;var Readable2=require_stream_readable$1(),Writable=require_stream_writable$1();util2.inherits(Duplex2,Readable2);for(var keys=objectKeys(Writable.prototype),v=0;v<keys.length;v++){var method=keys[v];Duplex2.prototype[method]||(Duplex2.prototype[method]=Writable.prototype[method])}function Duplex2(options){if(!(this instanceof Duplex2))return new Duplex2(options);Readable2.call(this,options),Writable.call(this,options),options&&!1===options.readable&&(this.readable=!1),options&&!1===options.writable&&(this.writable=!1),this.allowHalfOpen=!0,options&&!1===options.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",onend)}function onend(){this.allowHalfOpen||this._writableState.ended||processNextTick2(onEndNT,this)}function onEndNT(self2){self2.end()}return Object.defineProperty(Duplex2.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(value){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=value,this._writableState.destroyed=value)}}),Duplex2.prototype._destroy=function(err,cb){this.push(null),this.end(),processNextTick2(cb,err)},_stream_duplex$1}function require_stream_readable$1(){if(hasRequired_stream_readable$1)return _stream_readable$1;hasRequired_stream_readable$1=1;var processNextTick2=processNextickArgsExports$1;_stream_readable$1=Readable2;var Duplex2,isArray2=isarray;Readable2.ReadableState=ReadableState,eventsExports.EventEmitter;var EElistenerCount=function(emitter,type2){return emitter.listeners(type2).length},Stream2=streamBrowser$1,Buffer2=safeBufferExports.Buffer,OurUint8Array=globalThis.Uint8Array||function(){};var util2=util$4;util2.inherits=inherits_browserExports;var debugUtil=require$$2,debug2=void 0;debug2=debugUtil&&debugUtil.debuglog?debugUtil.debuglog("stream"):function(){};var StringDecoder2,BufferList2=requireBufferList$1(),destroyImpl2=destroy_1$1;util2.inherits(Readable2,Stream2);var kProxyEvents=["error","close","destroy","pause","resume"];function ReadableState(options,stream2){Duplex2=Duplex2||require_stream_duplex$1(),options=options||{},this.objectMode=!!options.objectMode,stream2 instanceof Duplex2&&(this.objectMode=this.objectMode||!!options.readableObjectMode);var hwm=options.highWaterMark,defaultHwm=this.objectMode?16:16384;this.highWaterMark=hwm||0===hwm?hwm:defaultHwm,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new BufferList2,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=options.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,options.encoding&&(StringDecoder2||(StringDecoder2=string_decoder$1.StringDecoder),this.decoder=new StringDecoder2(options.encoding),this.encoding=options.encoding)}function Readable2(options){if(Duplex2=Duplex2||require_stream_duplex$1(),!(this instanceof Readable2))return new Readable2(options);this._readableState=new ReadableState(options,this),this.readable=!0,options&&("function"==typeof options.read&&(this._read=options.read),"function"==typeof options.destroy&&(this._destroy=options.destroy)),Stream2.call(this)}function readableAddChunk(stream2,chunk,encoding,addToFront,skipChunkCheck){var er,state2=stream2._readableState;null===chunk?(state2.reading=!1,function(stream2,state2){if(state2.ended)return;if(state2.decoder){var chunk=state2.decoder.end();chunk&&chunk.length&&(state2.buffer.push(chunk),state2.length+=state2.objectMode?1:chunk.length)}state2.ended=!0,emitReadable(stream2)}(stream2,state2)):(skipChunkCheck||(er=function(state2,chunk){var er;obj=chunk,Buffer2.isBuffer(obj)||obj instanceof OurUint8Array||"string"==typeof chunk||void 0===chunk||state2.objectMode||(er=new TypeError("Invalid non-string/buffer chunk"));var obj;return er}(state2,chunk)),er?stream2.emit("error",er):state2.objectMode||chunk&&chunk.length>0?("string"==typeof chunk||state2.objectMode||Object.getPrototypeOf(chunk)===Buffer2.prototype||(chunk=function(chunk){return Buffer2.from(chunk)}(chunk)),addToFront?state2.endEmitted?stream2.emit("error",new Error("stream.unshift() after end event")):addChunk(stream2,state2,chunk,!0):state2.ended?stream2.emit("error",new Error("stream.push() after EOF")):(state2.reading=!1,state2.decoder&&!encoding?(chunk=state2.decoder.write(chunk),state2.objectMode||0!==chunk.length?addChunk(stream2,state2,chunk,!1):maybeReadMore(stream2,state2)):addChunk(stream2,state2,chunk,!1))):addToFront||(state2.reading=!1));return function(state2){return!state2.ended&&(state2.needReadable||state2.length<state2.highWaterMark||0===state2.length)}(state2)}function addChunk(stream2,state2,chunk,addToFront){state2.flowing&&0===state2.length&&!state2.sync?(stream2.emit("data",chunk),stream2.read(0)):(state2.length+=state2.objectMode?1:chunk.length,addToFront?state2.buffer.unshift(chunk):state2.buffer.push(chunk),state2.needReadable&&emitReadable(stream2)),maybeReadMore(stream2,state2)}Object.defineProperty(Readable2.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(value){this._readableState&&(this._readableState.destroyed=value)}}),Readable2.prototype.destroy=destroyImpl2.destroy,Readable2.prototype._undestroy=destroyImpl2.undestroy,Readable2.prototype._destroy=function(err,cb){this.push(null),cb(err)},Readable2.prototype.push=function(chunk,encoding){var skipChunkCheck,state2=this._readableState;return state2.objectMode?skipChunkCheck=!0:"string"==typeof chunk&&((encoding=encoding||state2.defaultEncoding)!==state2.encoding&&(chunk=Buffer2.from(chunk,encoding),encoding=""),skipChunkCheck=!0),readableAddChunk(this,chunk,encoding,!1,skipChunkCheck)},Readable2.prototype.unshift=function(chunk){return readableAddChunk(this,chunk,null,!0,!1)},Readable2.prototype.isPaused=function(){return!1===this._readableState.flowing},Readable2.prototype.setEncoding=function(enc){return StringDecoder2||(StringDecoder2=string_decoder$1.StringDecoder),this._readableState.decoder=new StringDecoder2(enc),this._readableState.encoding=enc,this};var MAX_HWM=8388608;function howMuchToRead(n,state2){return n<=0||0===state2.length&&state2.ended?0:state2.objectMode?1:n!=n?state2.flowing&&state2.length?state2.buffer.head.data.length:state2.length:(n>state2.highWaterMark&&(state2.highWaterMark=function(n){return n>=MAX_HWM?n=MAX_HWM:(n--,n|=n>>>1,n|=n>>>2,n|=n>>>4,n|=n>>>8,n|=n>>>16,n++),n}(n)),n<=state2.length?n:state2.ended?state2.length:(state2.needReadable=!0,0))}function emitReadable(stream2){var state2=stream2._readableState;state2.needReadable=!1,state2.emittedReadable||(debug2("emitReadable",state2.flowing),state2.emittedReadable=!0,state2.sync?processNextTick2(emitReadable_,stream2):emitReadable_(stream2))}function emitReadable_(stream2){debug2("emit readable"),stream2.emit("readable"),flow(stream2)}function maybeReadMore(stream2,state2){state2.readingMore||(state2.readingMore=!0,processNextTick2(maybeReadMore_,stream2,state2))}function maybeReadMore_(stream2,state2){for(var len2=state2.length;!state2.reading&&!state2.flowing&&!state2.ended&&state2.length<state2.highWaterMark&&(debug2("maybeReadMore read 0"),stream2.read(0),len2!==state2.length);)len2=state2.length;state2.readingMore=!1}function nReadingNextTick(self2){debug2("readable nexttick read 0"),self2.read(0)}function resume_(stream2,state2){state2.reading||(debug2("resume read 0"),stream2.read(0)),state2.resumeScheduled=!1,state2.awaitDrain=0,stream2.emit("resume"),flow(stream2),state2.flowing&&!state2.reading&&stream2.read(0)}function flow(stream2){var state2=stream2._readableState;for(debug2("flow",state2.flowing);state2.flowing&&null!==stream2.read(););}function fromList(n,state2){return 0===state2.length?null:(state2.objectMode?ret=state2.buffer.shift():!n||n>=state2.length?(ret=state2.decoder?state2.buffer.join(""):1===state2.buffer.length?state2.buffer.head.data:state2.buffer.concat(state2.length),state2.buffer.clear()):ret=function(n,list,hasStrings){var ret;n<list.head.data.length?(ret=list.head.data.slice(0,n),list.head.data=list.head.data.slice(n)):ret=n===list.head.data.length?list.shift():hasStrings?function(n,list){var p=list.head,c=1,ret=p.data;n-=ret.length;for(;p=p.next;){var str=p.data,nb=n>str.length?str.length:n;if(nb===str.length?ret+=str:ret+=str.slice(0,n),0===(n-=nb)){nb===str.length?(++c,p.next?list.head=p.next:list.head=list.tail=null):(list.head=p,p.data=str.slice(nb));break}++c}return list.length-=c,ret}(n,list):function(n,list){var ret=Buffer2.allocUnsafe(n),p=list.head,c=1;p.data.copy(ret),n-=p.data.length;for(;p=p.next;){var buf=p.data,nb=n>buf.length?buf.length:n;if(buf.copy(ret,ret.length-n,0,nb),0===(n-=nb)){nb===buf.length?(++c,p.next?list.head=p.next:list.head=list.tail=null):(list.head=p,p.data=buf.slice(nb));break}++c}return list.length-=c,ret}(n,list);return ret}(n,state2.buffer,state2.decoder),ret);var ret}function endReadable(stream2){var state2=stream2._readableState;if(state2.length>0)throw new Error('"endReadable()" called on non-empty stream');state2.endEmitted||(state2.ended=!0,processNextTick2(endReadableNT,state2,stream2))}function endReadableNT(state2,stream2){state2.endEmitted||0!==state2.length||(state2.endEmitted=!0,stream2.readable=!1,stream2.emit("end"))}function indexOf(xs,x){for(var i2=0,l=xs.length;i2<l;i2++)if(xs[i2]===x)return i2;return-1}return Readable2.prototype.read=function(n){debug2("read",n),n=parseInt(n,10);var state2=this._readableState,nOrig=n;if(0!==n&&(state2.emittedReadable=!1),0===n&&state2.needReadable&&(state2.length>=state2.highWaterMark||state2.ended))return debug2("read: emitReadable",state2.length,state2.ended),0===state2.length&&state2.ended?endReadable(this):emitReadable(this),null;if(0===(n=howMuchToRead(n,state2))&&state2.ended)return 0===state2.length&&endReadable(this),null;var ret,doRead=state2.needReadable;return debug2("need readable",doRead),(0===state2.length||state2.length-n<state2.highWaterMark)&&debug2("length less than watermark",doRead=!0),state2.ended||state2.reading?debug2("reading or ended",doRead=!1):doRead&&(debug2("do read"),state2.reading=!0,state2.sync=!0,0===state2.length&&(state2.needReadable=!0),this._read(state2.highWaterMark),state2.sync=!1,state2.reading||(n=howMuchToRead(nOrig,state2))),null===(ret=n>0?fromList(n,state2):null)?(state2.needReadable=!0,n=0):state2.length-=n,0===state2.length&&(state2.ended||(state2.needReadable=!0),nOrig!==n&&state2.ended&&endReadable(this)),null!==ret&&this.emit("data",ret),ret},Readable2.prototype._read=function(n){this.emit("error",new Error("_read() is not implemented"))},Readable2.prototype.pipe=function(dest,pipeOpts){var src=this,state2=this._readableState;switch(state2.pipesCount){case 0:state2.pipes=dest;break;case 1:state2.pipes=[state2.pipes,dest];break;default:state2.pipes.push(dest)}state2.pipesCount+=1,debug2("pipe count=%d opts=%j",state2.pipesCount,pipeOpts);var endFn=(!pipeOpts||!1!==pipeOpts.end)&&dest!==process.stdout&&dest!==process.stderr?onend:unpipe;function onunpipe(readable2,unpipeInfo){debug2("onunpipe"),readable2===src&&unpipeInfo&&!1===unpipeInfo.hasUnpiped&&(unpipeInfo.hasUnpiped=!0,debug2("cleanup"),dest.removeListener("close",onclose),dest.removeListener("finish",onfinish),dest.removeListener("drain",ondrain),dest.removeListener("error",onerror),dest.removeListener("unpipe",onunpipe),src.removeListener("end",onend),src.removeListener("end",unpipe),src.removeListener("data",ondata),cleanedUp=!0,!state2.awaitDrain||dest._writableState&&!dest._writableState.needDrain||ondrain())}function onend(){debug2("onend"),dest.end()}state2.endEmitted?processNextTick2(endFn):src.once("end",endFn),dest.on("unpipe",onunpipe);var ondrain=function(src){return function(){var state2=src._readableState;debug2("pipeOnDrain",state2.awaitDrain),state2.awaitDrain&&state2.awaitDrain--,0===state2.awaitDrain&&EElistenerCount(src,"data")&&(state2.flowing=!0,flow(src))}}(src);dest.on("drain",ondrain);var cleanedUp=!1;var increasedAwaitDrain=!1;function ondata(chunk){debug2("ondata"),increasedAwaitDrain=!1,!1!==dest.write(chunk)||increasedAwaitDrain||((1===state2.pipesCount&&state2.pipes===dest||state2.pipesCount>1&&-1!==indexOf(state2.pipes,dest))&&!cleanedUp&&(debug2("false write response, pause",src._readableState.awaitDrain),src._readableState.awaitDrain++,increasedAwaitDrain=!0),src.pause())}function onerror(er){debug2("onerror",er),unpipe(),dest.removeListener("error",onerror),0===EElistenerCount(dest,"error")&&dest.emit("error",er)}function onclose(){dest.removeListener("finish",onfinish),unpipe()}function onfinish(){debug2("onfinish"),dest.removeListener("close",onclose),unpipe()}function unpipe(){debug2("unpipe"),src.unpipe(dest)}return src.on("data",ondata),function(emitter,event,fn){if("function"==typeof emitter.prependListener)return emitter.prependListener(event,fn);emitter._events&&emitter._events[event]?isArray2(emitter._events[event])?emitter._events[event].unshift(fn):emitter._events[event]=[fn,emitter._events[event]]:emitter.on(event,fn)}(dest,"error",onerror),dest.once("close",onclose),dest.once("finish",onfinish),dest.emit("pipe",src),state2.flowing||(debug2("pipe resume"),src.resume()),dest},Readable2.prototype.unpipe=function(dest){var state2=this._readableState,unpipeInfo={hasUnpiped:!1};if(0===state2.pipesCount)return this;if(1===state2.pipesCount)return dest&&dest!==state2.pipes||(dest||(dest=state2.pipes),state2.pipes=null,state2.pipesCount=0,state2.flowing=!1,dest&&dest.emit("unpipe",this,unpipeInfo)),this;if(!dest){var dests=state2.pipes,len2=state2.pipesCount;state2.pipes=null,state2.pipesCount=0,state2.flowing=!1;for(var i2=0;i2<len2;i2++)dests[i2].emit("unpipe",this,unpipeInfo);return this}var index2=indexOf(state2.pipes,dest);return-1===index2||(state2.pipes.splice(index2,1),state2.pipesCount-=1,1===state2.pipesCount&&(state2.pipes=state2.pipes[0]),dest.emit("unpipe",this,unpipeInfo)),this},Readable2.prototype.on=function(ev,fn){var res=Stream2.prototype.on.call(this,ev,fn);if("data"===ev)!1!==this._readableState.flowing&&this.resume();else if("readable"===ev){var state2=this._readableState;state2.endEmitted||state2.readableListening||(state2.readableListening=state2.needReadable=!0,state2.emittedReadable=!1,state2.reading?state2.length&&emitReadable(this):processNextTick2(nReadingNextTick,this))}return res},Readable2.prototype.addListener=Readable2.prototype.on,Readable2.prototype.resume=function(){var state2=this._readableState;return state2.flowing||(debug2("resume"),state2.flowing=!0,function(stream2,state2){state2.resumeScheduled||(state2.resumeScheduled=!0,processNextTick2(resume_,stream2,state2))}(this,state2)),this},Readable2.prototype.pause=function(){return debug2("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug2("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable2.prototype.wrap=function(stream2){var state2=this._readableState,paused=!1,self2=this;for(var i2 in stream2.on("end",(function(){if(debug2("wrapped end"),state2.decoder&&!state2.ended){var chunk=state2.decoder.end();chunk&&chunk.length&&self2.push(chunk)}self2.push(null)})),stream2.on("data",(function(chunk){(debug2("wrapped data"),state2.decoder&&(chunk=state2.decoder.write(chunk)),state2.objectMode&&null==chunk)||(state2.objectMode||chunk&&chunk.length)&&(self2.push(chunk)||(paused=!0,stream2.pause()))})),stream2)void 0===this[i2]&&"function"==typeof stream2[i2]&&(this[i2]=function(method){return function(){return stream2[method].apply(stream2,arguments)}}(i2));for(var n=0;n<kProxyEvents.length;n++)stream2.on(kProxyEvents[n],self2.emit.bind(self2,kProxyEvents[n]));return self2._read=function(n2){debug2("wrapped _read",n2),paused&&(paused=!1,stream2.resume())},self2},Readable2._fromList=fromList,_stream_readable$1}var _stream_transform$1=Transform$3,Duplex$1=require_stream_duplex$1(),util$3=util$4;function TransformState(stream2){this.afterTransform=function(er,data){return function(stream2,er,data){var ts=stream2._transformState;ts.transforming=!1;var cb=ts.writecb;if(!cb)return stream2.emit("error",new Error("write callback called multiple times"));ts.writechunk=null,ts.writecb=null,null!=data&&stream2.push(data);cb(er);var rs=stream2._readableState;rs.reading=!1,(rs.needReadable||rs.length<rs.highWaterMark)&&stream2._read(rs.highWaterMark)}(stream2,er,data)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function Transform$3(options){if(!(this instanceof Transform$3))return new Transform$3(options);Duplex$1.call(this,options),this._transformState=new TransformState(this);var stream2=this;this._readableState.needReadable=!0,this._readableState.sync=!1,options&&("function"==typeof options.transform&&(this._transform=options.transform),"function"==typeof options.flush&&(this._flush=options.flush)),this.once("prefinish",(function(){"function"==typeof this._flush?this._flush((function(er,data){done$1(stream2,er,data)})):done$1(stream2)}))}function done$1(stream2,er,data){if(er)return stream2.emit("error",er);null!=data&&stream2.push(data);var ws=stream2._writableState,ts=stream2._transformState;if(ws.length)throw new Error("Calling transform done when ws.length != 0");if(ts.transforming)throw new Error("Calling transform done when still transforming");return stream2.push(null)}util$3.inherits=inherits_browserExports,util$3.inherits(Transform$3,Duplex$1),Transform$3.prototype.push=function(chunk,encoding){return this._transformState.needTransform=!1,Duplex$1.prototype.push.call(this,chunk,encoding)},Transform$3.prototype._transform=function(chunk,encoding,cb){throw new Error("_transform() is not implemented")},Transform$3.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;if(ts.writecb=cb,ts.writechunk=chunk,ts.writeencoding=encoding,!ts.transforming){var rs=this._readableState;(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)&&this._read(rs.highWaterMark)}},Transform$3.prototype._read=function(n){var ts=this._transformState;null!==ts.writechunk&&ts.writecb&&!ts.transforming?(ts.transforming=!0,this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform)):ts.needTransform=!0},Transform$3.prototype._destroy=function(err,cb){var _this=this;Duplex$1.prototype._destroy.call(this,err,(function(err2){cb(err2),_this.emit("close")}))};var exports,_stream_passthrough$1=PassThrough$1,Transform$2=_stream_transform$1,util$2=util$4;function PassThrough$1(options){if(!(this instanceof PassThrough$1))return new PassThrough$1(options);Transform$2.call(this,options)}util$2.inherits=inherits_browserExports,util$2.inherits(PassThrough$1,Transform$2),PassThrough$1.prototype._transform=function(chunk,encoding,cb){cb(null,chunk)},exports=readableBrowserExports$1,(exports=readableBrowser$1.exports=require_stream_readable$1()).Stream=exports,exports.Readable=exports,exports.Writable=require_stream_writable$1(),exports.Duplex=require_stream_duplex$1(),exports.Transform=_stream_transform$1,exports.PassThrough=_stream_passthrough$1,Object.defineProperty(BasePostMessageStream$1,"__esModule",{value:!0}),BasePostMessageStream$1.BasePostMessageStream=void 0;const readable_stream_1$4=readableBrowserExports$1,noop$2=()=>{};class BasePostMessageStream extends readable_stream_1$4.Duplex{constructor(){super({objectMode:!0}),this._init=!1,this._haveSyn=!1}_handshake(){this._write("SYN",null,noop$2),this.cork()}_onData(data){if(this._init)try{this.push(data)}catch(err){this.emit("error",err)}else"SYN"===data?(this._haveSyn=!0,this._write("ACK",null,noop$2)):"ACK"===data&&(this._init=!0,this._haveSyn||this._write("ACK",null,noop$2),this.uncork())}_read(){}_write(data,_encoding,cb){this._postMessage(data),cb()}}BasePostMessageStream$1.BasePostMessageStream=BasePostMessageStream;var utils$2={},dist$5={},assert$2={};class StructError extends TypeError{constructor(failure,failures){let cached;const{message:message,explanation:explanation,...rest}=failure,{path:path}=failure,msg=0===path.length?message:`At path: ${path.join(".")} -- ${message}`;super(explanation??msg),null!=explanation&&(this.cause=msg),Object.assign(this,rest),this.name=this.constructor.name,this.failures=()=>cached??(cached=[failure,...failures()])}}function isObject(x){return"object"==typeof x&&null!=x}function isPlainObject(x){if("[object Object]"!==Object.prototype.toString.call(x))return!1;const prototype=Object.getPrototypeOf(x);return null===prototype||prototype===Object.prototype}function print(value){return"symbol"==typeof value?value.toString():"string"==typeof value?JSON.stringify(value):`${value}`}function toFailure(result,context,struct2,value){if(!0===result)return;!1===result?result={}:"string"==typeof result&&(result={message:result});const{path:path,branch:branch}=context,{type:type2}=struct2,{refinement:refinement,message:message=`Expected a value of type \`${type2}\`${refinement?` with refinement \`${refinement}\``:""}, but received: \`${print(value)}\``}=result;return{value:value,type:type2,refinement:refinement,key:path[path.length-1],path:path,branch:branch,...result,message:message}}function*toFailures(result,context,struct2,value){var x;isObject(x=result)&&"function"==typeof x[Symbol.iterator]||(result=[result]);for(const r of result){const failure=toFailure(r,context,struct2,value);failure&&(yield failure)}}function*run(value,struct2,options={}){const{path:path=[],branch:branch=[value],coerce:coerce2=!1,mask:mask2=!1}=options,ctx={path:path,branch:branch};if(coerce2&&(value=struct2.coercer(value,ctx),mask2&&"type"!==struct2.type&&isObject(struct2.schema)&&isObject(value)&&!Array.isArray(value)))for(const key in value)void 0===struct2.schema[key]&&delete value[key];let status="valid";for(const failure of struct2.validator(value,ctx))failure.explanation=options.message,status="not_valid",yield[failure,void 0];for(let[k,v,s]of struct2.entries(value,ctx)){const ts=run(v,s,{path:void 0===k?path:[...path,k],branch:void 0===k?branch:[...branch,v],coerce:coerce2,mask:mask2,message:options.message});for(const t2 of ts)t2[0]?(status=null!=t2[0].refinement?"not_refined":"not_valid",yield[t2[0],void 0]):coerce2&&(v=t2[1],void 0===k?value=v:value instanceof Map?value.set(k,v):value instanceof Set?value.add(v):isObject(value)&&(void 0!==v||k in value)&&(value[k]=v))}if("not_valid"!==status)for(const failure of struct2.refiner(value,ctx))failure.explanation=options.message,status="not_refined",yield[failure,void 0];"valid"===status&&(yield[void 0,value])}class Struct{constructor(props){const{type:type2,schema:schema,validator:validator,refiner:refiner,coercer:coercer=(value=>value),entries:entries=function*(){}}=props;this.type=type2,this.schema=schema,this.entries=entries,this.coercer=coercer,this.validator=validator?(value,context)=>toFailures(validator(value,context),context,this,value):()=>[],this.refiner=refiner?(value,context)=>toFailures(refiner(value,context),context,this,value):()=>[]}assert(value,message){return assert$1(value,this,message)}create(value,message){return create(value,this,message)}is(value){return is(value,this)}mask(value,message){return mask(value,this,message)}validate(value,options={}){return validate(value,this,options)}}function assert$1(value,struct2,message){const result=validate(value,struct2,{message:message});if(result[0])throw result[0]}function create(value,struct2,message){const result=validate(value,struct2,{coerce:!0,message:message});if(result[0])throw result[0];return result[1]}function mask(value,struct2,message){const result=validate(value,struct2,{coerce:!0,mask:!0,message:message});if(result[0])throw result[0];return result[1]}function is(value,struct2){return!validate(value,struct2)[0]}function validate(value,struct2,options={}){const tuples=run(value,struct2,options),tuple2=function(input){const{done:done2,value:value}=input.next();return done2?void 0:value}(tuples);if(tuple2[0]){return[new StructError(tuple2[0],(function*(){for(const t2 of tuples)t2[0]&&(yield t2[0])})),void 0]}return[void 0,tuple2[1]]}function define(name,validator){return new Struct({type:name,schema:null,validator:validator})}function never(){return define("never",(()=>!1))}function object(schema){const knowns=schema?Object.keys(schema):[],Never=never();return new Struct({type:"object",schema:schema||null,*entries(value){if(schema&&isObject(value)){const unknowns=new Set(Object.keys(value));for(const key of knowns)unknowns.delete(key),yield[key,value[key],schema[key]];for(const key of unknowns)yield[key,value[key],Never]}},validator:value=>isObject(value)||`Expected an object, but received: ${print(value)}`,coercer:value=>isObject(value)?{...value}:value})}function optional(struct2){return new Struct({...struct2,validator:(value,ctx)=>void 0===value||struct2.validator(value,ctx),refiner:(value,ctx)=>void 0===value||struct2.refiner(value,ctx)})}function string(){return define("string",(value=>"string"==typeof value||`Expected a string, but received: ${print(value)}`))}function type(schema){const keys=Object.keys(schema);return new Struct({type:"type",schema:schema,*entries(value){if(isObject(value))for(const k of keys)yield[k,value[k],schema[k]]},validator:value=>isObject(value)||`Expected an object, but received: ${print(value)}`,coercer:value=>isObject(value)?{...value}:value})}function unknown(){return define("unknown",(()=>!0))}function coerce$2(struct2,condition,coercer){return new Struct({...struct2,coercer:(value,ctx)=>is(value,condition)?struct2.coercer(coercer(value,ctx),ctx):struct2.coercer(value,ctx)})}function getSize(value){return value instanceof Map||value instanceof Set?value.size:value.length}function refine(struct2,name,refiner){return new Struct({...struct2,*refiner(value,ctx){yield*struct2.refiner(value,ctx);const failures=toFailures(refiner(value,ctx),ctx,struct2,value);for(const failure of failures)yield{...failure,refinement:name}}})}const require$$1=getAugmentedNamespace(Object.freeze(Object.defineProperty({__proto__:null,Struct:Struct,StructError:StructError,any:function(){return define("any",(()=>!0))},array:function(Element){return new Struct({type:"array",schema:Element,*entries(value){if(Element&&Array.isArray(value))for(const[i2,v]of value.entries())yield[i2,v,Element]},coercer:value=>Array.isArray(value)?value.slice():value,validator:value=>Array.isArray(value)||`Expected an array value, but received: ${print(value)}`})},assert:assert$1,assign:function(...Structs){const isType="type"===Structs[0].type,schemas=Structs.map((s=>s.schema)),schema=Object.assign({},...schemas);return isType?type(schema):object(schema)},bigint:function(){return define("bigint",(value=>"bigint"==typeof value))},boolean:function(){return define("boolean",(value=>"boolean"==typeof value))},coerce:coerce$2,create:create,date:function(){return define("date",(value=>value instanceof Date&&!isNaN(value.getTime())||`Expected a valid \`Date\` object, but received: ${print(value)}`))},defaulted:function(struct2,fallback,options={}){return coerce$2(struct2,unknown(),(x=>{const f="function"==typeof fallback?fallback():fallback;if(void 0===x)return f;if(!options.strict&&isPlainObject(x)&&isPlainObject(f)){const ret={...x};let changed=!1;for(const key in f)void 0===ret[key]&&(ret[key]=f[key],changed=!0);if(changed)return ret}return x}))},define:define,deprecated:function(struct2,log){return new Struct({...struct2,refiner:(value,ctx)=>void 0===value||struct2.refiner(value,ctx),validator:(value,ctx)=>void 0===value||(log(value,ctx),struct2.validator(value,ctx))})},dynamic:function(fn){return new Struct({type:"dynamic",schema:null,*entries(value,ctx){const struct2=fn(value,ctx);yield*struct2.entries(value,ctx)},validator:(value,ctx)=>fn(value,ctx).validator(value,ctx),coercer:(value,ctx)=>fn(value,ctx).coercer(value,ctx),refiner:(value,ctx)=>fn(value,ctx).refiner(value,ctx)})},empty:function(struct2){return refine(struct2,"empty",(value=>{const size2=getSize(value);return 0===size2||`Expected an empty ${struct2.type} but received one with a size of \`${size2}\``}))},enums:function(values){const schema={},description=values.map((v=>print(v))).join();for(const key of values)schema[key]=key;return new Struct({type:"enums",schema:schema,validator:value=>values.includes(value)||`Expected one of \`${description}\`, but received: ${print(value)}`})},func:function(){return define("func",(value=>"function"==typeof value||`Expected a function, but received: ${print(value)}`))},instance:function(Class){return define("instance",(value=>value instanceof Class||`Expected a \`${Class.name}\` instance, but received: ${print(value)}`))},integer:function(){return define("integer",(value=>"number"==typeof value&&!isNaN(value)&&Number.isInteger(value)||`Expected an integer, but received: ${print(value)}`))},intersection:function(Structs){return new Struct({type:"intersection",schema:null,*entries(value,ctx){for(const S of Structs)yield*S.entries(value,ctx)},*validator(value,ctx){for(const S of Structs)yield*S.validator(value,ctx)},*refiner(value,ctx){for(const S of Structs)yield*S.refiner(value,ctx)}})},is:is,lazy:function(fn){let struct2;return new Struct({type:"lazy",schema:null,*entries(value,ctx){struct2??(struct2=fn()),yield*struct2.entries(value,ctx)},validator:(value,ctx)=>(struct2??(struct2=fn()),struct2.validator(value,ctx)),coercer:(value,ctx)=>(struct2??(struct2=fn()),struct2.coercer(value,ctx)),refiner:(value,ctx)=>(struct2??(struct2=fn()),struct2.refiner(value,ctx))})},literal:function(constant){const description=print(constant),t2=typeof constant;return new Struct({type:"literal",schema:"string"===t2||"number"===t2||"boolean"===t2?constant:null,validator:value=>value===constant||`Expected the literal \`${description}\`, but received: ${print(value)}`})},map:function(Key,Value){return new Struct({type:"map",schema:null,*entries(value){if(Key&&Value&&value instanceof Map)for(const[k,v]of value.entries())yield[k,k,Key],yield[k,v,Value]},coercer:value=>value instanceof Map?new Map(value):value,validator:value=>value instanceof Map||`Expected a \`Map\` object, but received: ${print(value)}`})},mask:mask,max:function(struct2,threshold,options={}){const{exclusive:exclusive}=options;return refine(struct2,"max",(value=>exclusive?value<threshold:value<=threshold||`Expected a ${struct2.type} less than ${exclusive?"":"or equal to "}${threshold} but received \`${value}\``))},min:function(struct2,threshold,options={}){const{exclusive:exclusive}=options;return refine(struct2,"min",(value=>exclusive?value>threshold:value>=threshold||`Expected a ${struct2.type} greater than ${exclusive?"":"or equal to "}${threshold} but received \`${value}\``))},never:never,nonempty:function(struct2){return refine(struct2,"nonempty",(value=>getSize(value)>0||`Expected a nonempty ${struct2.type} but received an empty one`))},nullable:function(struct2){return new Struct({...struct2,validator:(value,ctx)=>null===value||struct2.validator(value,ctx),refiner:(value,ctx)=>null===value||struct2.refiner(value,ctx)})},number:function(){return define("number",(value=>"number"==typeof value&&!isNaN(value)||`Expected a number, but received: ${print(value)}`))},object:object,omit:function(struct2,keys){const{schema:schema}=struct2,subschema={...schema};for(const key of keys)delete subschema[key];return"type"===struct2.type?type(subschema):object(subschema)},optional:optional,partial:function(struct2){const schema=struct2 instanceof Struct?{...struct2.schema}:{...struct2};for(const key in schema)schema[key]=optional(schema[key]);return object(schema)},pattern:function(struct2,regexp2){return refine(struct2,"pattern",(value=>regexp2.test(value)||`Expected a ${struct2.type} matching \`/${regexp2.source}/\` but received "${value}"`))},pick:function(struct2,keys){const{schema:schema}=struct2,subschema={};for(const key of keys)subschema[key]=schema[key];return object(subschema)},record:function(Key,Value){return new Struct({type:"record",schema:null,*entries(value){if(isObject(value))for(const k in value){const v=value[k];yield[k,k,Key],yield[k,v,Value]}},validator:value=>isObject(value)||`Expected an object, but received: ${print(value)}`})},refine:refine,regexp:function(){return define("regexp",(value=>value instanceof RegExp))},set:function(Element){return new Struct({type:"set",schema:null,*entries(value){if(Element&&value instanceof Set)for(const v of value)yield[v,v,Element]},coercer:value=>value instanceof Set?new Set(value):value,validator:value=>value instanceof Set||`Expected a \`Set\` object, but received: ${print(value)}`})},size:function(struct2,min2,max2=min2){const expected=`Expected a ${struct2.type}`,of=min2===max2?`of \`${min2}\``:`between \`${min2}\` and \`${max2}\``;return refine(struct2,"size",(value=>{if("number"==typeof value||value instanceof Date)return min2<=value&&value<=max2||`${expected} ${of} but received \`${value}\``;if(value instanceof Map||value instanceof Set){const{size:size2}=value;return min2<=size2&&size2<=max2||`${expected} with a size ${of} but received one with a size of \`${size2}\``}{const{length:length}=value;return min2<=length&&length<=max2||`${expected} with a length ${of} but received one with a length of \`${length}\``}}))},string:string,struct:function(name,validator){return console.warn("superstruct@0.11 - The `struct` helper has been renamed to `define`."),define(name,validator)},trimmed:function(struct2){return coerce$2(struct2,string(),(x=>x.trim()))},tuple:function(Structs){const Never=never();return new Struct({type:"tuple",schema:null,*entries(value){if(Array.isArray(value)){const length=Math.max(Structs.length,value.length);for(let i2=0;i2<length;i2++)yield[i2,value[i2],Structs[i2]||Never]}},validator:value=>Array.isArray(value)||`Expected an array, but received: ${print(value)}`})},type:type,union:function(Structs){const description=Structs.map((s=>s.type)).join(" | ");return new Struct({type:"union",schema:null,coercer(value){for(const S of Structs){const[error,coerced]=S.validate(value,{coerce:!0});if(!error)return coerced}return value},validator(value,ctx){const failures=[];for(const S of Structs){const[...tuples]=run(value,S,ctx),[first]=tuples;if(!first[0])return[];for(const[failure]of tuples)failure&&failures.push(failure)}return[`Expected the value to satisfy a union of \`${description}\`, but received: ${print(value)}`,...failures]}})},unknown:unknown,validate:validate},Symbol.toStringTag,{value:"Module"})));Object.defineProperty(assert$2,"__esModule",{value:!0}),assert$2.assertExhaustive=assert$2.assertStruct=assert$2.assert=assert$2.AssertionError=void 0;const superstruct_1$3=require$$1;function getError(ErrorWrapper,message){return fn=ErrorWrapper,Boolean("string"==typeof(null===(_b=null===(_a=null==fn?void 0:fn.prototype)||void 0===_a?void 0:_a.constructor)||void 0===_b?void 0:_b.name))?new ErrorWrapper({message:message}):ErrorWrapper({message:message});var fn,_a,_b}class AssertionError extends Error{constructor(options){super(options.message),this.code="ERR_ASSERTION"}}assert$2.AssertionError=AssertionError,assert$2.assert=function(value,message="Assertion failed.",ErrorWrapper=AssertionError){if(!value){if(message instanceof Error)throw message;throw getError(ErrorWrapper,message)}},assert$2.assertStruct=function(value,struct2,errorPrefix="Assertion failed",ErrorWrapper=AssertionError){try{(0,superstruct_1$3.assert)(value,struct2)}catch(error){throw getError(ErrorWrapper,`${errorPrefix}: ${function(error){const message=function(error){return"object"==typeof error&&null!==error&&"message"in error}(error)?error.message:String(error);return message.endsWith(".")?message.slice(0,-1):message}(error)}.`)}},assert$2.assertExhaustive=function(_object){throw new Error("Invalid branch reached. Should be detected during compilation.")};var base64$1={};Object.defineProperty(base64$1,"__esModule",{value:!0}),base64$1.base64=void 0;const superstruct_1$2=require$$1,assert_1$3=assert$2;base64$1.base64=(struct2,options={})=>{var _a,_b;const paddingRequired=null!==(_a=options.paddingRequired)&&void 0!==_a&&_a,characterSet=null!==(_b=options.characterSet)&&void 0!==_b?_b:"base64";let letters,re2;return"base64"===characterSet?letters=String.raw`[A-Za-z0-9+\/]`:((0,assert_1$3.assert)("base64url"===characterSet),letters=String.raw`[-_A-Za-z0-9]`),re2=paddingRequired?new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`,"u"):new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`,"u"),(0,superstruct_1$2.pattern)(struct2,re2)};var bytes={},hex={};!function(exports){Object.defineProperty(exports,"__esModule",{value:!0}),exports.remove0x=exports.add0x=exports.assertIsStrictHexString=exports.assertIsHexString=exports.isStrictHexString=exports.isHexString=exports.StrictHexStruct=exports.HexStruct=void 0;const superstruct_12=require$$1,assert_12=assert$2;function isHexString(value){return(0,superstruct_12.is)(value,exports.HexStruct)}function isStrictHexString(value){return(0,superstruct_12.is)(value,exports.StrictHexStruct)}exports.HexStruct=(0,superstruct_12.pattern)((0,superstruct_12.string)(),/^(?:0x)?[0-9a-f]+$/iu),exports.StrictHexStruct=(0,superstruct_12.pattern)((0,superstruct_12.string)(),/^0x[0-9a-f]+$/iu),exports.isHexString=isHexString,exports.isStrictHexString=isStrictHexString,exports.assertIsHexString=function(value){(0,assert_12.assert)(isHexString(value),"Value must be a hexadecimal string.")},exports.assertIsStrictHexString=function(value){(0,assert_12.assert)(isStrictHexString(value),'Value must be a hexadecimal string, starting with "0x".')},exports.add0x=function(hexadecimal){return hexadecimal.startsWith("0x")?hexadecimal:hexadecimal.startsWith("0X")?`0x${hexadecimal.substring(2)}`:`0x${hexadecimal}`},exports.remove0x=function(hexadecimal){return hexadecimal.startsWith("0x")||hexadecimal.startsWith("0X")?hexadecimal.substring(2):hexadecimal}}(hex),Object.defineProperty(bytes,"__esModule",{value:!0}),bytes.createDataView=bytes.concatBytes=bytes.valueToBytes=bytes.stringToBytes=bytes.numberToBytes=bytes.signedBigIntToBytes=bytes.bigIntToBytes=bytes.hexToBytes=bytes.bytesToString=bytes.bytesToNumber=bytes.bytesToSignedBigInt=bytes.bytesToBigInt=bytes.bytesToHex=bytes.assertIsBytes=bytes.isBytes=void 0;const assert_1$2=assert$2,hex_1$2=hex,HEX_MINIMUM_NUMBER_CHARACTER=48,HEX_MAXIMUM_NUMBER_CHARACTER=58,HEX_CHARACTER_OFFSET=87;const getPrecomputedHexValues=function(){const lookupTable=[];return()=>{if(0===lookupTable.length)for(let i2=0;i2<256;i2++)lookupTable.push(i2.toString(16).padStart(2,"0"));return lookupTable}}();function isBytes(value){return value instanceof Uint8Array}function assertIsBytes(value){(0,assert_1$2.assert)(isBytes(value),"Value must be a Uint8Array.")}function bytesToHex(bytes2){if(assertIsBytes(bytes2),0===bytes2.length)return"0x";const lookupTable=getPrecomputedHexValues(),hexadecimal=new Array(bytes2.length);for(let i2=0;i2<bytes2.length;i2++)hexadecimal[i2]=lookupTable[bytes2[i2]];return(0,hex_1$2.add0x)(hexadecimal.join(""))}function bytesToBigInt(bytes2){assertIsBytes(bytes2);const hexadecimal=bytesToHex(bytes2);return BigInt(hexadecimal)}function hexToBytes(value){var _a;if("0x"===(null===(_a=null==value?void 0:value.toLowerCase)||void 0===_a?void 0:_a.call(value)))return new Uint8Array;(0,hex_1$2.assertIsHexString)(value);const strippedValue=(0,hex_1$2.remove0x)(value).toLowerCase(),normalizedValue=strippedValue.length%2==0?strippedValue:`0${strippedValue}`,bytes2=new Uint8Array(normalizedValue.length/2);for(let i2=0;i2<bytes2.length;i2++){const c1=normalizedValue.charCodeAt(2*i2),c2=normalizedValue.charCodeAt(2*i2+1),n1=c1-(c1<HEX_MAXIMUM_NUMBER_CHARACTER?HEX_MINIMUM_NUMBER_CHARACTER:HEX_CHARACTER_OFFSET),n2=c2-(c2<HEX_MAXIMUM_NUMBER_CHARACTER?HEX_MINIMUM_NUMBER_CHARACTER:HEX_CHARACTER_OFFSET);bytes2[i2]=16*n1+n2}return bytes2}function bigIntToBytes(value){(0,assert_1$2.assert)("bigint"==typeof value,"Value must be a bigint."),(0,assert_1$2.assert)(value>=BigInt(0),"Value must be a non-negative bigint.");return hexToBytes(value.toString(16))}function numberToBytes(value){(0,assert_1$2.assert)("number"==typeof value,"Value must be a number."),(0,assert_1$2.assert)(value>=0,"Value must be a non-negative number."),(0,assert_1$2.assert)(Number.isSafeInteger(value),"Value is not a safe integer. Use `bigIntToBytes` instead.");return hexToBytes(value.toString(16))}function stringToBytes(value){return(0,assert_1$2.assert)("string"==typeof value,"Value must be a string."),(new TextEncoder).encode(value)}function valueToBytes(value){if("bigint"==typeof value)return bigIntToBytes(value);if("number"==typeof value)return numberToBytes(value);if("string"==typeof value)return value.startsWith("0x")?hexToBytes(value):stringToBytes(value);if(isBytes(value))return value;throw new TypeError(`Unsupported value type: "${typeof value}".`)}bytes.isBytes=isBytes,bytes.assertIsBytes=assertIsBytes,bytes.bytesToHex=bytesToHex,bytes.bytesToBigInt=bytesToBigInt,bytes.bytesToSignedBigInt=function(bytes2){assertIsBytes(bytes2);let value=BigInt(0);for(const byte of bytes2)value=(value<<BigInt(8))+BigInt(byte);return BigInt.asIntN(8*bytes2.length,value)},bytes.bytesToNumber=function(bytes2){assertIsBytes(bytes2);const bigint2=bytesToBigInt(bytes2);return(0,assert_1$2.assert)(bigint2<=BigInt(Number.MAX_SAFE_INTEGER),"Number is not a safe integer. Use `bytesToBigInt` instead."),Number(bigint2)},bytes.bytesToString=function(bytes2){return assertIsBytes(bytes2),(new TextDecoder).decode(bytes2)},bytes.hexToBytes=hexToBytes,bytes.bigIntToBytes=bigIntToBytes,bytes.signedBigIntToBytes=function(value,byteLength2){(0,assert_1$2.assert)("bigint"==typeof value,"Value must be a bigint."),(0,assert_1$2.assert)("number"==typeof byteLength2,"Byte length must be a number."),(0,assert_1$2.assert)(byteLength2>0,"Byte length must be greater than 0."),(0,assert_1$2.assert)(function(value,bytes2){(0,assert_1$2.assert)(bytes2>0);const mask2=value>>BigInt(31);return!((~value&mask2)+(value&~mask2)>>BigInt(8*bytes2-1))}(value,byteLength2),"Byte length is too small to represent the given value.");let numberValue=value;const bytes2=new Uint8Array(byteLength2);for(let i2=0;i2<bytes2.length;i2++)bytes2[i2]=Number(BigInt.asUintN(8,numberValue)),numberValue>>=BigInt(8);return bytes2.reverse()},bytes.numberToBytes=numberToBytes,bytes.stringToBytes=stringToBytes,bytes.valueToBytes=valueToBytes,bytes.concatBytes=function(values){const normalizedValues=new Array(values.length);let byteLength2=0;for(let i2=0;i2<values.length;i2++){const value=valueToBytes(values[i2]);normalizedValues[i2]=value,byteLength2+=value.length}const bytes2=new Uint8Array(byteLength2);for(let i2=0,offset=0;i2<normalizedValues.length;i2++)bytes2.set(normalizedValues[i2],offset),offset+=normalizedValues[i2].length;return bytes2},bytes.createDataView=function(bytes2){if("undefined"!=typeof Buffer&&bytes2 instanceof Buffer){const buffer2=bytes2.buffer.slice(bytes2.byteOffset,bytes2.byteOffset+bytes2.byteLength);return new DataView(buffer2)}return new DataView(bytes2.buffer,bytes2.byteOffset,bytes2.byteLength)};var checksum={};Object.defineProperty(checksum,"__esModule",{value:!0}),checksum.ChecksumStruct=void 0;const superstruct_1$1=require$$1,base64_1=base64$1;checksum.ChecksumStruct=(0,superstruct_1$1.size)((0,base64_1.base64)((0,superstruct_1$1.string)(),{paddingRequired:!0}),44,44);var coercers={};Object.defineProperty(coercers,"__esModule",{value:!0}),coercers.createHex=coercers.createBytes=coercers.createBigInt=coercers.createNumber=void 0;const superstruct_1=require$$1,assert_1$1=assert$2,bytes_1=bytes,hex_1$1=hex,NumberLikeStruct=(0,superstruct_1.union)([(0,superstruct_1.number)(),(0,superstruct_1.bigint)(),(0,superstruct_1.string)(),hex_1$1.StrictHexStruct]),NumberCoercer=(0,superstruct_1.coerce)((0,superstruct_1.number)(),NumberLikeStruct,Number),BigIntCoercer=(0,superstruct_1.coerce)((0,superstruct_1.bigint)(),NumberLikeStruct,BigInt);(0,superstruct_1.union)([hex_1$1.StrictHexStruct,(0,superstruct_1.instance)(Uint8Array)]);const BytesCoercer=(0,superstruct_1.coerce)((0,superstruct_1.instance)(Uint8Array),(0,superstruct_1.union)([hex_1$1.StrictHexStruct]),bytes_1.hexToBytes),HexCoercer=(0,superstruct_1.coerce)(hex_1$1.StrictHexStruct,(0,superstruct_1.instance)(Uint8Array),bytes_1.bytesToHex);coercers.createNumber=function(value){try{const result=(0,superstruct_1.create)(value,NumberCoercer);return(0,assert_1$1.assert)(Number.isFinite(result),`Expected a number-like value, got "${value}".`),result}catch(error){if(error instanceof superstruct_1.StructError)throw new Error(`Expected a number-like value, got "${value}".`);throw error}},coercers.createBigInt=function(value){try{return(0,superstruct_1.create)(value,BigIntCoercer)}catch(error){if(error instanceof superstruct_1.StructError)throw new Error(`Expected a number-like value, got "${String(error.value)}".`);throw error}},coercers.createBytes=function(value){if("string"==typeof value&&"0x"===value.toLowerCase())return new Uint8Array;try{return(0,superstruct_1.create)(value,BytesCoercer)}catch(error){if(error instanceof superstruct_1.StructError)throw new Error(`Expected a bytes-like value, got "${String(error.value)}".`);throw error}},coercers.createHex=function(value){if(value instanceof Uint8Array&&0===value.length||"string"==typeof value&&"0x"===value.toLowerCase())return"0x";try{return(0,superstruct_1.create)(value,HexCoercer)}catch(error){if(error instanceof superstruct_1.StructError)throw new Error(`Expected a bytes-like value, got "${String(error.value)}".`);throw error}};var _FrozenMap_map,_FrozenSet_set,collections={},__classPrivateFieldSet$1=commonjsGlobal&&commonjsGlobal.__classPrivateFieldSet||function(receiver,state2,value,kind,f){if("m"===kind)throw new TypeError("Private method is not writable");if("a"===kind&&!f)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof state2?receiver!==state2||!f:!state2.has(receiver))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===kind?f.call(receiver,value):f?f.value=value:state2.set(receiver,value),value},__classPrivateFieldGet$1=commonjsGlobal&&commonjsGlobal.__classPrivateFieldGet||function(receiver,state2,kind,f){if("a"===kind&&!f)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof state2?receiver!==state2||!f:!state2.has(receiver))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===kind?f:"a"===kind?f.call(receiver):f?f.value:state2.get(receiver)};Object.defineProperty(collections,"__esModule",{value:!0}),collections.FrozenSet=collections.FrozenMap=void 0;class FrozenMap{constructor(entries){_FrozenMap_map.set(this,void 0),__classPrivateFieldSet$1(this,_FrozenMap_map,new Map(entries),"f"),Object.freeze(this)}get size(){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f").size}[(_FrozenMap_map=new WeakMap,Symbol.iterator)](){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f")[Symbol.iterator]()}entries(){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f").entries()}forEach(callbackfn,thisArg){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f").forEach(((value,key,_map)=>callbackfn.call(thisArg,value,key,this)))}get(key){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f").get(key)}has(key){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f").has(key)}keys(){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f").keys()}values(){return __classPrivateFieldGet$1(this,_FrozenMap_map,"f").values()}toString(){return`FrozenMap(${this.size}) {${this.size>0?` ${[...this.entries()].map((([key,value])=>`${String(key)} => ${String(value)}`)).join(", ")} `:""}}`}}collections.FrozenMap=FrozenMap;class FrozenSet{constructor(values){_FrozenSet_set.set(this,void 0),__classPrivateFieldSet$1(this,_FrozenSet_set,new Set(values),"f"),Object.freeze(this)}get size(){return __classPrivateFieldGet$1(this,_FrozenSet_set,"f").size}[(_FrozenSet_set=new WeakMap,Symbol.iterator)](){return __classPrivateFieldGet$1(this,_FrozenSet_set,"f")[Symbol.iterator]()}entries(){return __classPrivateFieldGet$1(this,_FrozenSet_set,"f").entries()}forEach(callbackfn,thisArg){return __classPrivateFieldGet$1(this,_FrozenSet_set,"f").forEach(((value,value2,_set)=>callbackfn.call(thisArg,value,value2,this)))}has(value){return __classPrivateFieldGet$1(this,_FrozenSet_set,"f").has(value)}keys(){return __classPrivateFieldGet$1(this,_FrozenSet_set,"f").keys()}values(){return __classPrivateFieldGet$1(this,_FrozenSet_set,"f").values()}toString(){return`FrozenSet(${this.size}) {${this.size>0?` ${[...this.values()].map((member=>String(member))).join(", ")} `:""}}`}}collections.FrozenSet=FrozenSet,Object.freeze(FrozenMap),Object.freeze(FrozenMap.prototype),Object.freeze(FrozenSet),Object.freeze(FrozenSet.prototype);var json={},misc={};!function(exports){Object.defineProperty(exports,"__esModule",{value:!0}),exports.calculateNumberSize=exports.calculateStringSize=exports.isASCII=exports.isPlainObject=exports.ESCAPE_CHARACTERS_REGEXP=exports.JsonSize=exports.hasProperty=exports.isObject=exports.isNullOrUndefined=exports.isNonEmptyArray=void 0,exports.isNonEmptyArray=function(value){return Array.isArray(value)&&value.length>0},exports.isNullOrUndefined=function(value){return null==value},exports.isObject=function(value){return Boolean(value)&&"object"==typeof value&&!Array.isArray(value)};var JsonSize;function isASCII(character){return character.charCodeAt(0)<=127}exports.hasProperty=(objectToCheck,name)=>Object.hasOwnProperty.call(objectToCheck,name),(JsonSize=exports.JsonSize||(exports.JsonSize={}))[JsonSize.Null=4]="Null",JsonSize[JsonSize.Comma=1]="Comma",JsonSize[JsonSize.Wrapper=1]="Wrapper",JsonSize[JsonSize.True=4]="True",JsonSize[JsonSize.False=5]="False",JsonSize[JsonSize.Quote=1]="Quote",JsonSize[JsonSize.Colon=1]="Colon",JsonSize[JsonSize.Date=24]="Date",exports.ESCAPE_CHARACTERS_REGEXP=/"|\\|\n|\r|\t/gu,exports.isPlainObject=function(value){if("object"!=typeof value||null===value)return!1;try{let proto=value;for(;null!==Object.getPrototypeOf(proto);)proto=Object.getPrototypeOf(proto);return Object.getPrototypeOf(value)===proto}catch(_){return!1}},exports.isASCII=isASCII,exports.calculateStringSize=function(value){var _a;return value.split("").reduce(((total,character)=>isASCII(character)?total+1:total+2),0)+(null!==(_a=value.match(exports.ESCAPE_CHARACTERS_REGEXP))&&void 0!==_a?_a:[]).length},exports.calculateNumberSize=function(value){return value.toString().length}}(misc),function(exports){Object.defineProperty(exports,"__esModule",{value:!0}),exports.validateJsonAndGetSize=exports.getJsonRpcIdValidator=exports.assertIsJsonRpcError=exports.isJsonRpcError=exports.assertIsJsonRpcFailure=exports.isJsonRpcFailure=exports.assertIsJsonRpcSuccess=exports.isJsonRpcSuccess=exports.assertIsJsonRpcResponse=exports.isJsonRpcResponse=exports.assertIsPendingJsonRpcResponse=exports.isPendingJsonRpcResponse=exports.JsonRpcResponseStruct=exports.JsonRpcFailureStruct=exports.JsonRpcSuccessStruct=exports.PendingJsonRpcResponseStruct=exports.assertIsJsonRpcRequest=exports.isJsonRpcRequest=exports.assertIsJsonRpcNotification=exports.isJsonRpcNotification=exports.JsonRpcNotificationStruct=exports.JsonRpcRequestStruct=exports.JsonRpcParamsStruct=exports.JsonRpcErrorStruct=exports.JsonRpcIdStruct=exports.JsonRpcVersionStruct=exports.jsonrpc2=exports.isValidJson=exports.JsonStruct=void 0;const superstruct_12=require$$1,assert_12=assert$2,misc_1=misc;function validateJsonAndGetSize(jsObject,skipSizingProcess=!1){const seenObjects=new Set;return function getJsonSerializableInfo(value,skipSizing){if(void 0===value)return[!1,0];if(null===value)return[!0,skipSizing?0:misc_1.JsonSize.Null];const typeOfValue=typeof value;try{if("function"===typeOfValue)return[!1,0];if("string"===typeOfValue||value instanceof String)return[!0,skipSizing?0:(0,misc_1.calculateStringSize)(value)+2*misc_1.JsonSize.Quote];if("boolean"===typeOfValue||value instanceof Boolean)return skipSizing?[!0,0]:[!0,1==value?misc_1.JsonSize.True:misc_1.JsonSize.False];if("number"===typeOfValue||value instanceof Number)return skipSizing?[!0,0]:[!0,(0,misc_1.calculateNumberSize)(value)];if(value instanceof Date)return skipSizing?[!0,0]:[!0,isNaN(value.getDate())?misc_1.JsonSize.Null:misc_1.JsonSize.Date+2*misc_1.JsonSize.Quote]}catch(_){return[!1,0]}if(!(0,misc_1.isPlainObject)(value)&&!Array.isArray(value))return[!1,0];if(seenObjects.has(value))return[!1,0];seenObjects.add(value);try{return[!0,Object.entries(value).reduce(((sum,[key,nestedValue],idx,arr2)=>{let[valid2,size2]=getJsonSerializableInfo(nestedValue,skipSizing);if(!valid2)throw new Error("JSON validation did not pass. Validation process stopped.");if(seenObjects.delete(value),skipSizing)return 0;return sum+(Array.isArray(value)?0:key.length+misc_1.JsonSize.Comma+2*misc_1.JsonSize.Colon)+size2+(idx<arr2.length-1?misc_1.JsonSize.Comma:0)}),skipSizing?0:2*misc_1.JsonSize.Wrapper)]}catch(_){return[!1,0]}}(jsObject,skipSizingProcess)}exports.JsonStruct=(0,superstruct_12.define)("Json",(value=>{const[isValid]=validateJsonAndGetSize(value,!0);return!!isValid||"Expected a valid JSON-serializable value"})),exports.isValidJson=function(value){return(0,superstruct_12.is)(value,exports.JsonStruct)},exports.jsonrpc2="2.0",exports.JsonRpcVersionStruct=(0,superstruct_12.literal)(exports.jsonrpc2),exports.JsonRpcIdStruct=(0,superstruct_12.nullable)((0,superstruct_12.union)([(0,superstruct_12.number)(),(0,superstruct_12.string)()])),exports.JsonRpcErrorStruct=(0,superstruct_12.object)({code:(0,superstruct_12.integer)(),message:(0,superstruct_12.string)(),data:(0,superstruct_12.optional)(exports.JsonStruct),stack:(0,superstruct_12.optional)((0,superstruct_12.string)())}),exports.JsonRpcParamsStruct=(0,superstruct_12.optional)((0,superstruct_12.union)([(0,superstruct_12.record)((0,superstruct_12.string)(),exports.JsonStruct),(0,superstruct_12.array)(exports.JsonStruct)])),exports.JsonRpcRequestStruct=(0,superstruct_12.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,method:(0,superstruct_12.string)(),params:exports.JsonRpcParamsStruct}),exports.JsonRpcNotificationStruct=(0,superstruct_12.omit)(exports.JsonRpcRequestStruct,["id"]),exports.isJsonRpcNotification=function(value){return(0,superstruct_12.is)(value,exports.JsonRpcNotificationStruct)},exports.assertIsJsonRpcNotification=function(value,ErrorWrapper){(0,assert_12.assertStruct)(value,exports.JsonRpcNotificationStruct,"Invalid JSON-RPC notification",ErrorWrapper)},exports.isJsonRpcRequest=function(value){return(0,superstruct_12.is)(value,exports.JsonRpcRequestStruct)},exports.assertIsJsonRpcRequest=function(value,ErrorWrapper){(0,assert_12.assertStruct)(value,exports.JsonRpcRequestStruct,"Invalid JSON-RPC request",ErrorWrapper)},exports.PendingJsonRpcResponseStruct=(0,superstruct_12.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,result:(0,superstruct_12.optional)((0,superstruct_12.unknown)()),error:(0,superstruct_12.optional)(exports.JsonRpcErrorStruct)}),exports.JsonRpcSuccessStruct=(0,superstruct_12.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,result:exports.JsonStruct}),exports.JsonRpcFailureStruct=(0,superstruct_12.object)({id:exports.JsonRpcIdStruct,jsonrpc:exports.JsonRpcVersionStruct,error:exports.JsonRpcErrorStruct}),exports.JsonRpcResponseStruct=(0,superstruct_12.union)([exports.JsonRpcSuccessStruct,exports.JsonRpcFailureStruct]),exports.isPendingJsonRpcResponse=function(response){return(0,superstruct_12.is)(response,exports.PendingJsonRpcResponseStruct)},exports.assertIsPendingJsonRpcResponse=function(response,ErrorWrapper){(0,assert_12.assertStruct)(response,exports.PendingJsonRpcResponseStruct,"Invalid pending JSON-RPC response",ErrorWrapper)},exports.isJsonRpcResponse=function(response){return(0,superstruct_12.is)(response,exports.JsonRpcResponseStruct)},exports.assertIsJsonRpcResponse=function(value,ErrorWrapper){(0,assert_12.assertStruct)(value,exports.JsonRpcResponseStruct,"Invalid JSON-RPC response",ErrorWrapper)},exports.isJsonRpcSuccess=function(value){return(0,superstruct_12.is)(value,exports.JsonRpcSuccessStruct)},exports.assertIsJsonRpcSuccess=function(value,ErrorWrapper){(0,assert_12.assertStruct)(value,exports.JsonRpcSuccessStruct,"Invalid JSON-RPC success response",ErrorWrapper)},exports.isJsonRpcFailure=function(value){return(0,superstruct_12.is)(value,exports.JsonRpcFailureStruct)},exports.assertIsJsonRpcFailure=function(value,ErrorWrapper){(0,assert_12.assertStruct)(value,exports.JsonRpcFailureStruct,"Invalid JSON-RPC failure response",ErrorWrapper)},exports.isJsonRpcError=function(value){return(0,superstruct_12.is)(value,exports.JsonRpcErrorStruct)},exports.assertIsJsonRpcError=function(value,ErrorWrapper){(0,assert_12.assertStruct)(value,exports.JsonRpcErrorStruct,"Invalid JSON-RPC error",ErrorWrapper)},exports.getJsonRpcIdValidator=function(options){const{permitEmptyString:permitEmptyString,permitFractions:permitFractions,permitNull:permitNull}=Object.assign({permitEmptyString:!0,permitFractions:!1,permitNull:!0},options);return id=>Boolean("number"==typeof id&&(permitFractions||Number.isInteger(id))||"string"==typeof id&&(permitEmptyString||id.length>0)||permitNull&&null===id)},exports.validateJsonAndGetSize=validateJsonAndGetSize}(json);var ms,hasRequiredMs,logging={},browserExports={};function requireMs(){if(hasRequiredMs)return ms;hasRequiredMs=1;var s=1e3,m=60*s,h=60*m,d=24*h,w=7*d,y=365.25*d;function plural(ms2,msAbs,n,name){var isPlural=msAbs>=1.5*n;return Math.round(ms2/n)+" "+name+(isPlural?"s":"")}return ms=function(val,options){options=options||{};var type2=typeof val;if("string"===type2&&val.length>0)return function(str){if((str=String(str)).length>100)return;var match=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);switch((match[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*y;case"weeks":case"week":case"w":return n*w;case"days":case"day":case"d":return n*d;case"hours":case"hour":case"hrs":case"hr":case"h":return n*h;case"minutes":case"minute":case"mins":case"min":case"m":return n*m;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(val);if("number"===type2&&isFinite(val))return options.long?function(ms2){var msAbs=Math.abs(ms2);if(msAbs>=d)return plural(ms2,msAbs,d,"day");if(msAbs>=h)return plural(ms2,msAbs,h,"hour");if(msAbs>=m)return plural(ms2,msAbs,m,"minute");if(msAbs>=s)return plural(ms2,msAbs,s,"second");return ms2+" ms"}(val):function(ms2){var msAbs=Math.abs(ms2);if(msAbs>=d)return Math.round(ms2/d)+"d";if(msAbs>=h)return Math.round(ms2/h)+"h";if(msAbs>=m)return Math.round(ms2/m)+"m";if(msAbs>=s)return Math.round(ms2/s)+"s";return ms2+"ms"}(val);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(val))}}var common=function(env){function createDebug(namespace){let prevTime,namespacesCache,enabledCache,enableOverride=null;function debug2(...args){if(!debug2.enabled)return;const self2=debug2,curr=Number(new Date),ms2=curr-(prevTime||curr);self2.diff=ms2,self2.prev=prevTime,self2.curr=curr,prevTime=curr,args[0]=createDebug.coerce(args[0]),"string"!=typeof args[0]&&args.unshift("%O");let index2=0;args[0]=args[0].replace(/%([a-zA-Z%])/g,((match,format2)=>{if("%%"===match)return"%";index2++;const formatter=createDebug.formatters[format2];if("function"==typeof formatter){const val=args[index2];match=formatter.call(self2,val),args.splice(index2,1),index2--}return match})),createDebug.formatArgs.call(self2,args);(self2.log||createDebug.log).apply(self2,args)}return debug2.namespace=namespace,debug2.useColors=createDebug.useColors(),debug2.color=createDebug.selectColor(namespace),debug2.extend=extend,debug2.destroy=createDebug.destroy,Object.defineProperty(debug2,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==enableOverride?enableOverride:(namespacesCache!==createDebug.namespaces&&(namespacesCache=createDebug.namespaces,enabledCache=createDebug.enabled(namespace)),enabledCache),set:v=>{enableOverride=v}}),"function"==typeof createDebug.init&&createDebug.init(debug2),debug2}function extend(namespace,delimiter){const newDebug=createDebug(this.namespace+(void 0===delimiter?":":delimiter)+namespace);return newDebug.log=this.log,newDebug}function toNamespace(regexp2){return regexp2.toString().substring(2,regexp2.toString().length-2).replace(/\.\*\?$/,"*")}return createDebug.debug=createDebug,createDebug.default=createDebug,createDebug.coerce=function(val){if(val instanceof Error)return val.stack||val.message;return val},createDebug.disable=function(){const namespaces=[...createDebug.names.map(toNamespace),...createDebug.skips.map(toNamespace).map((namespace=>"-"+namespace))].join(",");return createDebug.enable(""),namespaces},createDebug.enable=function(namespaces){let i2;createDebug.save(namespaces),createDebug.namespaces=namespaces,createDebug.names=[],createDebug.skips=[];const split=("string"==typeof namespaces?namespaces:"").split(/[\s,]+/),len2=split.length;for(i2=0;i2<len2;i2++)split[i2]&&("-"===(namespaces=split[i2].replace(/\*/g,".*?"))[0]?createDebug.skips.push(new RegExp("^"+namespaces.slice(1)+"$")):createDebug.names.push(new RegExp("^"+namespaces+"$")))},createDebug.enabled=function(name){if("*"===name[name.length-1])return!0;let i2,len2;for(i2=0,len2=createDebug.skips.length;i2<len2;i2++)if(createDebug.skips[i2].test(name))return!1;for(i2=0,len2=createDebug.names.length;i2<len2;i2++)if(createDebug.names[i2].test(name))return!0;return!1},createDebug.humanize=requireMs(),createDebug.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(env).forEach((key=>{createDebug[key]=env[key]})),createDebug.names=[],createDebug.skips=[],createDebug.formatters={},createDebug.selectColor=function(namespace){let hash=0;for(let i2=0;i2<namespace.length;i2++)hash=(hash<<5)-hash+namespace.charCodeAt(i2),hash|=0;return createDebug.colors[Math.abs(hash)%createDebug.colors.length]},createDebug.enable(createDebug.load()),createDebug};!function(module,exports){exports.formatArgs=function(args){if(args[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+args[0]+(this.useColors?"%c ":" ")+"+"+module.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;args.splice(1,0,c,"color: inherit");let index2=0,lastC=0;args[0].replace(/%[a-zA-Z%]/g,(match=>{"%%"!==match&&(index2++,"%c"===match&&(lastC=index2))})),args.splice(lastC,0,c)},exports.save=function(namespaces){try{namespaces?exports.storage.setItem("debug",namespaces):exports.storage.removeItem("debug")}catch(error){}},exports.load=function(){let r;try{r=exports.storage.getItem("debug")}catch(error){}!r&&"undefined"!=typeof process&&"env"in process&&(r=process.env.DEBUG);return r},exports.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},exports.storage=function(){try{return localStorage}catch(error){}}(),exports.destroy=(()=>{let warned=!1;return()=>{warned||(warned=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),exports.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],exports.log=console.debug||console.log||(()=>{}),module.exports=common(exports);const{formatters:formatters}=module.exports;formatters.j=function(v){try{return JSON.stringify(v)}catch(error){return"[UnexpectedJSONParseError]: "+error.message}}}({get exports(){return browserExports},set exports(v){browserExports=v}},browserExports);var __importDefault$8=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(logging,"__esModule",{value:!0}),logging.createModuleLogger=logging.createProjectLogger=void 0;const globalLogger=(0,__importDefault$8(browserExports).default)("metamask");logging.createProjectLogger=function(projectName){return globalLogger.extend(projectName)},logging.createModuleLogger=function(projectLogger,moduleName){return projectLogger.extend(moduleName)};var number={};Object.defineProperty(number,"__esModule",{value:!0}),number.hexToBigInt=number.hexToNumber=number.bigIntToHex=number.numberToHex=void 0;const assert_1=assert$2,hex_1=hex;number.numberToHex=value=>((0,assert_1.assert)("number"==typeof value,"Value must be a number."),(0,assert_1.assert)(value>=0,"Value must be a non-negative number."),(0,assert_1.assert)(Number.isSafeInteger(value),"Value is not a safe integer. Use `bigIntToHex` instead."),(0,hex_1.add0x)(value.toString(16)));number.bigIntToHex=value=>((0,assert_1.assert)("bigint"==typeof value,"Value must be a bigint."),(0,assert_1.assert)(value>=0,"Value must be a non-negative bigint."),(0,hex_1.add0x)(value.toString(16)));number.hexToNumber=value=>{(0,hex_1.assertIsHexString)(value);const numberValue=parseInt(value,16);return(0,assert_1.assert)(Number.isSafeInteger(numberValue),"Value is not a safe integer. Use `hexToBigInt` instead."),numberValue};number.hexToBigInt=value=>((0,hex_1.assertIsHexString)(value),BigInt((0,hex_1.add0x)(value)));var opaque={};Object.defineProperty(opaque,"__esModule",{value:!0});var time={};!function(exports){var Duration;Object.defineProperty(exports,"__esModule",{value:!0}),exports.timeSince=exports.inMilliseconds=exports.Duration=void 0,(Duration=exports.Duration||(exports.Duration={}))[Duration.Millisecond=1]="Millisecond",Duration[Duration.Second=1e3]="Second",Duration[Duration.Minute=6e4]="Minute",Duration[Duration.Hour=36e5]="Hour",Duration[Duration.Day=864e5]="Day",Duration[Duration.Week=6048e5]="Week",Duration[Duration.Year=31536e6]="Year";const assertIsNonNegativeInteger=(number2,name)=>{if(!(number2=>Number.isInteger(number2)&&number2>=0)(number2))throw new Error(`"${name}" must be a non-negative integer. Received: "${number2}".`)};exports.inMilliseconds=function(count,duration){return assertIsNonNegativeInteger(count,"count"),count*duration},exports.timeSince=function(timestamp){return assertIsNonNegativeInteger(timestamp,"timestamp"),Date.now()-timestamp}}(time);var versions={},reExports={},re$3={get exports(){return reExports},set exports(v){reExports=v}};var constants$1={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16};var debug_1="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...args)=>console.error("SEMVER",...args):()=>{};!function(module,exports){const{MAX_SAFE_COMPONENT_LENGTH:MAX_SAFE_COMPONENT_LENGTH2}=constants$1,debug2=debug_1,re2=(exports=module.exports={}).re=[],src=exports.src=[],t2=exports.t={};let R2=0;const createToken=(name,value,isGlobal)=>{const index2=R2++;debug2(name,index2,value),t2[name]=index2,src[index2]=value,re2[index2]=new RegExp(value,isGlobal?"g":void 0)};createToken("NUMERICIDENTIFIER","0|[1-9]\\d*"),createToken("NUMERICIDENTIFIERLOOSE","[0-9]+"),createToken("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),createToken("MAINVERSION",`(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`),createToken("MAINVERSIONLOOSE",`(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`),createToken("PRERELEASEIDENTIFIER",`(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`),createToken("PRERELEASEIDENTIFIERLOOSE",`(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`),createToken("PRERELEASE",`(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`),createToken("PRERELEASELOOSE",`(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`),createToken("BUILDIDENTIFIER","[0-9A-Za-z-]+"),createToken("BUILD",`(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`),createToken("FULLPLAIN",`v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`),createToken("FULL",`^${src[t2.FULLPLAIN]}$`),createToken("LOOSEPLAIN",`[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`),createToken("LOOSE",`^${src[t2.LOOSEPLAIN]}$`),createToken("GTLT","((?:<|>)?=?)"),createToken("XRANGEIDENTIFIERLOOSE",`${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),createToken("XRANGEIDENTIFIER",`${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`),createToken("XRANGEPLAIN",`[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`),createToken("XRANGEPLAINLOOSE",`[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`),createToken("XRANGE",`^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`),createToken("XRANGELOOSE",`^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`),createToken("COERCE",`(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH2}}))?(?:$|[^\\d])`),createToken("COERCERTL",src[t2.COERCE],!0),createToken("LONETILDE","(?:~>?)"),createToken("TILDETRIM",`(\\s*)${src[t2.LONETILDE]}\\s+`,!0),exports.tildeTrimReplace="$1~",createToken("TILDE",`^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`),createToken("TILDELOOSE",`^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`),createToken("LONECARET","(?:\\^)"),createToken("CARETTRIM",`(\\s*)${src[t2.LONECARET]}\\s+`,!0),exports.caretTrimReplace="$1^",createToken("CARET",`^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`),createToken("CARETLOOSE",`^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`),createToken("COMPARATORLOOSE",`^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`),createToken("COMPARATOR",`^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`),createToken("COMPARATORTRIM",`(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`,!0),exports.comparatorTrimReplace="$1$2$3",createToken("HYPHENRANGE",`^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`),createToken("HYPHENRANGELOOSE",`^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`),createToken("STAR","(<|>)?=?\\s*\\*"),createToken("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),createToken("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")}(re$3,reExports);const opts=["includePrerelease","loose","rtl"];var parseOptions_1=options=>options?"object"!=typeof options?{loose:!0}:opts.filter((k=>options[k])).reduce(((o,k)=>(o[k]=!0,o)),{}):{};const numeric=/^[0-9]+$/,compareIdentifiers$1=(a,b)=>{const anum=numeric.test(a),bnum=numeric.test(b);return anum&&bnum&&(a=+a,b=+b),a===b?0:anum&&!bnum?-1:bnum&&!anum?1:a<b?-1:1};var identifiers$1={compareIdentifiers:compareIdentifiers$1,rcompareIdentifiers:(a,b)=>compareIdentifiers$1(b,a)};const debug=debug_1,{MAX_LENGTH:MAX_LENGTH$1,MAX_SAFE_INTEGER:MAX_SAFE_INTEGER}=constants$1,{re:re$2,t:t$2}=reExports,parseOptions$1=parseOptions_1,{compareIdentifiers:compareIdentifiers}=identifiers$1;var semver$1=class SemVer2{constructor(version,options){if(options=parseOptions$1(options),version instanceof SemVer2){if(version.loose===!!options.loose&&version.includePrerelease===!!options.includePrerelease)return version;version=version.version}else if("string"!=typeof version)throw new TypeError(`Invalid Version: ${version}`);if(version.length>MAX_LENGTH$1)throw new TypeError(`version is longer than ${MAX_LENGTH$1} characters`);debug("SemVer",version,options),this.options=options,this.loose=!!options.loose,this.includePrerelease=!!options.includePrerelease;const m=version.trim().match(options.loose?re$2[t$2.LOOSE]:re$2[t$2.FULL]);if(!m)throw new TypeError(`Invalid Version: ${version}`);if(this.raw=version,this.major=+m[1],this.minor=+m[2],this.patch=+m[3],this.major>MAX_SAFE_INTEGER||this.major<0)throw new TypeError("Invalid major version");if(this.minor>MAX_SAFE_INTEGER||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>MAX_SAFE_INTEGER||this.patch<0)throw new TypeError("Invalid patch version");m[4]?this.prerelease=m[4].split(".").map((id=>{if(/^[0-9]+$/.test(id)){const num=+id;if(num>=0&&num<MAX_SAFE_INTEGER)return num}return id})):this.prerelease=[],this.build=m[5]?m[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(other){if(debug("SemVer.compare",this.version,this.options,other),!(other instanceof SemVer2)){if("string"==typeof other&&other===this.version)return 0;other=new SemVer2(other,this.options)}return other.version===this.version?0:this.compareMain(other)||this.comparePre(other)}compareMain(other){return other instanceof SemVer2||(other=new SemVer2(other,this.options)),compareIdentifiers(this.major,other.major)||compareIdentifiers(this.minor,other.minor)||compareIdentifiers(this.patch,other.patch)}comparePre(other){if(other instanceof SemVer2||(other=new SemVer2(other,this.options)),this.prerelease.length&&!other.prerelease.length)return-1;if(!this.prerelease.length&&other.prerelease.length)return 1;if(!this.prerelease.length&&!other.prerelease.length)return 0;let i2=0;do{const a=this.prerelease[i2],b=other.prerelease[i2];if(debug("prerelease compare",i2,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return-1;if(a!==b)return compareIdentifiers(a,b)}while(++i2)}compareBuild(other){other instanceof SemVer2||(other=new SemVer2(other,this.options));let i2=0;do{const a=this.build[i2],b=other.build[i2];if(debug("prerelease compare",i2,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return-1;if(a!==b)return compareIdentifiers(a,b)}while(++i2)}inc(release,identifier){switch(release){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",identifier);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",identifier);break;case"prepatch":this.prerelease.length=0,this.inc("patch",identifier),this.inc("pre",identifier);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",identifier),this.inc("pre",identifier);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let i2=this.prerelease.length;for(;--i2>=0;)"number"==typeof this.prerelease[i2]&&(this.prerelease[i2]++,i2=-2);-1===i2&&this.prerelease.push(0)}identifier&&(0===compareIdentifiers(this.prerelease[0],identifier)?isNaN(this.prerelease[1])&&(this.prerelease=[identifier,0]):this.prerelease=[identifier,0]);break;default:throw new Error(`invalid increment argument: ${release}`)}return this.format(),this.raw=this.version,this}};const{MAX_LENGTH:MAX_LENGTH}=constants$1,{re:re$1,t:t$1}=reExports,SemVer$c=semver$1,parseOptions=parseOptions_1;var parse_1=(version,options)=>{if(options=parseOptions(options),version instanceof SemVer$c)return version;if("string"!=typeof version)return null;if(version.length>MAX_LENGTH)return null;if(!(options.loose?re$1[t$1.LOOSE]:re$1[t$1.FULL]).test(version))return null;try{return new SemVer$c(version,options)}catch(er){return null}};const parse$5=parse_1;var valid_1=(version,options)=>{const v=parse$5(version,options);return v?v.version:null};const parse$4=parse_1;var clean_1=(version,options)=>{const s=parse$4(version.trim().replace(/^[=v]+/,""),options);return s?s.version:null};const SemVer$b=semver$1;var inc_1=(version,release,options,identifier)=>{"string"==typeof options&&(identifier=options,options=void 0);try{return new SemVer$b(version instanceof SemVer$b?version.version:version,options).inc(release,identifier).version}catch(er){return null}};const SemVer$a=semver$1;var compare_1=(a,b,loose)=>new SemVer$a(a,loose).compare(new SemVer$a(b,loose));const compare$a=compare_1;var eq_1=(a,b,loose)=>0===compare$a(a,b,loose);const parse$3=parse_1,eq$2=eq_1;var diff_1=(version1,version2)=>{if(eq$2(version1,version2))return null;{const v1=parse$3(version1),v2=parse$3(version2),hasPre=v1.prerelease.length||v2.prerelease.length,prefix=hasPre?"pre":"",defaultResult=hasPre?"prerelease":"";for(const key in v1)if(("major"===key||"minor"===key||"patch"===key)&&v1[key]!==v2[key])return prefix+key;return defaultResult}};const SemVer$9=semver$1;var major_1=(a,loose)=>new SemVer$9(a,loose).major;const SemVer$8=semver$1;var minor_1=(a,loose)=>new SemVer$8(a,loose).minor;const SemVer$7=semver$1;var patch_1=(a,loose)=>new SemVer$7(a,loose).patch;const parse$2=parse_1;var prerelease_1=(version,options)=>{const parsed=parse$2(version,options);return parsed&&parsed.prerelease.length?parsed.prerelease:null};const compare$9=compare_1;var rcompare_1=(a,b,loose)=>compare$9(b,a,loose);const compare$8=compare_1;var compareLoose_1=(a,b)=>compare$8(a,b,!0);const SemVer$6=semver$1;var compareBuild_1=(a,b,loose)=>{const versionA=new SemVer$6(a,loose),versionB=new SemVer$6(b,loose);return versionA.compare(versionB)||versionA.compareBuild(versionB)};const compareBuild$2=compareBuild_1;var sort_1=(list,loose)=>list.sort(((a,b)=>compareBuild$2(a,b,loose)));const compareBuild$1=compareBuild_1;var rsort_1=(list,loose)=>list.sort(((a,b)=>compareBuild$1(b,a,loose)));const compare$7=compare_1;var gt_1=(a,b,loose)=>compare$7(a,b,loose)>0;const compare$6=compare_1;var lt_1=(a,b,loose)=>compare$6(a,b,loose)<0;const compare$5=compare_1;var neq_1=(a,b,loose)=>0!==compare$5(a,b,loose);const compare$4=compare_1;var gte_1=(a,b,loose)=>compare$4(a,b,loose)>=0;const compare$3=compare_1;var lte_1=(a,b,loose)=>compare$3(a,b,loose)<=0;const eq$1=eq_1,neq$1=neq_1,gt$3=gt_1,gte$2=gte_1,lt$2=lt_1,lte$2=lte_1;var cmp_1=(a,op,b,loose)=>{switch(op){case"===":return"object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a===b;case"!==":return"object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a!==b;case"":case"=":case"==":return eq$1(a,b,loose);case"!=":return neq$1(a,b,loose);case">":return gt$3(a,b,loose);case">=":return gte$2(a,b,loose);case"<":return lt$2(a,b,loose);case"<=":return lte$2(a,b,loose);default:throw new TypeError(`Invalid operator: ${op}`)}};const SemVer$5=semver$1,parse$1=parse_1,{re:re,t:t}=reExports;var iterator,hasRequiredIterator,coerce_1=(version,options)=>{if(version instanceof SemVer$5)return version;if("number"==typeof version&&(version=String(version)),"string"!=typeof version)return null;let match=null;if((options=options||{}).rtl){let next;for(;(next=re[t.COERCERTL].exec(version))&&(!match||match.index+match[0].length!==version.length);)match&&next.index+next[0].length===match.index+match[0].length||(match=next),re[t.COERCERTL].lastIndex=next.index+next[1].length+next[2].length;re[t.COERCERTL].lastIndex=-1}else match=version.match(re[t.COERCE]);return null===match?null:parse$1(`${match[2]}.${match[3]||"0"}.${match[4]||"0"}`,options)};var yallist=Yallist$1;function Yallist$1(list){var self2=this;if(self2 instanceof Yallist$1||(self2=new Yallist$1),self2.tail=null,self2.head=null,self2.length=0,list&&"function"==typeof list.forEach)list.forEach((function(item){self2.push(item)}));else if(arguments.length>0)for(var i2=0,l=arguments.length;i2<l;i2++)self2.push(arguments[i2]);return self2}function insert(self2,node,value){var inserted=node===self2.head?new Node(value,null,node,self2):new Node(value,node,node.next,self2);return null===inserted.next&&(self2.tail=inserted),null===inserted.prev&&(self2.head=inserted),self2.length++,inserted}function push(self2,item){self2.tail=new Node(item,self2.tail,null,self2),self2.head||(self2.head=self2.tail),self2.length++}function unshift(self2,item){self2.head=new Node(item,null,self2.head,self2),self2.tail||(self2.tail=self2.head),self2.length++}function Node(value,prev,next,list){if(!(this instanceof Node))return new Node(value,prev,next,list);this.list=list,this.value=value,prev?(prev.next=this,this.prev=prev):this.prev=null,next?(next.prev=this,this.next=next):this.next=null}Yallist$1.Node=Node,Yallist$1.create=Yallist$1,Yallist$1.prototype.removeNode=function(node){if(node.list!==this)throw new Error("removing node which does not belong to this list");var next=node.next,prev=node.prev;return next&&(next.prev=prev),prev&&(prev.next=next),node===this.head&&(this.head=next),node===this.tail&&(this.tail=prev),node.list.length--,node.next=null,node.prev=null,node.list=null,next},Yallist$1.prototype.unshiftNode=function(node){if(node!==this.head){node.list&&node.list.removeNode(node);var head=this.head;node.list=this,node.next=head,head&&(head.prev=node),this.head=node,this.tail||(this.tail=node),this.length++}},Yallist$1.prototype.pushNode=function(node){if(node!==this.tail){node.list&&node.list.removeNode(node);var tail=this.tail;node.list=this,node.prev=tail,tail&&(tail.next=node),this.tail=node,this.head||(this.head=node),this.length++}},Yallist$1.prototype.push=function(){for(var i2=0,l=arguments.length;i2<l;i2++)push(this,arguments[i2]);return this.length},Yallist$1.prototype.unshift=function(){for(var i2=0,l=arguments.length;i2<l;i2++)unshift(this,arguments[i2]);return this.length},Yallist$1.prototype.pop=function(){if(this.tail){var res=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,res}},Yallist$1.prototype.shift=function(){if(this.head){var res=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,res}},Yallist$1.prototype.forEach=function(fn,thisp){thisp=thisp||this;for(var walker=this.head,i2=0;null!==walker;i2++)fn.call(thisp,walker.value,i2,this),walker=walker.next},Yallist$1.prototype.forEachReverse=function(fn,thisp){thisp=thisp||this;for(var walker=this.tail,i2=this.length-1;null!==walker;i2--)fn.call(thisp,walker.value,i2,this),walker=walker.prev},Yallist$1.prototype.get=function(n){for(var i2=0,walker=this.head;null!==walker&&i2<n;i2++)walker=walker.next;if(i2===n&&null!==walker)return walker.value},Yallist$1.prototype.getReverse=function(n){for(var i2=0,walker=this.tail;null!==walker&&i2<n;i2++)walker=walker.prev;if(i2===n&&null!==walker)return walker.value},Yallist$1.prototype.map=function(fn,thisp){thisp=thisp||this;for(var res=new Yallist$1,walker=this.head;null!==walker;)res.push(fn.call(thisp,walker.value,this)),walker=walker.next;return res},Yallist$1.prototype.mapReverse=function(fn,thisp){thisp=thisp||this;for(var res=new Yallist$1,walker=this.tail;null!==walker;)res.push(fn.call(thisp,walker.value,this)),walker=walker.prev;return res},Yallist$1.prototype.reduce=function(fn,initial){var acc,walker=this.head;if(arguments.length>1)acc=initial;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");walker=this.head.next,acc=this.head.value}for(var i2=0;null!==walker;i2++)acc=fn(acc,walker.value,i2),walker=walker.next;return acc},Yallist$1.prototype.reduceReverse=function(fn,initial){var acc,walker=this.tail;if(arguments.length>1)acc=initial;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");walker=this.tail.prev,acc=this.tail.value}for(var i2=this.length-1;null!==walker;i2--)acc=fn(acc,walker.value,i2),walker=walker.prev;return acc},Yallist$1.prototype.toArray=function(){for(var arr2=new Array(this.length),i2=0,walker=this.head;null!==walker;i2++)arr2[i2]=walker.value,walker=walker.next;return arr2},Yallist$1.prototype.toArrayReverse=function(){for(var arr2=new Array(this.length),i2=0,walker=this.tail;null!==walker;i2++)arr2[i2]=walker.value,walker=walker.prev;return arr2},Yallist$1.prototype.slice=function(from2,to){(to=to||this.length)<0&&(to+=this.length),(from2=from2||0)<0&&(from2+=this.length);var ret=new Yallist$1;if(to<from2||to<0)return ret;from2<0&&(from2=0),to>this.length&&(to=this.length);for(var i2=0,walker=this.head;null!==walker&&i2<from2;i2++)walker=walker.next;for(;null!==walker&&i2<to;i2++,walker=walker.next)ret.push(walker.value);return ret},Yallist$1.prototype.sliceReverse=function(from2,to){(to=to||this.length)<0&&(to+=this.length),(from2=from2||0)<0&&(from2+=this.length);var ret=new Yallist$1;if(to<from2||to<0)return ret;from2<0&&(from2=0),to>this.length&&(to=this.length);for(var i2=this.length,walker=this.tail;null!==walker&&i2>to;i2--)walker=walker.prev;for(;null!==walker&&i2>from2;i2--,walker=walker.prev)ret.push(walker.value);return ret},Yallist$1.prototype.splice=function(start2,deleteCount,...nodes){start2>this.length&&(start2=this.length-1),start2<0&&(start2=this.length+start2);for(var i2=0,walker=this.head;null!==walker&&i2<start2;i2++)walker=walker.next;var ret=[];for(i2=0;walker&&i2<deleteCount;i2++)ret.push(walker.value),walker=this.removeNode(walker);null===walker&&(walker=this.tail),walker!==this.head&&walker!==this.tail&&(walker=walker.prev);for(i2=0;i2<nodes.length;i2++)walker=insert(this,walker,nodes[i2]);return ret},Yallist$1.prototype.reverse=function(){for(var head=this.head,tail=this.tail,walker=head;null!==walker;walker=walker.prev){var p=walker.prev;walker.prev=walker.next,walker.next=p}return this.head=tail,this.tail=head,this};try{(hasRequiredIterator?iterator:(hasRequiredIterator=1,iterator=function(Yallist2){Yallist2.prototype[Symbol.iterator]=function*(){for(let walker=this.head;walker;walker=walker.next)yield walker.value}}))(Yallist$1)}catch(er){}const Yallist=yallist,MAX$1=Symbol("max"),LENGTH=Symbol("length"),LENGTH_CALCULATOR=Symbol("lengthCalculator"),ALLOW_STALE=Symbol("allowStale"),MAX_AGE=Symbol("maxAge"),DISPOSE=Symbol("dispose"),NO_DISPOSE_ON_SET=Symbol("noDisposeOnSet"),LRU_LIST=Symbol("lruList"),CACHE=Symbol("cache"),UPDATE_AGE_ON_GET=Symbol("updateAgeOnGet"),naiveLength=()=>1;const get=(self2,key,doUse)=>{const node=self2[CACHE].get(key);if(node){const hit=node.value;if(isStale(self2,hit)){if(del(self2,node),!self2[ALLOW_STALE])return}else doUse&&(self2[UPDATE_AGE_ON_GET]&&(node.value.now=Date.now()),self2[LRU_LIST].unshiftNode(node));return hit.value}},isStale=(self2,hit)=>{if(!hit||!hit.maxAge&&!self2[MAX_AGE])return!1;const diff2=Date.now()-hit.now;return hit.maxAge?diff2>hit.maxAge:self2[MAX_AGE]&&diff2>self2[MAX_AGE]},trim=self2=>{if(self2[LENGTH]>self2[MAX$1])for(let walker=self2[LRU_LIST].tail;self2[LENGTH]>self2[MAX$1]&&null!==walker;){const prev=walker.prev;del(self2,walker),walker=prev}},del=(self2,node)=>{if(node){const hit=node.value;self2[DISPOSE]&&self2[DISPOSE](hit.key,hit.value),self2[LENGTH]-=hit.length,self2[CACHE].delete(hit.key),self2[LRU_LIST].removeNode(node)}};class Entry{constructor(key,value,length,now,maxAge){this.key=key,this.value=value,this.length=length,this.now=now,this.maxAge=maxAge||0}}const forEachStep=(self2,fn,node,thisp)=>{let hit=node.value;isStale(self2,hit)&&(del(self2,node),self2[ALLOW_STALE]||(hit=void 0)),hit&&fn.call(thisp,hit.value,hit.key,self2)};var range,hasRequiredRange,comparator,hasRequiredComparator,lruCache=class{constructor(options){if("number"==typeof options&&(options={max:options}),options||(options={}),options.max&&("number"!=typeof options.max||options.max<0))throw new TypeError("max must be a non-negative number");this[MAX$1]=options.max||1/0;const lc=options.length||naiveLength;if(this[LENGTH_CALCULATOR]="function"!=typeof lc?naiveLength:lc,this[ALLOW_STALE]=options.stale||!1,options.maxAge&&"number"!=typeof options.maxAge)throw new TypeError("maxAge must be a number");this[MAX_AGE]=options.maxAge||0,this[DISPOSE]=options.dispose,this[NO_DISPOSE_ON_SET]=options.noDisposeOnSet||!1,this[UPDATE_AGE_ON_GET]=options.updateAgeOnGet||!1,this.reset()}set max(mL){if("number"!=typeof mL||mL<0)throw new TypeError("max must be a non-negative number");this[MAX$1]=mL||1/0,trim(this)}get max(){return this[MAX$1]}set allowStale(allowStale){this[ALLOW_STALE]=!!allowStale}get allowStale(){return this[ALLOW_STALE]}set maxAge(mA){if("number"!=typeof mA)throw new TypeError("maxAge must be a non-negative number");this[MAX_AGE]=mA,trim(this)}get maxAge(){return this[MAX_AGE]}set lengthCalculator(lC){"function"!=typeof lC&&(lC=naiveLength),lC!==this[LENGTH_CALCULATOR]&&(this[LENGTH_CALCULATOR]=lC,this[LENGTH]=0,this[LRU_LIST].forEach((hit=>{hit.length=this[LENGTH_CALCULATOR](hit.value,hit.key),this[LENGTH]+=hit.length}))),trim(this)}get lengthCalculator(){return this[LENGTH_CALCULATOR]}get length(){return this[LENGTH]}get itemCount(){return this[LRU_LIST].length}rforEach(fn,thisp){thisp=thisp||this;for(let walker=this[LRU_LIST].tail;null!==walker;){const prev=walker.prev;forEachStep(this,fn,walker,thisp),walker=prev}}forEach(fn,thisp){thisp=thisp||this;for(let walker=this[LRU_LIST].head;null!==walker;){const next=walker.next;forEachStep(this,fn,walker,thisp),walker=next}}keys(){return this[LRU_LIST].toArray().map((k=>k.key))}values(){return this[LRU_LIST].toArray().map((k=>k.value))}reset(){this[DISPOSE]&&this[LRU_LIST]&&this[LRU_LIST].length&&this[LRU_LIST].forEach((hit=>this[DISPOSE](hit.key,hit.value))),this[CACHE]=new Map,this[LRU_LIST]=new Yallist,this[LENGTH]=0}dump(){return this[LRU_LIST].map((hit=>!isStale(this,hit)&&{k:hit.key,v:hit.value,e:hit.now+(hit.maxAge||0)})).toArray().filter((h=>h))}dumpLru(){return this[LRU_LIST]}set(key,value,maxAge){if((maxAge=maxAge||this[MAX_AGE])&&"number"!=typeof maxAge)throw new TypeError("maxAge must be a number");const now=maxAge?Date.now():0,len2=this[LENGTH_CALCULATOR](value,key);if(this[CACHE].has(key)){if(len2>this[MAX$1])return del(this,this[CACHE].get(key)),!1;const item=this[CACHE].get(key).value;return this[DISPOSE]&&(this[NO_DISPOSE_ON_SET]||this[DISPOSE](key,item.value)),item.now=now,item.maxAge=maxAge,item.value=value,this[LENGTH]+=len2-item.length,item.length=len2,this.get(key),trim(this),!0}const hit=new Entry(key,value,len2,now,maxAge);return hit.length>this[MAX$1]?(this[DISPOSE]&&this[DISPOSE](key,value),!1):(this[LENGTH]+=hit.length,this[LRU_LIST].unshift(hit),this[CACHE].set(key,this[LRU_LIST].head),trim(this),!0)}has(key){if(!this[CACHE].has(key))return!1;const hit=this[CACHE].get(key).value;return!isStale(this,hit)}get(key){return get(this,key,!0)}peek(key){return get(this,key,!1)}pop(){const node=this[LRU_LIST].tail;return node?(del(this,node),node.value):null}del(key){del(this,this[CACHE].get(key))}load(arr2){this.reset();const now=Date.now();for(let l=arr2.length-1;l>=0;l--){const hit=arr2[l],expiresAt=hit.e||0;if(0===expiresAt)this.set(hit.k,hit.v);else{const maxAge=expiresAt-now;maxAge>0&&this.set(hit.k,hit.v,maxAge)}}}prune(){this[CACHE].forEach(((value,key)=>get(this,key,!1)))}};function requireRange(){if(hasRequiredRange)return range;hasRequiredRange=1;class Range2{constructor(range2,options){if(options=parseOptions2(options),range2 instanceof Range2)return range2.loose===!!options.loose&&range2.includePrerelease===!!options.includePrerelease?range2:new Range2(range2.raw,options);if(range2 instanceof Comparator2)return this.raw=range2.value,this.set=[[range2]],this.format(),this;if(this.options=options,this.loose=!!options.loose,this.includePrerelease=!!options.includePrerelease,this.raw=range2,this.set=range2.split("||").map((r=>this.parseRange(r.trim()))).filter((c=>c.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${range2}`);if(this.set.length>1){const first=this.set[0];if(this.set=this.set.filter((c=>!isNullSet(c[0]))),0===this.set.length)this.set=[first];else if(this.set.length>1)for(const c of this.set)if(1===c.length&&isAny(c[0])){this.set=[c];break}}this.format()}format(){return this.range=this.set.map((comps=>comps.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(range2){range2=range2.trim();const memoKey=`parseRange:${Object.keys(this.options).join(",")}:${range2}`,cached=cache.get(memoKey);if(cached)return cached;const loose=this.options.loose,hr=loose?re2[t2.HYPHENRANGELOOSE]:re2[t2.HYPHENRANGE];range2=range2.replace(hr,hyphenReplace(this.options.includePrerelease)),debug2("hyphen replace",range2),range2=range2.replace(re2[t2.COMPARATORTRIM],comparatorTrimReplace),debug2("comparator trim",range2);let rangeList=(range2=(range2=(range2=range2.replace(re2[t2.TILDETRIM],tildeTrimReplace)).replace(re2[t2.CARETTRIM],caretTrimReplace)).split(/\s+/).join(" ")).split(" ").map((comp=>parseComparator(comp,this.options))).join(" ").split(/\s+/).map((comp=>replaceGTE0(comp,this.options)));loose&&(rangeList=rangeList.filter((comp=>(debug2("loose invalid filter",comp,this.options),!!comp.match(re2[t2.COMPARATORLOOSE]))))),debug2("range list",rangeList);const rangeMap=new Map,comparators=rangeList.map((comp=>new Comparator2(comp,this.options)));for(const comp of comparators){if(isNullSet(comp))return[comp];rangeMap.set(comp.value,comp)}rangeMap.size>1&&rangeMap.has("")&&rangeMap.delete("");const result=[...rangeMap.values()];return cache.set(memoKey,result),result}intersects(range2,options){if(!(range2 instanceof Range2))throw new TypeError("a Range is required");return this.set.some((thisComparators=>isSatisfiable(thisComparators,options)&&range2.set.some((rangeComparators=>isSatisfiable(rangeComparators,options)&&thisComparators.every((thisComparator=>rangeComparators.every((rangeComparator=>thisComparator.intersects(rangeComparator,options)))))))))}test(version){if(!version)return!1;if("string"==typeof version)try{version=new SemVer2(version,this.options)}catch(er){return!1}for(let i2=0;i2<this.set.length;i2++)if(testSet(this.set[i2],version,this.options))return!0;return!1}}range=Range2;const cache=new lruCache({max:1e3}),parseOptions2=parseOptions_1,Comparator2=requireComparator(),debug2=debug_1,SemVer2=semver$1,{re:re2,t:t2,comparatorTrimReplace:comparatorTrimReplace,tildeTrimReplace:tildeTrimReplace,caretTrimReplace:caretTrimReplace}=reExports,isNullSet=c=>"<0.0.0-0"===c.value,isAny=c=>""===c.value,isSatisfiable=(comparators,options)=>{let result=!0;const remainingComparators=comparators.slice();let testComparator=remainingComparators.pop();for(;result&&remainingComparators.length;)result=remainingComparators.every((otherComparator=>testComparator.intersects(otherComparator,options))),testComparator=remainingComparators.pop();return result},parseComparator=(comp,options)=>(debug2("comp",comp,options),comp=replaceCarets(comp,options),debug2("caret",comp),comp=replaceTildes(comp,options),debug2("tildes",comp),comp=replaceXRanges(comp,options),debug2("xrange",comp),comp=replaceStars(comp,options),debug2("stars",comp),comp),isX=id=>!id||"x"===id.toLowerCase()||"*"===id,replaceTildes=(comp,options)=>comp.trim().split(/\s+/).map((c=>replaceTilde(c,options))).join(" "),replaceTilde=(comp,options)=>{const r=options.loose?re2[t2.TILDELOOSE]:re2[t2.TILDE];return comp.replace(r,((_,M,m,p,pr)=>{let ret;return debug2("tilde",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=`>=${M}.0.0 <${+M+1}.0.0-0`:isX(p)?ret=`>=${M}.${m}.0 <${M}.${+m+1}.0-0`:pr?(debug2("replaceTilde pr",pr),ret=`>=${M}.${m}.${p}-${pr} <${M}.${+m+1}.0-0`):ret=`>=${M}.${m}.${p} <${M}.${+m+1}.0-0`,debug2("tilde return",ret),ret}))},replaceCarets=(comp,options)=>comp.trim().split(/\s+/).map((c=>replaceCaret(c,options))).join(" "),replaceCaret=(comp,options)=>{debug2("caret",comp,options);const r=options.loose?re2[t2.CARETLOOSE]:re2[t2.CARET],z=options.includePrerelease?"-0":"";return comp.replace(r,((_,M,m,p,pr)=>{let ret;return debug2("caret",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=`>=${M}.0.0${z} <${+M+1}.0.0-0`:isX(p)?ret="0"===M?`>=${M}.${m}.0${z} <${M}.${+m+1}.0-0`:`>=${M}.${m}.0${z} <${+M+1}.0.0-0`:pr?(debug2("replaceCaret pr",pr),ret="0"===M?"0"===m?`>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p+1}-0`:`>=${M}.${m}.${p}-${pr} <${M}.${+m+1}.0-0`:`>=${M}.${m}.${p}-${pr} <${+M+1}.0.0-0`):(debug2("no pr"),ret="0"===M?"0"===m?`>=${M}.${m}.${p}${z} <${M}.${m}.${+p+1}-0`:`>=${M}.${m}.${p}${z} <${M}.${+m+1}.0-0`:`>=${M}.${m}.${p} <${+M+1}.0.0-0`),debug2("caret return",ret),ret}))},replaceXRanges=(comp,options)=>(debug2("replaceXRanges",comp,options),comp.split(/\s+/).map((c=>replaceXRange(c,options))).join(" ")),replaceXRange=(comp,options)=>{comp=comp.trim();const r=options.loose?re2[t2.XRANGELOOSE]:re2[t2.XRANGE];return comp.replace(r,((ret,gtlt,M,m,p,pr)=>{debug2("xRange",comp,ret,gtlt,M,m,p,pr);const xM=isX(M),xm=xM||isX(m),xp=xm||isX(p),anyX=xp;return"="===gtlt&&anyX&&(gtlt=""),pr=options.includePrerelease?"-0":"",xM?ret=">"===gtlt||"<"===gtlt?"<0.0.0-0":"*":gtlt&&anyX?(xm&&(m=0),p=0,">"===gtlt?(gtlt=">=",xm?(M=+M+1,m=0,p=0):(m=+m+1,p=0)):"<="===gtlt&&(gtlt="<",xm?M=+M+1:m=+m+1),"<"===gtlt&&(pr="-0"),ret=`${gtlt+M}.${m}.${p}${pr}`):xm?ret=`>=${M}.0.0${pr} <${+M+1}.0.0-0`:xp&&(ret=`>=${M}.${m}.0${pr} <${M}.${+m+1}.0-0`),debug2("xRange return",ret),ret}))},replaceStars=(comp,options)=>(debug2("replaceStars",comp,options),comp.trim().replace(re2[t2.STAR],"")),replaceGTE0=(comp,options)=>(debug2("replaceGTE0",comp,options),comp.trim().replace(re2[options.includePrerelease?t2.GTE0PRE:t2.GTE0],"")),hyphenReplace=incPr=>($0,from2,fM,fm,fp,fpr,fb,to,tM,tm,tp,tpr,tb)=>`${from2=isX(fM)?"":isX(fm)?`>=${fM}.0.0${incPr?"-0":""}`:isX(fp)?`>=${fM}.${fm}.0${incPr?"-0":""}`:fpr?`>=${from2}`:`>=${from2}${incPr?"-0":""}`} ${to=isX(tM)?"":isX(tm)?`<${+tM+1}.0.0-0`:isX(tp)?`<${tM}.${+tm+1}.0-0`:tpr?`<=${tM}.${tm}.${tp}-${tpr}`:incPr?`<${tM}.${tm}.${+tp+1}-0`:`<=${to}`}`.trim(),testSet=(set2,version,options)=>{for(let i2=0;i2<set2.length;i2++)if(!set2[i2].test(version))return!1;if(version.prerelease.length&&!options.includePrerelease){for(let i2=0;i2<set2.length;i2++)if(debug2(set2[i2].semver),set2[i2].semver!==Comparator2.ANY&&set2[i2].semver.prerelease.length>0){const allowed=set2[i2].semver;if(allowed.major===version.major&&allowed.minor===version.minor&&allowed.patch===version.patch)return!0}return!1}return!0};return range}function requireComparator(){if(hasRequiredComparator)return comparator;hasRequiredComparator=1;const ANY2=Symbol("SemVer ANY");class Comparator2{static get ANY(){return ANY2}constructor(comp,options){if(options=parseOptions2(options),comp instanceof Comparator2){if(comp.loose===!!options.loose)return comp;comp=comp.value}debug2("comparator",comp,options),this.options=options,this.loose=!!options.loose,this.parse(comp),this.semver===ANY2?this.value="":this.value=this.operator+this.semver.version,debug2("comp",this)}parse(comp){const r=this.options.loose?re2[t2.COMPARATORLOOSE]:re2[t2.COMPARATOR],m=comp.match(r);if(!m)throw new TypeError(`Invalid comparator: ${comp}`);this.operator=void 0!==m[1]?m[1]:"","="===this.operator&&(this.operator=""),m[2]?this.semver=new SemVer2(m[2],this.options.loose):this.semver=ANY2}toString(){return this.value}test(version){if(debug2("Comparator.test",version,this.options.loose),this.semver===ANY2||version===ANY2)return!0;if("string"==typeof version)try{version=new SemVer2(version,this.options)}catch(er){return!1}return cmp2(version,this.operator,this.semver,this.options)}intersects(comp,options){if(!(comp instanceof Comparator2))throw new TypeError("a Comparator is required");if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),""===this.operator)return""===this.value||new Range2(comp.value,options).test(this.value);if(""===comp.operator)return""===comp.value||new Range2(this.value,options).test(comp.semver);const sameDirectionIncreasing=!(">="!==this.operator&&">"!==this.operator||">="!==comp.operator&&">"!==comp.operator),sameDirectionDecreasing=!("<="!==this.operator&&"<"!==this.operator||"<="!==comp.operator&&"<"!==comp.operator),sameSemVer=this.semver.version===comp.semver.version,differentDirectionsInclusive=!(">="!==this.operator&&"<="!==this.operator||">="!==comp.operator&&"<="!==comp.operator),oppositeDirectionsLessThan=cmp2(this.semver,"<",comp.semver,options)&&(">="===this.operator||">"===this.operator)&&("<="===comp.operator||"<"===comp.operator),oppositeDirectionsGreaterThan=cmp2(this.semver,">",comp.semver,options)&&("<="===this.operator||"<"===this.operator)&&(">="===comp.operator||">"===comp.operator);return sameDirectionIncreasing||sameDirectionDecreasing||sameSemVer&&differentDirectionsInclusive||oppositeDirectionsLessThan||oppositeDirectionsGreaterThan}}comparator=Comparator2;const parseOptions2=parseOptions_1,{re:re2,t:t2}=reExports,cmp2=cmp_1,debug2=debug_1,SemVer2=semver$1,Range2=requireRange();return comparator}const Range$9=requireRange();var satisfies_1=(version,range2,options)=>{try{range2=new Range$9(range2,options)}catch(er){return!1}return range2.test(version)};const Range$8=requireRange();var toComparators_1=(range2,options)=>new Range$8(range2,options).set.map((comp=>comp.map((c=>c.value)).join(" ").trim().split(" ")));const SemVer$4=semver$1,Range$7=requireRange();var maxSatisfying_1=(versions2,range2,options)=>{let max2=null,maxSV=null,rangeObj=null;try{rangeObj=new Range$7(range2,options)}catch(er){return null}return versions2.forEach((v=>{rangeObj.test(v)&&(max2&&-1!==maxSV.compare(v)||(max2=v,maxSV=new SemVer$4(max2,options)))})),max2};const SemVer$3=semver$1,Range$6=requireRange();var minSatisfying_1=(versions2,range2,options)=>{let min2=null,minSV=null,rangeObj=null;try{rangeObj=new Range$6(range2,options)}catch(er){return null}return versions2.forEach((v=>{rangeObj.test(v)&&(min2&&1!==minSV.compare(v)||(min2=v,minSV=new SemVer$3(min2,options)))})),min2};const SemVer$2=semver$1,Range$5=requireRange(),gt$2=gt_1;var minVersion_1=(range2,loose)=>{range2=new Range$5(range2,loose);let minver=new SemVer$2("0.0.0");if(range2.test(minver))return minver;if(minver=new SemVer$2("0.0.0-0"),range2.test(minver))return minver;minver=null;for(let i2=0;i2<range2.set.length;++i2){const comparators=range2.set[i2];let setMin=null;comparators.forEach((comparator2=>{const compver=new SemVer$2(comparator2.semver.version);switch(comparator2.operator){case">":0===compver.prerelease.length?compver.patch++:compver.prerelease.push(0),compver.raw=compver.format();case"":case">=":setMin&&!gt$2(compver,setMin)||(setMin=compver);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${comparator2.operator}`)}})),!setMin||minver&&!gt$2(minver,setMin)||(minver=setMin)}return minver&&range2.test(minver)?minver:null};const Range$4=requireRange();var valid$1=(range2,options)=>{try{return new Range$4(range2,options).range||"*"}catch(er){return null}};const SemVer$1=semver$1,Comparator$2=requireComparator(),{ANY:ANY$1}=Comparator$2,Range$3=requireRange(),satisfies$3=satisfies_1,gt$1=gt_1,lt$1=lt_1,lte$1=lte_1,gte$1=gte_1;var outside_1=(version,range2,hilo,options)=>{let gtfn,ltefn,ltfn,comp,ecomp;switch(version=new SemVer$1(version,options),range2=new Range$3(range2,options),hilo){case">":gtfn=gt$1,ltefn=lte$1,ltfn=lt$1,comp=">",ecomp=">=";break;case"<":gtfn=lt$1,ltefn=gte$1,ltfn=gt$1,comp="<",ecomp="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(satisfies$3(version,range2,options))return!1;for(let i2=0;i2<range2.set.length;++i2){const comparators=range2.set[i2];let high=null,low=null;if(comparators.forEach((comparator2=>{comparator2.semver===ANY$1&&(comparator2=new Comparator$2(">=0.0.0")),high=high||comparator2,low=low||comparator2,gtfn(comparator2.semver,high.semver,options)?high=comparator2:ltfn(comparator2.semver,low.semver,options)&&(low=comparator2)})),high.operator===comp||high.operator===ecomp)return!1;if((!low.operator||low.operator===comp)&&ltefn(version,low.semver))return!1;if(low.operator===ecomp&&ltfn(version,low.semver))return!1}return!0};const outside$2=outside_1;var gtr_1=(version,range2,options)=>outside$2(version,range2,">",options);const outside$1=outside_1;var ltr_1=(version,range2,options)=>outside$1(version,range2,"<",options);const Range$2=requireRange();var intersects_1=(r1,r2,options)=>(r1=new Range$2(r1,options),r2=new Range$2(r2,options),r1.intersects(r2));const satisfies$2=satisfies_1,compare$2=compare_1;const Range$1=requireRange(),Comparator$1=requireComparator(),{ANY:ANY}=Comparator$1,satisfies$1=satisfies_1,compare$1=compare_1,simpleSubset=(sub,dom,options)=>{if(sub===dom)return!0;if(1===sub.length&&sub[0].semver===ANY){if(1===dom.length&&dom[0].semver===ANY)return!0;sub=options.includePrerelease?[new Comparator$1(">=0.0.0-0")]:[new Comparator$1(">=0.0.0")]}if(1===dom.length&&dom[0].semver===ANY){if(options.includePrerelease)return!0;dom=[new Comparator$1(">=0.0.0")]}const eqSet=new Set;let gt2,lt2,gtltComp,higher,lower,hasDomLT,hasDomGT;for(const c of sub)">"===c.operator||">="===c.operator?gt2=higherGT(gt2,c,options):"<"===c.operator||"<="===c.operator?lt2=lowerLT(lt2,c,options):eqSet.add(c.semver);if(eqSet.size>1)return null;if(gt2&&lt2){if(gtltComp=compare$1(gt2.semver,lt2.semver,options),gtltComp>0)return null;if(0===gtltComp&&(">="!==gt2.operator||"<="!==lt2.operator))return null}for(const eq2 of eqSet){if(gt2&&!satisfies$1(eq2,String(gt2),options))return null;if(lt2&&!satisfies$1(eq2,String(lt2),options))return null;for(const c of dom)if(!satisfies$1(eq2,String(c),options))return!1;return!0}let needDomLTPre=!(!lt2||options.includePrerelease||!lt2.semver.prerelease.length)&&lt2.semver,needDomGTPre=!(!gt2||options.includePrerelease||!gt2.semver.prerelease.length)&&gt2.semver;needDomLTPre&&1===needDomLTPre.prerelease.length&&"<"===lt2.operator&&0===needDomLTPre.prerelease[0]&&(needDomLTPre=!1);for(const c of dom){if(hasDomGT=hasDomGT||">"===c.operator||">="===c.operator,hasDomLT=hasDomLT||"<"===c.operator||"<="===c.operator,gt2)if(needDomGTPre&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===needDomGTPre.major&&c.semver.minor===needDomGTPre.minor&&c.semver.patch===needDomGTPre.patch&&(needDomGTPre=!1),">"===c.operator||">="===c.operator){if(higher=higherGT(gt2,c,options),higher===c&&higher!==gt2)return!1}else if(">="===gt2.operator&&!satisfies$1(gt2.semver,String(c),options))return!1;if(lt2)if(needDomLTPre&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===needDomLTPre.major&&c.semver.minor===needDomLTPre.minor&&c.semver.patch===needDomLTPre.patch&&(needDomLTPre=!1),"<"===c.operator||"<="===c.operator){if(lower=lowerLT(lt2,c,options),lower===c&&lower!==lt2)return!1}else if("<="===lt2.operator&&!satisfies$1(lt2.semver,String(c),options))return!1;if(!c.operator&&(lt2||gt2)&&0!==gtltComp)return!1}return!(gt2&&hasDomLT&&!lt2&&0!==gtltComp)&&(!(lt2&&hasDomGT&&!gt2&&0!==gtltComp)&&(!needDomGTPre&&!needDomLTPre))},higherGT=(a,b,options)=>{if(!a)return b;const comp=compare$1(a.semver,b.semver,options);return comp>0?a:comp<0||">"===b.operator&&">="===a.operator?b:a},lowerLT=(a,b,options)=>{if(!a)return b;const comp=compare$1(a.semver,b.semver,options);return comp<0?a:comp>0||"<"===b.operator&&"<="===a.operator?b:a};var subset_1=(sub,dom,options={})=>{if(sub===dom)return!0;sub=new Range$1(sub,options),dom=new Range$1(dom,options);let sawNonNull=!1;OUTER:for(const simpleSub of sub.set){for(const simpleDom of dom.set){const isSub=simpleSubset(simpleSub,simpleDom,options);if(sawNonNull=sawNonNull||null!==isSub,isSub)continue OUTER}if(sawNonNull)return!1}return!0};const internalRe=reExports,constants=constants$1,SemVer=semver$1,identifiers=identifiers$1;var semver={parse:parse_1,valid:valid_1,clean:clean_1,inc:inc_1,diff:diff_1,major:major_1,minor:minor_1,patch:patch_1,prerelease:prerelease_1,compare:compare_1,rcompare:rcompare_1,compareLoose:compareLoose_1,compareBuild:compareBuild_1,sort:sort_1,rsort:rsort_1,gt:gt_1,lt:lt_1,eq:eq_1,neq:neq_1,gte:gte_1,lte:lte_1,cmp:cmp_1,coerce:coerce_1,Comparator:requireComparator(),Range:requireRange(),satisfies:satisfies_1,toComparators:toComparators_1,maxSatisfying:maxSatisfying_1,minSatisfying:minSatisfying_1,minVersion:minVersion_1,validRange:valid$1,outside:outside_1,gtr:gtr_1,ltr:ltr_1,intersects:intersects_1,simplifyRange:(versions2,range2,options)=>{const set2=[];let first=null,prev=null;const v=versions2.sort(((a,b)=>compare$2(a,b,options)));for(const version of v){satisfies$2(version,range2,options)?(prev=version,first||(first=version)):(prev&&set2.push([first,prev]),prev=null,first=null)}first&&set2.push([first,null]);const ranges=[];for(const[min2,max2]of set2)min2===max2?ranges.push(min2):max2||min2!==v[0]?max2?min2===v[0]?ranges.push(`<=${max2}`):ranges.push(`${min2} - ${max2}`):ranges.push(`>=${min2}`):ranges.push("*");const simplified=ranges.join(" || "),original="string"==typeof range2.raw?range2.raw:String(range2);return simplified.length<original.length?simplified:range2},subset:subset_1,SemVer:SemVer,re:internalRe.re,src:internalRe.src,tokens:internalRe.t,SEMVER_SPEC_VERSION:constants.SEMVER_SPEC_VERSION,compareIdentifiers:identifiers.compareIdentifiers,rcompareIdentifiers:identifiers.rcompareIdentifiers};!function(exports){Object.defineProperty(exports,"__esModule",{value:!0}),exports.satisfiesVersionRange=exports.gtRange=exports.gtVersion=exports.assertIsSemVerRange=exports.assertIsSemVerVersion=exports.isValidSemVerRange=exports.isValidSemVerVersion=exports.VersionRangeStruct=exports.VersionStruct=void 0;const semver_1=semver,superstruct_12=require$$1,assert_12=assert$2;exports.VersionStruct=(0,superstruct_12.refine)((0,superstruct_12.string)(),"Version",(value=>null!==(0,semver_1.valid)(value)||`Expected SemVer version, got "${value}"`)),exports.VersionRangeStruct=(0,superstruct_12.refine)((0,superstruct_12.string)(),"Version range",(value=>null!==(0,semver_1.validRange)(value)||`Expected SemVer range, got "${value}"`)),exports.isValidSemVerVersion=function(version){return(0,superstruct_12.is)(version,exports.VersionStruct)},exports.isValidSemVerRange=function(versionRange){return(0,superstruct_12.is)(versionRange,exports.VersionRangeStruct)},exports.assertIsSemVerVersion=function(version){(0,assert_12.assertStruct)(version,exports.VersionStruct)},exports.assertIsSemVerRange=function(range2){(0,assert_12.assertStruct)(range2,exports.VersionRangeStruct)},exports.gtVersion=function(version1,version2){return(0,semver_1.gt)(version1,version2)},exports.gtRange=function(version,range2){return(0,semver_1.gtr)(version,range2)},exports.satisfiesVersionRange=function(version,versionRange){return(0,semver_1.satisfies)(version,versionRange,{includePrerelease:!0})}}(versions),function(exports){var __createBinding=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);var desc=Object.getOwnPropertyDescriptor(m,k);desc&&!("get"in desc?!m.__esModule:desc.writable||desc.configurable)||(desc={enumerable:!0,get:function(){return m[k]}}),Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=commonjsGlobal&&commonjsGlobal.__exportStar||function(m,exports2){for(var p in m)"default"===p||Object.prototype.hasOwnProperty.call(exports2,p)||__createBinding(exports2,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(assert$2,exports),__exportStar(base64$1,exports),__exportStar(bytes,exports),__exportStar(checksum,exports),__exportStar(coercers,exports),__exportStar(collections,exports),__exportStar(hex,exports),__exportStar(json,exports),__exportStar(logging,exports),__exportStar(misc,exports),__exportStar(number,exports),__exportStar(opaque,exports),__exportStar(time,exports),__exportStar(versions,exports)}(dist$5),Object.defineProperty(utils$2,"__esModule",{value:!0}),utils$2.isValidStreamMessage=utils$2.DEDICATED_WORKER_NAME=void 0;const utils_1$8=dist$5;utils$2.DEDICATED_WORKER_NAME="dedicatedWorker",utils$2.isValidStreamMessage=function(message){return(0,utils_1$8.isObject)(message)&&Boolean(message.data)&&("number"==typeof message.data||"object"==typeof message.data||"string"==typeof message.data)},Object.defineProperty(WindowPostMessageStream$1,"__esModule",{value:!0}),WindowPostMessageStream$1.WindowPostMessageStream=void 0;const BasePostMessageStream_1$3=BasePostMessageStream$1,utils_1$7=utils$2;class WindowPostMessageStream extends BasePostMessageStream_1$3.BasePostMessageStream{constructor({name:name,target:target,targetOrigin:targetOrigin=location.origin,targetWindow:targetWindow=window}){if(super(),"undefined"==typeof window||"function"!=typeof window.postMessage)throw new Error("window.postMessage is not a function. This class should only be instantiated in a Window.");this._name=name,this._target=target,this._targetOrigin=targetOrigin,this._targetWindow=targetWindow,this._onMessage=this._onMessage.bind(this),window.addEventListener("message",this._onMessage,!1),this._handshake()}_postMessage(data){this._targetWindow.postMessage({target:this._target,data:data},this._targetOrigin)}_onMessage(event){const message=event.data;"*"!==this._targetOrigin&&event.origin!==this._targetOrigin||event.source!==this._targetWindow||!(0,utils_1$7.isValidStreamMessage)(message)||message.target!==this._name||this._onData(message.data)}_destroy(){window.removeEventListener("message",this._onMessage,!1)}}WindowPostMessageStream$1.WindowPostMessageStream=WindowPostMessageStream;var WebWorkerPostMessageStream$1={};Object.defineProperty(WebWorkerPostMessageStream$1,"__esModule",{value:!0}),WebWorkerPostMessageStream$1.WebWorkerPostMessageStream=void 0;const BasePostMessageStream_1$2=BasePostMessageStream$1,utils_1$6=utils$2;class WebWorkerPostMessageStream extends BasePostMessageStream_1$2.BasePostMessageStream{constructor(){if("undefined"==typeof self||"undefined"==typeof WorkerGlobalScope||!(self instanceof WorkerGlobalScope))throw new Error("WorkerGlobalScope not found. This class should only be instantiated in a WebWorker.");super(),this._name=utils_1$6.DEDICATED_WORKER_NAME,self.onmessage=this._onMessage.bind(this),this._handshake()}_postMessage(data){self.postMessage({data:data})}_onMessage(event){const message=event.data;(0,utils_1$6.isValidStreamMessage)(message)&&message.target===this._name&&this._onData(message.data)}_destroy(){}}WebWorkerPostMessageStream$1.WebWorkerPostMessageStream=WebWorkerPostMessageStream;var WebWorkerParentPostMessageStream$1={};Object.defineProperty(WebWorkerParentPostMessageStream$1,"__esModule",{value:!0}),WebWorkerParentPostMessageStream$1.WebWorkerParentPostMessageStream=void 0;const BasePostMessageStream_1$1=BasePostMessageStream$1,utils_1$5=utils$2;class WebWorkerParentPostMessageStream extends BasePostMessageStream_1$1.BasePostMessageStream{constructor({worker:worker}){super(),this._target=utils_1$5.DEDICATED_WORKER_NAME,this._worker=worker,this._worker.onmessage=this._onMessage.bind(this),this._handshake()}_postMessage(data){this._worker.postMessage({target:this._target,data:data})}_onMessage(event){const message=event.data;(0,utils_1$5.isValidStreamMessage)(message)&&this._onData(message.data)}_destroy(){this._worker.onmessage=null,this._worker=null}}WebWorkerParentPostMessageStream$1.WebWorkerParentPostMessageStream=WebWorkerParentPostMessageStream;var _BrowserRuntimePostMessageStream_name,_BrowserRuntimePostMessageStream_target,BrowserRuntimePostMessageStream$1={},__classPrivateFieldSet=commonjsGlobal&&commonjsGlobal.__classPrivateFieldSet||function(receiver,state2,value,kind,f){if("m"===kind)throw new TypeError("Private method is not writable");if("a"===kind&&!f)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof state2?receiver!==state2||!f:!state2.has(receiver))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===kind?f.call(receiver,value):f?f.value=value:state2.set(receiver,value),value},__classPrivateFieldGet=commonjsGlobal&&commonjsGlobal.__classPrivateFieldGet||function(receiver,state2,kind,f){if("a"===kind&&!f)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof state2?receiver!==state2||!f:!state2.has(receiver))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===kind?f:"a"===kind?f.call(receiver):f?f.value:state2.get(receiver)};Object.defineProperty(BrowserRuntimePostMessageStream$1,"__esModule",{value:!0}),BrowserRuntimePostMessageStream$1.BrowserRuntimePostMessageStream=void 0;const BasePostMessageStream_1=BasePostMessageStream$1,utils_1$4=utils$2;class BrowserRuntimePostMessageStream extends BasePostMessageStream_1.BasePostMessageStream{constructor({name:name,target:target}){super(),_BrowserRuntimePostMessageStream_name.set(this,void 0),_BrowserRuntimePostMessageStream_target.set(this,void 0),__classPrivateFieldSet(this,_BrowserRuntimePostMessageStream_name,name,"f"),__classPrivateFieldSet(this,_BrowserRuntimePostMessageStream_target,target,"f"),this._onMessage=this._onMessage.bind(this),this._getRuntime().onMessage.addListener(this._onMessage),this._handshake()}_postMessage(data){this._getRuntime().sendMessage({target:__classPrivateFieldGet(this,_BrowserRuntimePostMessageStream_target,"f"),data:data})}_onMessage(message){(0,utils_1$4.isValidStreamMessage)(message)&&message.target===__classPrivateFieldGet(this,_BrowserRuntimePostMessageStream_name,"f")&&this._onData(message.data)}_getRuntime(){var _a,_b;if("chrome"in globalThis&&"function"==typeof(null===(_a=null===chrome||void 0===chrome?void 0:chrome.runtime)||void 0===_a?void 0:_a.sendMessage))return chrome.runtime;if("browser"in globalThis&&"function"==typeof(null===(_b=null===browser||void 0===browser?void 0:browser.runtime)||void 0===_b?void 0:_b.sendMessage))return browser.runtime;throw new Error("browser.runtime.sendMessage is not a function. This class should only be instantiated in a web extension.")}_destroy(){this._getRuntime().onMessage.removeListener(this._onMessage)}}BrowserRuntimePostMessageStream$1.BrowserRuntimePostMessageStream=BrowserRuntimePostMessageStream,_BrowserRuntimePostMessageStream_name=new WeakMap,_BrowserRuntimePostMessageStream_target=new WeakMap,function(exports){var __createBinding=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=commonjsGlobal&&commonjsGlobal.__exportStar||function(m,exports2){for(var p in m)"default"===p||Object.prototype.hasOwnProperty.call(exports2,p)||__createBinding(exports2,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(WindowPostMessageStream$1,exports),__exportStar(WebWorkerPostMessageStream$1,exports),__exportStar(WebWorkerParentPostMessageStream$1,exports),__exportStar(BrowserRuntimePostMessageStream$1,exports),__exportStar(BasePostMessageStream$1,exports)}(browser$3);var StreamProvider$1={},ObjectMultiplex$1={},readableBrowserExports={},readableBrowser={get exports(){return readableBrowserExports},set exports(v){readableBrowserExports=v}},processNextickArgsExports={},processNextickArgs={get exports(){return processNextickArgsExports},set exports(v){processNextickArgsExports=v}};"undefined"==typeof process||!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?processNextickArgs.exports={nextTick:function(fn,arg1,arg2,arg3){if("function"!=typeof fn)throw new TypeError('"callback" argument must be a function');var args,i2,len2=arguments.length;switch(len2){case 0:case 1:return process.nextTick(fn);case 2:return process.nextTick((function(){fn.call(null,arg1)}));case 3:return process.nextTick((function(){fn.call(null,arg1,arg2)}));case 4:return process.nextTick((function(){fn.call(null,arg1,arg2,arg3)}));default:for(args=new Array(len2-1),i2=0;i2<args.length;)args[i2++]=arguments[i2];return process.nextTick((function(){fn.apply(null,args)}))}}}:processNextickArgs.exports=process;var hasRequiredBufferList,streamBrowser=eventsExports.EventEmitter,BufferListExports={},BufferList={get exports(){return BufferListExports},set exports(v){BufferListExports=v}};function requireBufferList(){return hasRequiredBufferList||(hasRequiredBufferList=1,function(module){var Buffer2=safeBufferExports.Buffer,util2=require$$2;module.exports=function(){function BufferList2(){!function(instance2,Constructor){if(!(instance2 instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,BufferList2),this.head=null,this.tail=null,this.length=0}return BufferList2.prototype.push=function(v){var entry={data:v,next:null};this.length>0?this.tail.next=entry:this.head=entry,this.tail=entry,++this.length},BufferList2.prototype.unshift=function(v){var entry={data:v,next:this.head};0===this.length&&(this.tail=entry),this.head=entry,++this.length},BufferList2.prototype.shift=function(){if(0!==this.length){var ret=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,ret}},BufferList2.prototype.clear=function(){this.head=this.tail=null,this.length=0},BufferList2.prototype.join=function(s){if(0===this.length)return"";for(var p=this.head,ret=""+p.data;p=p.next;)ret+=s+p.data;return ret},BufferList2.prototype.concat=function(n){if(0===this.length)return Buffer2.alloc(0);for(var src,target,offset,ret=Buffer2.allocUnsafe(n>>>0),p=this.head,i2=0;p;)src=p.data,target=ret,offset=i2,src.copy(target,offset),i2+=p.data.length,p=p.next;return ret},BufferList2}(),util2&&util2.inspect&&util2.inspect.custom&&(module.exports.prototype[util2.inspect.custom]=function(){var obj=util2.inspect({length:this.length});return this.constructor.name+" "+obj})}(BufferList)),BufferListExports}var pna=processNextickArgsExports;function emitErrorNT(self2,err){self2.emit("error",err)}var _stream_writable,hasRequired_stream_writable,_stream_duplex,hasRequired_stream_duplex,destroy_1={destroy:function(err,cb){var _this=this,readableDestroyed=this._readableState&&this._readableState.destroyed,writableDestroyed=this._writableState&&this._writableState.destroyed;return readableDestroyed||writableDestroyed?(cb?cb(err):err&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,pna.nextTick(emitErrorNT,this,err)):pna.nextTick(emitErrorNT,this,err)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(err||null,(function(err2){!cb&&err2?_this._writableState?_this._writableState.errorEmitted||(_this._writableState.errorEmitted=!0,pna.nextTick(emitErrorNT,_this,err2)):pna.nextTick(emitErrorNT,_this,err2):cb&&cb(err2)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}};function require_stream_writable(){if(hasRequired_stream_writable)return _stream_writable;hasRequired_stream_writable=1;var pna2=processNextickArgsExports;function CorkedRequest(state2){var _this=this;this.next=null,this.entry=null,this.finish=function(){!function(corkReq,state2,err){var entry=corkReq.entry;corkReq.entry=null;for(;entry;){var cb=entry.callback;state2.pendingcb--,cb(err),entry=entry.next}state2.corkedRequestsFree.next=corkReq}(_this,state2)}}_stream_writable=Writable;var Duplex2,asyncWrite=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:pna2.nextTick;Writable.WritableState=WritableState;var util2=Object.create(util$4);util2.inherits=inherits_browserExports;var internalUtil={deprecate:browser$2},Stream2=streamBrowser,Buffer2=safeBufferExports.Buffer,OurUint8Array=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){};var realHasInstance,destroyImpl2=destroy_1;function nop2(){}function WritableState(options,stream2){Duplex2=Duplex2||require_stream_duplex(),options=options||{};var isDuplex=stream2 instanceof Duplex2;this.objectMode=!!options.objectMode,isDuplex&&(this.objectMode=this.objectMode||!!options.writableObjectMode);var hwm=options.highWaterMark,writableHwm=options.writableHighWaterMark,defaultHwm=this.objectMode?16:16384;this.highWaterMark=hwm||0===hwm?hwm:isDuplex&&(writableHwm||0===writableHwm)?writableHwm:defaultHwm,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var noDecode=!1===options.decodeStrings;this.decodeStrings=!noDecode,this.defaultEncoding=options.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(er){!function(stream2,er){var state2=stream2._writableState,sync=state2.sync,cb=state2.writecb;if(function(state2){state2.writing=!1,state2.writecb=null,state2.length-=state2.writelen,state2.writelen=0}(state2),er)!function(stream2,state2,sync,er,cb){--state2.pendingcb,sync?(pna2.nextTick(cb,er),pna2.nextTick(finishMaybe,stream2,state2),stream2._writableState.errorEmitted=!0,stream2.emit("error",er)):(cb(er),stream2._writableState.errorEmitted=!0,stream2.emit("error",er),finishMaybe(stream2,state2))}(stream2,state2,sync,er,cb);else{var finished2=needFinish(state2);finished2||state2.corked||state2.bufferProcessing||!state2.bufferedRequest||clearBuffer(stream2,state2),sync?asyncWrite(afterWrite,stream2,state2,finished2,cb):afterWrite(stream2,state2,finished2,cb)}}(stream2,er)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new CorkedRequest(this)}function Writable(options){if(Duplex2=Duplex2||require_stream_duplex(),!(realHasInstance.call(Writable,this)||this instanceof Duplex2))return new Writable(options);this._writableState=new WritableState(options,this),this.writable=!0,options&&("function"==typeof options.write&&(this._write=options.write),"function"==typeof options.writev&&(this._writev=options.writev),"function"==typeof options.destroy&&(this._destroy=options.destroy),"function"==typeof options.final&&(this._final=options.final)),Stream2.call(this)}function doWrite(stream2,state2,writev,len2,chunk,encoding,cb){state2.writelen=len2,state2.writecb=cb,state2.writing=!0,state2.sync=!0,writev?stream2._writev(chunk,state2.onwrite):stream2._write(chunk,encoding,state2.onwrite),state2.sync=!1}function afterWrite(stream2,state2,finished2,cb){finished2||function(stream2,state2){0===state2.length&&state2.needDrain&&(state2.needDrain=!1,stream2.emit("drain"))}(stream2,state2),state2.pendingcb--,cb(),finishMaybe(stream2,state2)}function clearBuffer(stream2,state2){state2.bufferProcessing=!0;var entry=state2.bufferedRequest;if(stream2._writev&&entry&&entry.next){var l=state2.bufferedRequestCount,buffer2=new Array(l),holder=state2.corkedRequestsFree;holder.entry=entry;for(var count=0,allBuffers=!0;entry;)buffer2[count]=entry,entry.isBuf||(allBuffers=!1),entry=entry.next,count+=1;buffer2.allBuffers=allBuffers,doWrite(stream2,state2,!0,state2.length,buffer2,"",holder.finish),state2.pendingcb++,state2.lastBufferedRequest=null,holder.next?(state2.corkedRequestsFree=holder.next,holder.next=null):state2.corkedRequestsFree=new CorkedRequest(state2),state2.bufferedRequestCount=0}else{for(;entry;){var chunk=entry.chunk,encoding=entry.encoding,cb=entry.callback;if(doWrite(stream2,state2,!1,state2.objectMode?1:chunk.length,chunk,encoding,cb),entry=entry.next,state2.bufferedRequestCount--,state2.writing)break}null===entry&&(state2.lastBufferedRequest=null)}state2.bufferedRequest=entry,state2.bufferProcessing=!1}function needFinish(state2){return state2.ending&&0===state2.length&&null===state2.bufferedRequest&&!state2.finished&&!state2.writing}function callFinal(stream2,state2){stream2._final((function(err){state2.pendingcb--,err&&stream2.emit("error",err),state2.prefinished=!0,stream2.emit("prefinish"),finishMaybe(stream2,state2)}))}function finishMaybe(stream2,state2){var need=needFinish(state2);return need&&(!function(stream2,state2){state2.prefinished||state2.finalCalled||("function"==typeof stream2._final?(state2.pendingcb++,state2.finalCalled=!0,pna2.nextTick(callFinal,stream2,state2)):(state2.prefinished=!0,stream2.emit("prefinish")))}(stream2,state2),0===state2.pendingcb&&(state2.finished=!0,stream2.emit("finish"))),need}return util2.inherits(Writable,Stream2),WritableState.prototype.getBuffer=function(){for(var current=this.bufferedRequest,out=[];current;)out.push(current),current=current.next;return out},function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:internalUtil.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(_){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(realHasInstance=Function.prototype[Symbol.hasInstance],Object.defineProperty(Writable,Symbol.hasInstance,{value:function(object2){return!!realHasInstance.call(this,object2)||this===Writable&&(object2&&object2._writableState instanceof WritableState)}})):realHasInstance=function(object2){return object2 instanceof this},Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},Writable.prototype.write=function(chunk,encoding,cb){var obj,state2=this._writableState,ret=!1,isBuf=!state2.objectMode&&(obj=chunk,Buffer2.isBuffer(obj)||obj instanceof OurUint8Array);return isBuf&&!Buffer2.isBuffer(chunk)&&(chunk=function(chunk){return Buffer2.from(chunk)}(chunk)),"function"==typeof encoding&&(cb=encoding,encoding=null),isBuf?encoding="buffer":encoding||(encoding=state2.defaultEncoding),"function"!=typeof cb&&(cb=nop2),state2.ended?function(stream2,cb){var er=new Error("write after end");stream2.emit("error",er),pna2.nextTick(cb,er)}(this,cb):(isBuf||function(stream2,state2,chunk,cb){var valid2=!0,er=!1;return null===chunk?er=new TypeError("May not write null values to stream"):"string"==typeof chunk||void 0===chunk||state2.objectMode||(er=new TypeError("Invalid non-string/buffer chunk")),er&&(stream2.emit("error",er),pna2.nextTick(cb,er),valid2=!1),valid2}(this,state2,chunk,cb))&&(state2.pendingcb++,ret=function(stream2,state2,isBuf,chunk,encoding,cb){if(!isBuf){var newChunk=function(state2,chunk,encoding){state2.objectMode||!1===state2.decodeStrings||"string"!=typeof chunk||(chunk=Buffer2.from(chunk,encoding));return chunk}(state2,chunk,encoding);chunk!==newChunk&&(isBuf=!0,encoding="buffer",chunk=newChunk)}var len2=state2.objectMode?1:chunk.length;state2.length+=len2;var ret=state2.length<state2.highWaterMark;ret||(state2.needDrain=!0);if(state2.writing||state2.corked){var last=state2.lastBufferedRequest;state2.lastBufferedRequest={chunk:chunk,encoding:encoding,isBuf:isBuf,callback:cb,next:null},last?last.next=state2.lastBufferedRequest:state2.bufferedRequest=state2.lastBufferedRequest,state2.bufferedRequestCount+=1}else doWrite(stream2,state2,!1,len2,chunk,encoding,cb);return ret}(this,state2,isBuf,chunk,encoding,cb)),ret},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){var state2=this._writableState;state2.corked&&(state2.corked--,state2.writing||state2.corked||state2.bufferProcessing||!state2.bufferedRequest||clearBuffer(this,state2))},Writable.prototype.setDefaultEncoding=function(encoding){if("string"==typeof encoding&&(encoding=encoding.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((encoding+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+encoding);return this._writableState.defaultEncoding=encoding,this},Object.defineProperty(Writable.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Writable.prototype._write=function(chunk,encoding,cb){cb(new Error("_write() is not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(chunk,encoding,cb){var state2=this._writableState;"function"==typeof chunk?(cb=chunk,chunk=null,encoding=null):"function"==typeof encoding&&(cb=encoding,encoding=null),null!=chunk&&this.write(chunk,encoding),state2.corked&&(state2.corked=1,this.uncork()),state2.ending||function(stream2,state2,cb){state2.ending=!0,finishMaybe(stream2,state2),cb&&(state2.finished?pna2.nextTick(cb):stream2.once("finish",cb));state2.ended=!0,stream2.writable=!1}(this,state2,cb)},Object.defineProperty(Writable.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(value){this._writableState&&(this._writableState.destroyed=value)}}),Writable.prototype.destroy=destroyImpl2.destroy,Writable.prototype._undestroy=destroyImpl2.undestroy,Writable.prototype._destroy=function(err,cb){this.end(),cb(err)},_stream_writable}function require_stream_duplex(){if(hasRequired_stream_duplex)return _stream_duplex;hasRequired_stream_duplex=1;var pna2=processNextickArgsExports,objectKeys=Object.keys||function(obj){var keys2=[];for(var key in obj)keys2.push(key);return keys2};_stream_duplex=Duplex2;var util2=Object.create(util$4);util2.inherits=inherits_browserExports;var Readable2=require_stream_readable(),Writable=require_stream_writable();util2.inherits(Duplex2,Readable2);for(var keys=objectKeys(Writable.prototype),v=0;v<keys.length;v++){var method=keys[v];Duplex2.prototype[method]||(Duplex2.prototype[method]=Writable.prototype[method])}function Duplex2(options){if(!(this instanceof Duplex2))return new Duplex2(options);Readable2.call(this,options),Writable.call(this,options),options&&!1===options.readable&&(this.readable=!1),options&&!1===options.writable&&(this.writable=!1),this.allowHalfOpen=!0,options&&!1===options.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",onend)}function onend(){this.allowHalfOpen||this._writableState.ended||pna2.nextTick(onEndNT,this)}function onEndNT(self2){self2.end()}return Object.defineProperty(Duplex2.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(Duplex2.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(value){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=value,this._writableState.destroyed=value)}}),Duplex2.prototype._destroy=function(err,cb){this.push(null),this.end(),pna2.nextTick(cb,err)},_stream_duplex}var hasRequiredString_decoder,_stream_readable,hasRequired_stream_readable,string_decoder={};function requireString_decoder(){if(hasRequiredString_decoder)return string_decoder;hasRequiredString_decoder=1;var Buffer2=safeBufferExports.Buffer,isEncoding2=Buffer2.isEncoding||function(encoding){switch((encoding=""+encoding)&&encoding.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function StringDecoder2(encoding){var nb;switch(this.encoding=function(enc){var nenc=function(enc){if(!enc)return"utf8";for(var retried;;)switch(enc){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return enc;default:if(retried)return;enc=(""+enc).toLowerCase(),retried=!0}}(enc);if("string"!=typeof nenc&&(Buffer2.isEncoding===isEncoding2||!isEncoding2(enc)))throw new Error("Unknown encoding: "+enc);return nenc||enc}(encoding),this.encoding){case"utf16le":this.text=utf16Text2,this.end=utf16End2,nb=4;break;case"utf8":this.fillLast=utf8FillLast2,nb=4;break;case"base64":this.text=base64Text2,this.end=base64End2,nb=3;break;default:return this.write=simpleWrite2,void(this.end=simpleEnd2)}this.lastNeed=0,this.lastTotal=0,this.lastChar=Buffer2.allocUnsafe(nb)}function utf8CheckByte2(byte){return byte<=127?0:byte>>5==6?2:byte>>4==14?3:byte>>3==30?4:byte>>6==2?-1:-2}function utf8FillLast2(buf){var p=this.lastTotal-this.lastNeed,r=function(self2,buf,p){if(128!=(192&buf[0]))return self2.lastNeed=0,"�";if(self2.lastNeed>1&&buf.length>1){if(128!=(192&buf[1]))return self2.lastNeed=1,"�";if(self2.lastNeed>2&&buf.length>2&&128!=(192&buf[2]))return self2.lastNeed=2,"�"}}(this,buf);return void 0!==r?r:this.lastNeed<=buf.length?(buf.copy(this.lastChar,p,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(buf.copy(this.lastChar,p,0,buf.length),void(this.lastNeed-=buf.length))}function utf16Text2(buf,i2){if((buf.length-i2)%2==0){var r=buf.toString("utf16le",i2);if(r){var c=r.charCodeAt(r.length-1);if(c>=55296&&c<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=buf[buf.length-2],this.lastChar[1]=buf[buf.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=buf[buf.length-1],buf.toString("utf16le",i2,buf.length-1)}function utf16End2(buf){var r=buf&&buf.length?this.write(buf):"";if(this.lastNeed){var end=this.lastTotal-this.lastNeed;return r+this.lastChar.toString("utf16le",0,end)}return r}function base64Text2(buf,i2){var n=(buf.length-i2)%3;return 0===n?buf.toString("base64",i2):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=buf[buf.length-1]:(this.lastChar[0]=buf[buf.length-2],this.lastChar[1]=buf[buf.length-1]),buf.toString("base64",i2,buf.length-n))}function base64End2(buf){var r=buf&&buf.length?this.write(buf):"";return this.lastNeed?r+this.lastChar.toString("base64",0,3-this.lastNeed):r}function simpleWrite2(buf){return buf.toString(this.encoding)}function simpleEnd2(buf){return buf&&buf.length?this.write(buf):""}return string_decoder.StringDecoder=StringDecoder2,StringDecoder2.prototype.write=function(buf){if(0===buf.length)return"";var r,i2;if(this.lastNeed){if(void 0===(r=this.fillLast(buf)))return"";i2=this.lastNeed,this.lastNeed=0}else i2=0;return i2<buf.length?r?r+this.text(buf,i2):this.text(buf,i2):r||""},StringDecoder2.prototype.end=function(buf){var r=buf&&buf.length?this.write(buf):"";return this.lastNeed?r+"�":r},StringDecoder2.prototype.text=function(buf,i2){var total=function(self2,buf,i2){var j=buf.length-1;if(j<i2)return 0;var nb=utf8CheckByte2(buf[j]);if(nb>=0)return nb>0&&(self2.lastNeed=nb-1),nb;if(--j<i2||-2===nb)return 0;if(nb=utf8CheckByte2(buf[j]),nb>=0)return nb>0&&(self2.lastNeed=nb-2),nb;if(--j<i2||-2===nb)return 0;if(nb=utf8CheckByte2(buf[j]),nb>=0)return nb>0&&(2===nb?nb=0:self2.lastNeed=nb-3),nb;return 0}(this,buf,i2);if(!this.lastNeed)return buf.toString("utf8",i2);this.lastTotal=total;var end=buf.length-(total-this.lastNeed);return buf.copy(this.lastChar,0,end),buf.toString("utf8",i2,end)},StringDecoder2.prototype.fillLast=function(buf){if(this.lastNeed<=buf.length)return buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);buf.copy(this.lastChar,this.lastTotal-this.lastNeed,0,buf.length),this.lastNeed-=buf.length},string_decoder}function require_stream_readable(){if(hasRequired_stream_readable)return _stream_readable;hasRequired_stream_readable=1;var pna2=processNextickArgsExports;_stream_readable=Readable2;var Duplex2,isArray2=isarray;Readable2.ReadableState=ReadableState,eventsExports.EventEmitter;var EElistenerCount=function(emitter,type2){return emitter.listeners(type2).length},Stream2=streamBrowser,Buffer2=safeBufferExports.Buffer,OurUint8Array=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){};var util2=Object.create(util$4);util2.inherits=inherits_browserExports;var debugUtil=require$$2,debug2=void 0;debug2=debugUtil&&debugUtil.debuglog?debugUtil.debuglog("stream"):function(){};var StringDecoder2,BufferList2=requireBufferList(),destroyImpl2=destroy_1;util2.inherits(Readable2,Stream2);var kProxyEvents=["error","close","destroy","pause","resume"];function ReadableState(options,stream2){options=options||{};var isDuplex=stream2 instanceof(Duplex2=Duplex2||require_stream_duplex());this.objectMode=!!options.objectMode,isDuplex&&(this.objectMode=this.objectMode||!!options.readableObjectMode);var hwm=options.highWaterMark,readableHwm=options.readableHighWaterMark,defaultHwm=this.objectMode?16:16384;this.highWaterMark=hwm||0===hwm?hwm:isDuplex&&(readableHwm||0===readableHwm)?readableHwm:defaultHwm,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new BufferList2,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=options.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,options.encoding&&(StringDecoder2||(StringDecoder2=requireString_decoder().StringDecoder),this.decoder=new StringDecoder2(options.encoding),this.encoding=options.encoding)}function Readable2(options){if(Duplex2=Duplex2||require_stream_duplex(),!(this instanceof Readable2))return new Readable2(options);this._readableState=new ReadableState(options,this),this.readable=!0,options&&("function"==typeof options.read&&(this._read=options.read),"function"==typeof options.destroy&&(this._destroy=options.destroy)),Stream2.call(this)}function readableAddChunk(stream2,chunk,encoding,addToFront,skipChunkCheck){var er,state2=stream2._readableState;null===chunk?(state2.reading=!1,function(stream2,state2){if(state2.ended)return;if(state2.decoder){var chunk=state2.decoder.end();chunk&&chunk.length&&(state2.buffer.push(chunk),state2.length+=state2.objectMode?1:chunk.length)}state2.ended=!0,emitReadable(stream2)}(stream2,state2)):(skipChunkCheck||(er=function(state2,chunk){var er;obj=chunk,Buffer2.isBuffer(obj)||obj instanceof OurUint8Array||"string"==typeof chunk||void 0===chunk||state2.objectMode||(er=new TypeError("Invalid non-string/buffer chunk"));var obj;return er}(state2,chunk)),er?stream2.emit("error",er):state2.objectMode||chunk&&chunk.length>0?("string"==typeof chunk||state2.objectMode||Object.getPrototypeOf(chunk)===Buffer2.prototype||(chunk=function(chunk){return Buffer2.from(chunk)}(chunk)),addToFront?state2.endEmitted?stream2.emit("error",new Error("stream.unshift() after end event")):addChunk(stream2,state2,chunk,!0):state2.ended?stream2.emit("error",new Error("stream.push() after EOF")):(state2.reading=!1,state2.decoder&&!encoding?(chunk=state2.decoder.write(chunk),state2.objectMode||0!==chunk.length?addChunk(stream2,state2,chunk,!1):maybeReadMore(stream2,state2)):addChunk(stream2,state2,chunk,!1))):addToFront||(state2.reading=!1));return function(state2){return!state2.ended&&(state2.needReadable||state2.length<state2.highWaterMark||0===state2.length)}(state2)}function addChunk(stream2,state2,chunk,addToFront){state2.flowing&&0===state2.length&&!state2.sync?(stream2.emit("data",chunk),stream2.read(0)):(state2.length+=state2.objectMode?1:chunk.length,addToFront?state2.buffer.unshift(chunk):state2.buffer.push(chunk),state2.needReadable&&emitReadable(stream2)),maybeReadMore(stream2,state2)}Object.defineProperty(Readable2.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(value){this._readableState&&(this._readableState.destroyed=value)}}),Readable2.prototype.destroy=destroyImpl2.destroy,Readable2.prototype._undestroy=destroyImpl2.undestroy,Readable2.prototype._destroy=function(err,cb){this.push(null),cb(err)},Readable2.prototype.push=function(chunk,encoding){var skipChunkCheck,state2=this._readableState;return state2.objectMode?skipChunkCheck=!0:"string"==typeof chunk&&((encoding=encoding||state2.defaultEncoding)!==state2.encoding&&(chunk=Buffer2.from(chunk,encoding),encoding=""),skipChunkCheck=!0),readableAddChunk(this,chunk,encoding,!1,skipChunkCheck)},Readable2.prototype.unshift=function(chunk){return readableAddChunk(this,chunk,null,!0,!1)},Readable2.prototype.isPaused=function(){return!1===this._readableState.flowing},Readable2.prototype.setEncoding=function(enc){return StringDecoder2||(StringDecoder2=requireString_decoder().StringDecoder),this._readableState.decoder=new StringDecoder2(enc),this._readableState.encoding=enc,this};var MAX_HWM=8388608;function howMuchToRead(n,state2){return n<=0||0===state2.length&&state2.ended?0:state2.objectMode?1:n!=n?state2.flowing&&state2.length?state2.buffer.head.data.length:state2.length:(n>state2.highWaterMark&&(state2.highWaterMark=function(n){return n>=MAX_HWM?n=MAX_HWM:(n--,n|=n>>>1,n|=n>>>2,n|=n>>>4,n|=n>>>8,n|=n>>>16,n++),n}(n)),n<=state2.length?n:state2.ended?state2.length:(state2.needReadable=!0,0))}function emitReadable(stream2){var state2=stream2._readableState;state2.needReadable=!1,state2.emittedReadable||(debug2("emitReadable",state2.flowing),state2.emittedReadable=!0,state2.sync?pna2.nextTick(emitReadable_,stream2):emitReadable_(stream2))}function emitReadable_(stream2){debug2("emit readable"),stream2.emit("readable"),flow(stream2)}function maybeReadMore(stream2,state2){state2.readingMore||(state2.readingMore=!0,pna2.nextTick(maybeReadMore_,stream2,state2))}function maybeReadMore_(stream2,state2){for(var len2=state2.length;!state2.reading&&!state2.flowing&&!state2.ended&&state2.length<state2.highWaterMark&&(debug2("maybeReadMore read 0"),stream2.read(0),len2!==state2.length);)len2=state2.length;state2.readingMore=!1}function nReadingNextTick(self2){debug2("readable nexttick read 0"),self2.read(0)}function resume_(stream2,state2){state2.reading||(debug2("resume read 0"),stream2.read(0)),state2.resumeScheduled=!1,state2.awaitDrain=0,stream2.emit("resume"),flow(stream2),state2.flowing&&!state2.reading&&stream2.read(0)}function flow(stream2){var state2=stream2._readableState;for(debug2("flow",state2.flowing);state2.flowing&&null!==stream2.read(););}function fromList(n,state2){return 0===state2.length?null:(state2.objectMode?ret=state2.buffer.shift():!n||n>=state2.length?(ret=state2.decoder?state2.buffer.join(""):1===state2.buffer.length?state2.buffer.head.data:state2.buffer.concat(state2.length),state2.buffer.clear()):ret=function(n,list,hasStrings){var ret;n<list.head.data.length?(ret=list.head.data.slice(0,n),list.head.data=list.head.data.slice(n)):ret=n===list.head.data.length?list.shift():hasStrings?function(n,list){var p=list.head,c=1,ret=p.data;n-=ret.length;for(;p=p.next;){var str=p.data,nb=n>str.length?str.length:n;if(nb===str.length?ret+=str:ret+=str.slice(0,n),0===(n-=nb)){nb===str.length?(++c,p.next?list.head=p.next:list.head=list.tail=null):(list.head=p,p.data=str.slice(nb));break}++c}return list.length-=c,ret}(n,list):function(n,list){var ret=Buffer2.allocUnsafe(n),p=list.head,c=1;p.data.copy(ret),n-=p.data.length;for(;p=p.next;){var buf=p.data,nb=n>buf.length?buf.length:n;if(buf.copy(ret,ret.length-n,0,nb),0===(n-=nb)){nb===buf.length?(++c,p.next?list.head=p.next:list.head=list.tail=null):(list.head=p,p.data=buf.slice(nb));break}++c}return list.length-=c,ret}(n,list);return ret}(n,state2.buffer,state2.decoder),ret);var ret}function endReadable(stream2){var state2=stream2._readableState;if(state2.length>0)throw new Error('"endReadable()" called on non-empty stream');state2.endEmitted||(state2.ended=!0,pna2.nextTick(endReadableNT,state2,stream2))}function endReadableNT(state2,stream2){state2.endEmitted||0!==state2.length||(state2.endEmitted=!0,stream2.readable=!1,stream2.emit("end"))}function indexOf(xs,x){for(var i2=0,l=xs.length;i2<l;i2++)if(xs[i2]===x)return i2;return-1}return Readable2.prototype.read=function(n){debug2("read",n),n=parseInt(n,10);var state2=this._readableState,nOrig=n;if(0!==n&&(state2.emittedReadable=!1),0===n&&state2.needReadable&&(state2.length>=state2.highWaterMark||state2.ended))return debug2("read: emitReadable",state2.length,state2.ended),0===state2.length&&state2.ended?endReadable(this):emitReadable(this),null;if(0===(n=howMuchToRead(n,state2))&&state2.ended)return 0===state2.length&&endReadable(this),null;var ret,doRead=state2.needReadable;return debug2("need readable",doRead),(0===state2.length||state2.length-n<state2.highWaterMark)&&debug2("length less than watermark",doRead=!0),state2.ended||state2.reading?debug2("reading or ended",doRead=!1):doRead&&(debug2("do read"),state2.reading=!0,state2.sync=!0,0===state2.length&&(state2.needReadable=!0),this._read(state2.highWaterMark),state2.sync=!1,state2.reading||(n=howMuchToRead(nOrig,state2))),null===(ret=n>0?fromList(n,state2):null)?(state2.needReadable=!0,n=0):state2.length-=n,0===state2.length&&(state2.ended||(state2.needReadable=!0),nOrig!==n&&state2.ended&&endReadable(this)),null!==ret&&this.emit("data",ret),ret},Readable2.prototype._read=function(n){this.emit("error",new Error("_read() is not implemented"))},Readable2.prototype.pipe=function(dest,pipeOpts){var src=this,state2=this._readableState;switch(state2.pipesCount){case 0:state2.pipes=dest;break;case 1:state2.pipes=[state2.pipes,dest];break;default:state2.pipes.push(dest)}state2.pipesCount+=1,debug2("pipe count=%d opts=%j",state2.pipesCount,pipeOpts);var endFn=(!pipeOpts||!1!==pipeOpts.end)&&dest!==process.stdout&&dest!==process.stderr?onend:unpipe;function onunpipe(readable2,unpipeInfo){debug2("onunpipe"),readable2===src&&unpipeInfo&&!1===unpipeInfo.hasUnpiped&&(unpipeInfo.hasUnpiped=!0,debug2("cleanup"),dest.removeListener("close",onclose),dest.removeListener("finish",onfinish),dest.removeListener("drain",ondrain),dest.removeListener("error",onerror),dest.removeListener("unpipe",onunpipe),src.removeListener("end",onend),src.removeListener("end",unpipe),src.removeListener("data",ondata),cleanedUp=!0,!state2.awaitDrain||dest._writableState&&!dest._writableState.needDrain||ondrain())}function onend(){debug2("onend"),dest.end()}state2.endEmitted?pna2.nextTick(endFn):src.once("end",endFn),dest.on("unpipe",onunpipe);var ondrain=function(src){return function(){var state2=src._readableState;debug2("pipeOnDrain",state2.awaitDrain),state2.awaitDrain&&state2.awaitDrain--,0===state2.awaitDrain&&EElistenerCount(src,"data")&&(state2.flowing=!0,flow(src))}}(src);dest.on("drain",ondrain);var cleanedUp=!1;var increasedAwaitDrain=!1;function ondata(chunk){debug2("ondata"),increasedAwaitDrain=!1,!1!==dest.write(chunk)||increasedAwaitDrain||((1===state2.pipesCount&&state2.pipes===dest||state2.pipesCount>1&&-1!==indexOf(state2.pipes,dest))&&!cleanedUp&&(debug2("false write response, pause",state2.awaitDrain),state2.awaitDrain++,increasedAwaitDrain=!0),src.pause())}function onerror(er){debug2("onerror",er),unpipe(),dest.removeListener("error",onerror),0===EElistenerCount(dest,"error")&&dest.emit("error",er)}function onclose(){dest.removeListener("finish",onfinish),unpipe()}function onfinish(){debug2("onfinish"),dest.removeListener("close",onclose),unpipe()}function unpipe(){debug2("unpipe"),src.unpipe(dest)}return src.on("data",ondata),function(emitter,event,fn){if("function"==typeof emitter.prependListener)return emitter.prependListener(event,fn);emitter._events&&emitter._events[event]?isArray2(emitter._events[event])?emitter._events[event].unshift(fn):emitter._events[event]=[fn,emitter._events[event]]:emitter.on(event,fn)}(dest,"error",onerror),dest.once("close",onclose),dest.once("finish",onfinish),dest.emit("pipe",src),state2.flowing||(debug2("pipe resume"),src.resume()),dest},Readable2.prototype.unpipe=function(dest){var state2=this._readableState,unpipeInfo={hasUnpiped:!1};if(0===state2.pipesCount)return this;if(1===state2.pipesCount)return dest&&dest!==state2.pipes||(dest||(dest=state2.pipes),state2.pipes=null,state2.pipesCount=0,state2.flowing=!1,dest&&dest.emit("unpipe",this,unpipeInfo)),this;if(!dest){var dests=state2.pipes,len2=state2.pipesCount;state2.pipes=null,state2.pipesCount=0,state2.flowing=!1;for(var i2=0;i2<len2;i2++)dests[i2].emit("unpipe",this,{hasUnpiped:!1});return this}var index2=indexOf(state2.pipes,dest);return-1===index2||(state2.pipes.splice(index2,1),state2.pipesCount-=1,1===state2.pipesCount&&(state2.pipes=state2.pipes[0]),dest.emit("unpipe",this,unpipeInfo)),this},Readable2.prototype.on=function(ev,fn){var res=Stream2.prototype.on.call(this,ev,fn);if("data"===ev)!1!==this._readableState.flowing&&this.resume();else if("readable"===ev){var state2=this._readableState;state2.endEmitted||state2.readableListening||(state2.readableListening=state2.needReadable=!0,state2.emittedReadable=!1,state2.reading?state2.length&&emitReadable(this):pna2.nextTick(nReadingNextTick,this))}return res},Readable2.prototype.addListener=Readable2.prototype.on,Readable2.prototype.resume=function(){var state2=this._readableState;return state2.flowing||(debug2("resume"),state2.flowing=!0,function(stream2,state2){state2.resumeScheduled||(state2.resumeScheduled=!0,pna2.nextTick(resume_,stream2,state2))}(this,state2)),this},Readable2.prototype.pause=function(){return debug2("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug2("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable2.prototype.wrap=function(stream2){var _this=this,state2=this._readableState,paused=!1;for(var i2 in stream2.on("end",(function(){if(debug2("wrapped end"),state2.decoder&&!state2.ended){var chunk=state2.decoder.end();chunk&&chunk.length&&_this.push(chunk)}_this.push(null)})),stream2.on("data",(function(chunk){(debug2("wrapped data"),state2.decoder&&(chunk=state2.decoder.write(chunk)),state2.objectMode&&null==chunk)||(state2.objectMode||chunk&&chunk.length)&&(_this.push(chunk)||(paused=!0,stream2.pause()))})),stream2)void 0===this[i2]&&"function"==typeof stream2[i2]&&(this[i2]=function(method){return function(){return stream2[method].apply(stream2,arguments)}}(i2));for(var n=0;n<kProxyEvents.length;n++)stream2.on(kProxyEvents[n],this.emit.bind(this,kProxyEvents[n]));return this._read=function(n2){debug2("wrapped _read",n2),paused&&(paused=!1,stream2.resume())},this},Object.defineProperty(Readable2.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Readable2._fromList=fromList,_stream_readable}var _stream_transform=Transform$1,Duplex=require_stream_duplex(),util$1=Object.create(util$4);function afterTransform(er,data){var ts=this._transformState;ts.transforming=!1;var cb=ts.writecb;if(!cb)return this.emit("error",new Error("write callback called multiple times"));ts.writechunk=null,ts.writecb=null,null!=data&&this.push(data),cb(er);var rs=this._readableState;rs.reading=!1,(rs.needReadable||rs.length<rs.highWaterMark)&&this._read(rs.highWaterMark)}function Transform$1(options){if(!(this instanceof Transform$1))return new Transform$1(options);Duplex.call(this,options),this._transformState={afterTransform:afterTransform.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,options&&("function"==typeof options.transform&&(this._transform=options.transform),"function"==typeof options.flush&&(this._flush=options.flush)),this.on("prefinish",prefinish)}function prefinish(){var _this=this;"function"==typeof this._flush?this._flush((function(er,data){done(_this,er,data)})):done(this,null,null)}function done(stream2,er,data){if(er)return stream2.emit("error",er);if(null!=data&&stream2.push(data),stream2._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(stream2._transformState.transforming)throw new Error("Calling transform done when still transforming");return stream2.push(null)}util$1.inherits=inherits_browserExports,util$1.inherits(Transform$1,Duplex),Transform$1.prototype.push=function(chunk,encoding){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,chunk,encoding)},Transform$1.prototype._transform=function(chunk,encoding,cb){throw new Error("_transform() is not implemented")},Transform$1.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;if(ts.writecb=cb,ts.writechunk=chunk,ts.writeencoding=encoding,!ts.transforming){var rs=this._readableState;(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)&&this._read(rs.highWaterMark)}},Transform$1.prototype._read=function(n){var ts=this._transformState;null!==ts.writechunk&&ts.writecb&&!ts.transforming?(ts.transforming=!0,this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform)):ts.needTransform=!0},Transform$1.prototype._destroy=function(err,cb){var _this2=this;Duplex.prototype._destroy.call(this,err,(function(err2){cb(err2),_this2.emit("close")}))};var _stream_passthrough=PassThrough,Transform=_stream_transform,util=Object.create(util$4);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options)}util.inherits=inherits_browserExports,util.inherits(PassThrough,Transform),PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk)},function(module,exports){(exports=module.exports=require_stream_readable()).Stream=exports,exports.Readable=exports,exports.Writable=require_stream_writable(),exports.Duplex=require_stream_duplex(),exports.Transform=_stream_transform,exports.PassThrough=_stream_passthrough}(readableBrowser,readableBrowserExports);var onceExports={},wrappy_1=function wrappy$1(fn,cb){if(fn&&cb)return wrappy$1(fn)(cb);if("function"!=typeof fn)throw new TypeError("need wrapper function");return Object.keys(fn).forEach((function(k){wrapper[k]=fn[k]})),wrapper;function wrapper(){for(var args=new Array(arguments.length),i2=0;i2<args.length;i2++)args[i2]=arguments[i2];var ret=fn.apply(this,args),cb2=args[args.length-1];return"function"==typeof ret&&ret!==cb2&&Object.keys(cb2).forEach((function(k){ret[k]=cb2[k]})),ret}};var wrappy=wrappy_1;function once$2(fn){var f=function(){return f.called?f.value:(f.called=!0,f.value=fn.apply(this,arguments))};return f.called=!1,f}function onceStrict(fn){var f=function(){if(f.called)throw new Error(f.onceError);return f.called=!0,f.value=fn.apply(this,arguments)},name=fn.name||"Function wrapped with `once`";return f.onceError=name+" shouldn't be called more than once",f.called=!1,f}({get exports(){return onceExports},set exports(v){onceExports=v}}).exports=wrappy(once$2),onceExports.strict=wrappy(onceStrict),once$2.proto=once$2((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return once$2(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return onceStrict(this)},configurable:!0})}));var once$1=onceExports,noop$1=function(){},eos$1=function(stream2,opts2,callback){if("function"==typeof opts2)return eos$1(stream2,null,opts2);opts2||(opts2={}),callback=once$1(callback||noop$1);var ws=stream2._writableState,rs=stream2._readableState,readable2=opts2.readable||!1!==opts2.readable&&stream2.readable,writable2=opts2.writable||!1!==opts2.writable&&stream2.writable,cancelled=!1,onlegacyfinish=function(){stream2.writable||onfinish()},onfinish=function(){writable2=!1,readable2||callback.call(stream2)},onend=function(){readable2=!1,writable2||callback.call(stream2)},onexit=function(exitCode){callback.call(stream2,exitCode?new Error("exited with error code: "+exitCode):null)},onerror=function(err){callback.call(stream2,err)},onclose=function(){process.nextTick(onclosenexttick)},onclosenexttick=function(){if(!cancelled)return(!readable2||rs&&rs.ended&&!rs.destroyed)&&(!writable2||ws&&ws.ended&&!ws.destroyed)?void 0:callback.call(stream2,new Error("premature close"))},onrequest=function(){stream2.req.on("finish",onfinish)};return!function(stream2){return stream2.setHeader&&"function"==typeof stream2.abort}(stream2)?writable2&&!ws&&(stream2.on("end",onlegacyfinish),stream2.on("close",onlegacyfinish)):(stream2.on("complete",onfinish),stream2.on("abort",onclose),stream2.req?onrequest():stream2.on("request",onrequest)),function(stream2){return stream2.stdio&&Array.isArray(stream2.stdio)&&3===stream2.stdio.length}(stream2)&&stream2.on("exit",onexit),stream2.on("end",onend),stream2.on("finish",onfinish),!1!==opts2.error&&stream2.on("error",onerror),stream2.on("close",onclose),function(){cancelled=!0,stream2.removeListener("complete",onfinish),stream2.removeListener("abort",onclose),stream2.removeListener("request",onrequest),stream2.req&&stream2.req.removeListener("finish",onfinish),stream2.removeListener("end",onlegacyfinish),stream2.removeListener("close",onlegacyfinish),stream2.removeListener("finish",onfinish),stream2.removeListener("exit",onexit),stream2.removeListener("end",onend),stream2.removeListener("error",onerror),stream2.removeListener("close",onclose)}},endOfStream=eos$1,Substream$1={};Object.defineProperty(Substream$1,"__esModule",{value:!0}),Substream$1.Substream=void 0;const readable_stream_1$3=readableBrowserExports;class Substream extends readable_stream_1$3.Duplex{constructor({parent:parent,name:name}){super({objectMode:!0}),this._parent=parent,this._name=name}_read(){}_write(chunk,_encoding,callback){this._parent.push({name:this._name,data:chunk}),callback()}}Substream$1.Substream=Substream;var __importDefault$7=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(ObjectMultiplex$1,"__esModule",{value:!0}),ObjectMultiplex$1.ObjectMultiplex=void 0;const readable_stream_1$2=readableBrowserExports,end_of_stream_1=__importDefault$7(endOfStream),once_1=__importDefault$7(onceExports),Substream_1=Substream$1,IGNORE_SUBSTREAM=Symbol("IGNORE_SUBSTREAM");class ObjectMultiplex extends readable_stream_1$2.Duplex{constructor(opts2={}){super(Object.assign(Object.assign({},opts2),{objectMode:!0})),this._substreams={}}createStream(name){if(this.destroyed)throw new Error(`ObjectMultiplex - parent stream for name "${name}" already destroyed`);if(this._readableState.ended||this._writableState.ended)throw new Error(`ObjectMultiplex - parent stream for name "${name}" already ended`);if(!name)throw new Error("ObjectMultiplex - name must not be empty");if(this._substreams[name])throw new Error(`ObjectMultiplex - Substream for name "${name}" already exists`);const substream=new Substream_1.Substream({parent:this,name:name});return this._substreams[name]=substream,function(stream2,_cb){const cb=once_1.default(_cb);end_of_stream_1.default(stream2,{readable:!1},cb),end_of_stream_1.default(stream2,{writable:!1},cb)}(this,(_error=>substream.destroy(_error||void 0))),substream}ignoreStream(name){if(!name)throw new Error("ObjectMultiplex - name must not be empty");if(this._substreams[name])throw new Error(`ObjectMultiplex - Substream for name "${name}" already exists`);this._substreams[name]=IGNORE_SUBSTREAM}_read(){}_write(chunk,_encoding,callback){const{name:name,data:data}=chunk;if(!name)return console.warn(`ObjectMultiplex - malformed chunk without name "${chunk}"`),callback();const substream=this._substreams[name];return substream?(substream!==IGNORE_SUBSTREAM&&substream.push(data),callback()):(console.warn(`ObjectMultiplex - orphaned data for stream "${name}"`),callback())}}ObjectMultiplex$1.ObjectMultiplex=ObjectMultiplex;var dist$3=ObjectMultiplex$1.ObjectMultiplex;const isStream=stream2=>null!==stream2&&"object"==typeof stream2&&"function"==typeof stream2.pipe;isStream.writable=stream2=>isStream(stream2)&&!1!==stream2.writable&&"function"==typeof stream2._write&&"object"==typeof stream2._writableState,isStream.readable=stream2=>isStream(stream2)&&!1!==stream2.readable&&"function"==typeof stream2._read&&"object"==typeof stream2._readableState,isStream.duplex=stream2=>isStream.writable(stream2)&&isStream.readable(stream2),isStream.transform=stream2=>isStream.duplex(stream2)&&"function"==typeof stream2._transform;var isStream_1=isStream,dist$2={},createEngineStream$1={};Object.defineProperty(createEngineStream$1,"__esModule",{value:!0});const readable_stream_1$1=readableBrowserExports;createEngineStream$1.default=function(opts2){if(!opts2||!opts2.engine)throw new Error("Missing engine parameter!");const{engine:engine}=opts2,stream2=new readable_stream_1$1.Duplex({objectMode:!0,read:()=>{},write:function(req,_encoding,cb){engine.handle(req,((_err,res)=>{stream2.push(res)})),cb()}});return engine.on&&engine.on("notification",(message=>{stream2.push(message)})),stream2};var createStreamMiddleware$1={},safeEventEmitter={};Object.defineProperty(safeEventEmitter,"__esModule",{value:!0});const events_1=eventsExports;function safeApply(handler,context,args){try{Reflect.apply(handler,context,args)}catch(err){setTimeout((()=>{throw err}))}}class SafeEventEmitter extends events_1.EventEmitter{emit(type2,...args){let doError="error"===type2;const events2=this._events;if(void 0!==events2)doError=doError&&void 0===events2.error;else if(!doError)return!1;if(doError){let er;if(args.length>0&&([er]=args),er instanceof Error)throw er;const err=new Error("Unhandled error."+(er?` (${er.message})`:""));throw err.context=er,err}const handler=events2[type2];if(void 0===handler)return!1;if("function"==typeof handler)safeApply(handler,this,args);else{const len2=handler.length,listeners=function(arr2){const n=arr2.length,copy=new Array(n);for(let i2=0;i2<n;i2+=1)copy[i2]=arr2[i2];return copy}(handler);for(let i2=0;i2<len2;i2+=1)safeApply(listeners[i2],this,args)}return!0}}safeEventEmitter.default=SafeEventEmitter;var __importDefault$6=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(createStreamMiddleware$1,"__esModule",{value:!0});const safe_event_emitter_1$2=__importDefault$6(safeEventEmitter),readable_stream_1=readableBrowserExports;createStreamMiddleware$1.default=function(options={}){const idMap={},stream2=new readable_stream_1.Duplex({objectMode:!0,read:()=>{},write:function(res,_encoding,cb){let err=null;try{!res.id?function(notif){(null==options?void 0:options.retryOnMessage)&&notif.method===options.retryOnMessage&&Object.values(idMap).forEach((({req:req,retryCount:retryCount=0})=>{if(req.id){if(retryCount>=3)throw new Error(`StreamMiddleware - Retry limit exceeded for request id "${req.id}"`);idMap[req.id].retryCount=retryCount+1,sendToStream(req)}}));events2.emit("notification",notif)}(res):function(res){const context=idMap[res.id];if(!context)return void console.warn(`StreamMiddleware - Unknown response id "${res.id}"`);delete idMap[res.id],Object.assign(context.res,res),setTimeout(context.end)}(res)}catch(_err){err=_err}cb(err)}}),events2=new safe_event_emitter_1$2.default;return{events:events2,middleware:(req,res,next,end)=>{sendToStream(req),idMap[req.id]={req:req,res:res,next:next,end:end}},stream:stream2};function sendToStream(req){stream2.push(req)}};var __importDefault$5=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(dist$2,"__esModule",{value:!0}),dist$2.createStreamMiddleware=dist$2.createEngineStream=void 0;const createEngineStream_1=__importDefault$5(createEngineStream$1);dist$2.createEngineStream=createEngineStream_1.default;const createStreamMiddleware_1=__importDefault$5(createStreamMiddleware$1);dist$2.createStreamMiddleware=createStreamMiddleware_1.default;var once=onceExports,eos=endOfStream,fs=require$$2,noop=function(){},ancient=/^v?\.0/.test(process.version),isFn=function(fn){return"function"==typeof fn},destroyer=function(stream2,reading,writing,callback){callback=once(callback);var closed=!1;stream2.on("close",(function(){closed=!0})),eos(stream2,{readable:reading,writable:writing},(function(err){if(err)return callback(err);closed=!0,callback()}));var destroyed=!1;return function(err){if(!closed&&!destroyed)return destroyed=!0,function(stream2){return!!ancient&&!!fs&&(stream2 instanceof(fs.ReadStream||noop)||stream2 instanceof(fs.WriteStream||noop))&&isFn(stream2.close)}(stream2)?stream2.close(noop):function(stream2){return stream2.setHeader&&isFn(stream2.abort)}(stream2)?stream2.abort():isFn(stream2.destroy)?stream2.destroy():void callback(err||new Error("stream was destroyed"))}},call=function(fn){fn()},pipe=function(from2,to){return from2.pipe(to)},pump_1$1=function(){var error,streams=Array.prototype.slice.call(arguments),callback=isFn(streams[streams.length-1]||noop)&&streams.pop()||noop;if(Array.isArray(streams[0])&&(streams=streams[0]),streams.length<2)throw new Error("pump requires two streams per minimum");var destroys=streams.map((function(stream2,i2){var reading=i2<streams.length-1;return destroyer(stream2,reading,i2>0,(function(err){error||(error=err),err&&destroys.forEach(call),reading||(destroys.forEach(call),callback(error))}))}));return streams.reduce(pipe)},messages$1={};Object.defineProperty(messages$1,"__esModule",{value:!0});const messages={errors:{disconnected:()=>"MetaMask: Disconnected from chain. Attempting to connect.",permanentlyDisconnected:()=>"MetaMask: Disconnected from MetaMask background. Page reload required.",sendSiteMetadata:()=>"MetaMask: Failed to send site metadata. This is an internal error, please report this bug.",unsupportedSync:method=>`MetaMask: The MetaMask Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,invalidDuplexStream:()=>"Must provide a Node.js-style duplex stream.",invalidNetworkParams:()=>"MetaMask: Received invalid network parameters. Please report this bug.",invalidRequestArgs:()=>"Expected a single, non-array, object argument.",invalidRequestMethod:()=>"'args.method' must be a non-empty string.",invalidRequestParams:()=>"'args.params' must be an object or array if provided.",invalidLoggerObject:()=>"'args.logger' must be an object if provided.",invalidLoggerMethod:method=>`'args.logger' must include required method '${method}'.`},info:{connected:chainId=>`MetaMask: Connected to chain with ID "${chainId}".`},warnings:{enableDeprecation:"MetaMask: 'ethereum.enable()' is deprecated and may be removed in the future. Please use the 'eth_requestAccounts' RPC method instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1102",sendDeprecation:"MetaMask: 'ethereum.send(...)' is deprecated and may be removed in the future. Please use 'ethereum.sendAsync(...)' or 'ethereum.request(...)' instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193",events:{close:"MetaMask: The event 'close' is deprecated and may be removed in the future. Please use 'disconnect' instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#disconnect",data:"MetaMask: The event 'data' is deprecated and will be removed in the future. Use 'message' instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message",networkChanged:"MetaMask: The event 'networkChanged' is deprecated and may be removed in the future. Use 'chainChanged' instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#chainchanged",notification:"MetaMask: The event 'notification' is deprecated and may be removed in the future. Use 'message' instead.\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message"},rpc:{ethDecryptDeprecation:"MetaMask: The RPC method 'eth_decrypt' is deprecated and may be removed in the future.\nFor more information, see: https://medium.com/metamask/metamask-api-method-deprecation-2b0564a84686",ethGetEncryptionPublicKeyDeprecation:"MetaMask: The RPC method 'eth_getEncryptionPublicKey' is deprecated and may be removed in the future.\nFor more information, see: https://medium.com/metamask/metamask-api-method-deprecation-2b0564a84686"},experimentalMethods:"MetaMask: 'ethereum._metamask' exposes non-standard, experimental methods. They may be removed or changed without warning."}};var _default=messages$1.default=messages,utils$1={},dist$1={},idRemapMiddleware={},getUniqueId$1={};Object.defineProperty(getUniqueId$1,"__esModule",{value:!0}),getUniqueId$1.getUniqueId=void 0;const MAX=4294967295;let idCounter=Math.floor(Math.random()*MAX);getUniqueId$1.getUniqueId=function(){return idCounter=(idCounter+1)%MAX,idCounter},Object.defineProperty(idRemapMiddleware,"__esModule",{value:!0}),idRemapMiddleware.createIdRemapMiddleware=void 0;const getUniqueId_1=getUniqueId$1;idRemapMiddleware.createIdRemapMiddleware=function(){return(req,res,next,_end)=>{const originalId=req.id,newId=getUniqueId_1.getUniqueId();req.id=newId,res.id=newId,next((done2=>{req.id=originalId,res.id=originalId,done2()}))}};var createAsyncMiddleware$1={};Object.defineProperty(createAsyncMiddleware$1,"__esModule",{value:!0}),createAsyncMiddleware$1.createAsyncMiddleware=void 0,createAsyncMiddleware$1.createAsyncMiddleware=function(asyncMiddleware){return async(req,res,next,end)=>{let resolveNextPromise;const nextPromise=new Promise((resolve=>{resolveNextPromise=resolve}));let returnHandlerCallback=null,nextWasCalled=!1;const asyncNext=async()=>{nextWasCalled=!0,next((runReturnHandlersCallback=>{returnHandlerCallback=runReturnHandlersCallback,resolveNextPromise()})),await nextPromise};try{await asyncMiddleware(req,res,asyncNext),nextWasCalled?(await nextPromise,returnHandlerCallback(null)):end(null)}catch(error){returnHandlerCallback?returnHandlerCallback(error):end(error)}}};var createScaffoldMiddleware$1={};Object.defineProperty(createScaffoldMiddleware$1,"__esModule",{value:!0}),createScaffoldMiddleware$1.createScaffoldMiddleware=void 0,createScaffoldMiddleware$1.createScaffoldMiddleware=function(handlers){return(req,res,next,end)=>{const handler=handlers[req.method];return void 0===handler?next():"function"==typeof handler?handler(req,res,next,end):(res.result=handler,end())}};var JsonRpcEngine$1={},dist={},classes={},fastSafeStringify=stringify;stringify.default=stringify,stringify.stable=deterministicStringify,stringify.stableStringify=deterministicStringify;var LIMIT_REPLACE_NODE="[...]",CIRCULAR_REPLACE_NODE="[Circular]",arr=[],replacerStack=[];function defaultOptions(){return{depthLimit:Number.MAX_SAFE_INTEGER,edgesLimit:Number.MAX_SAFE_INTEGER}}function stringify(obj,replacer,spacer,options){var res;void 0===options&&(options=defaultOptions()),decirc(obj,"",0,[],void 0,0,options);try{res=0===replacerStack.length?JSON.stringify(obj,replacer,spacer):JSON.stringify(obj,replaceGetterValues(replacer),spacer)}catch(_){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==arr.length;){var part=arr.pop();4===part.length?Object.defineProperty(part[0],part[1],part[3]):part[0][part[1]]=part[2]}}return res}function setReplace(replace,val,k,parent){var propertyDescriptor=Object.getOwnPropertyDescriptor(parent,k);void 0!==propertyDescriptor.get?propertyDescriptor.configurable?(Object.defineProperty(parent,k,{value:replace}),arr.push([parent,k,val,propertyDescriptor])):replacerStack.push([val,k,replace]):(parent[k]=replace,arr.push([parent,k,val]))}function decirc(val,k,edgeIndex,stack,parent,depth,options){var i2;if(depth+=1,"object"==typeof val&&null!==val){for(i2=0;i2<stack.length;i2++)if(stack[i2]===val)return void setReplace(CIRCULAR_REPLACE_NODE,val,k,parent);if(void 0!==options.depthLimit&&depth>options.depthLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(void 0!==options.edgesLimit&&edgeIndex+1>options.edgesLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(stack.push(val),Array.isArray(val))for(i2=0;i2<val.length;i2++)decirc(val[i2],i2,i2,stack,val,depth,options);else{var keys=Object.keys(val);for(i2=0;i2<keys.length;i2++){var key=keys[i2];decirc(val[key],key,i2,stack,val,depth,options)}}stack.pop()}}function compareFunction(a,b){return a<b?-1:a>b?1:0}function deterministicStringify(obj,replacer,spacer,options){void 0===options&&(options=defaultOptions());var res,tmp=deterministicDecirc(obj,"",0,[],void 0,0,options)||obj;try{res=0===replacerStack.length?JSON.stringify(tmp,replacer,spacer):JSON.stringify(tmp,replaceGetterValues(replacer),spacer)}catch(_){return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]")}finally{for(;0!==arr.length;){var part=arr.pop();4===part.length?Object.defineProperty(part[0],part[1],part[3]):part[0][part[1]]=part[2]}}return res}function deterministicDecirc(val,k,edgeIndex,stack,parent,depth,options){var i2;if(depth+=1,"object"==typeof val&&null!==val){for(i2=0;i2<stack.length;i2++)if(stack[i2]===val)return void setReplace(CIRCULAR_REPLACE_NODE,val,k,parent);try{if("function"==typeof val.toJSON)return}catch(_){return}if(void 0!==options.depthLimit&&depth>options.depthLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(void 0!==options.edgesLimit&&edgeIndex+1>options.edgesLimit)return void setReplace(LIMIT_REPLACE_NODE,val,k,parent);if(stack.push(val),Array.isArray(val))for(i2=0;i2<val.length;i2++)deterministicDecirc(val[i2],i2,i2,stack,val,depth,options);else{var tmp={},keys=Object.keys(val).sort(compareFunction);for(i2=0;i2<keys.length;i2++){var key=keys[i2];deterministicDecirc(val[key],key,i2,stack,val,depth,options),tmp[key]=val[key]}if(void 0===parent)return tmp;arr.push([parent,k,val]),parent[k]=tmp}stack.pop()}}function replaceGetterValues(replacer){return replacer=void 0!==replacer?replacer:function(k,v){return v},function(key,val){if(replacerStack.length>0)for(var i2=0;i2<replacerStack.length;i2++){var part=replacerStack[i2];if(part[1]===key&&part[0]===val){val=part[2],replacerStack.splice(i2,1);break}}return replacer.call(this,key,val)}}Object.defineProperty(classes,"__esModule",{value:!0}),classes.EthereumProviderError=classes.EthereumRpcError=void 0;const fast_safe_stringify_1=fastSafeStringify;class EthereumRpcError extends Error{constructor(code2,message,data){if(!Number.isInteger(code2))throw new Error('"code" must be an integer.');if(!message||"string"!=typeof message)throw new Error('"message" must be a nonempty string.');super(message),this.code=code2,void 0!==data&&(this.data=data)}serialize(){const serialized={code:this.code,message:this.message};return void 0!==this.data&&(serialized.data=this.data),this.stack&&(serialized.stack=this.stack),serialized}toString(){return fast_safe_stringify_1.default(this.serialize(),stringifyReplacer,2)}}classes.EthereumRpcError=EthereumRpcError;function stringifyReplacer(_,value){if("[Circular]"!==value)return value}classes.EthereumProviderError=class extends EthereumRpcError{constructor(code2,message,data){if(!function(code2){return Number.isInteger(code2)&&code2>=1e3&&code2<=4999}(code2))throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');super(code2,message,data)}};var utils={},errorConstants={};Object.defineProperty(errorConstants,"__esModule",{value:!0}),errorConstants.errorValues=errorConstants.errorCodes=void 0,errorConstants.errorCodes={rpc:{invalidInput:-32e3,resourceNotFound:-32001,resourceUnavailable:-32002,transactionRejected:-32003,methodNotSupported:-32004,limitExceeded:-32005,parse:-32700,invalidRequest:-32600,methodNotFound:-32601,invalidParams:-32602,internal:-32603},provider:{userRejectedRequest:4001,unauthorized:4100,unsupportedMethod:4200,disconnected:4900,chainDisconnected:4901}},errorConstants.errorValues={"-32700":{standard:"JSON RPC 2.0",message:"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."},"-32600":{standard:"JSON RPC 2.0",message:"The JSON sent is not a valid Request object."},"-32601":{standard:"JSON RPC 2.0",message:"The method does not exist / is not available."},"-32602":{standard:"JSON RPC 2.0",message:"Invalid method parameter(s)."},"-32603":{standard:"JSON RPC 2.0",message:"Internal JSON-RPC error."},"-32000":{standard:"EIP-1474",message:"Invalid input."},"-32001":{standard:"EIP-1474",message:"Resource not found."},"-32002":{standard:"EIP-1474",message:"Resource unavailable."},"-32003":{standard:"EIP-1474",message:"Transaction rejected."},"-32004":{standard:"EIP-1474",message:"Method not supported."},"-32005":{standard:"EIP-1474",message:"Request limit exceeded."},4001:{standard:"EIP-1193",message:"User rejected the request."},4100:{standard:"EIP-1193",message:"The requested account and/or method has not been authorized by the user."},4200:{standard:"EIP-1193",message:"The requested method is not supported by this Ethereum provider."},4900:{standard:"EIP-1193",message:"The provider is disconnected from all chains."},4901:{standard:"EIP-1193",message:"The provider is disconnected from the specified chain."}},function(exports){Object.defineProperty(exports,"__esModule",{value:!0}),exports.serializeError=exports.isValidCode=exports.getMessageFromCode=exports.JSON_RPC_SERVER_ERROR_MESSAGE=void 0;const error_constants_12=errorConstants,classes_12=classes,FALLBACK_ERROR_CODE=error_constants_12.errorCodes.rpc.internal,FALLBACK_MESSAGE="Unspecified error message. This is a bug, please report it.",FALLBACK_ERROR={code:FALLBACK_ERROR_CODE,message:getMessageFromCode(FALLBACK_ERROR_CODE)};function getMessageFromCode(code2,fallbackMessage=FALLBACK_MESSAGE){if(Number.isInteger(code2)){const codeString=code2.toString();if(hasKey(error_constants_12.errorValues,codeString))return error_constants_12.errorValues[codeString].message;if(isJsonRpcServerError(code2))return exports.JSON_RPC_SERVER_ERROR_MESSAGE}return fallbackMessage}function isValidCode(code2){if(!Number.isInteger(code2))return!1;const codeString=code2.toString();return!!error_constants_12.errorValues[codeString]||!!isJsonRpcServerError(code2)}function isJsonRpcServerError(code2){return code2>=-32099&&code2<=-32e3}function assignOriginalError(error){return error&&"object"==typeof error&&!Array.isArray(error)?Object.assign({},error):error}function hasKey(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}exports.JSON_RPC_SERVER_ERROR_MESSAGE="Unspecified server error.",exports.getMessageFromCode=getMessageFromCode,exports.isValidCode=isValidCode,exports.serializeError=function(error,{fallbackError:fallbackError=FALLBACK_ERROR,shouldIncludeStack:shouldIncludeStack=!1}={}){var _a,_b;if(!fallbackError||!Number.isInteger(fallbackError.code)||"string"!=typeof fallbackError.message)throw new Error("Must provide fallback error with integer number code and string message.");if(error instanceof classes_12.EthereumRpcError)return error.serialize();const serialized={};if(error&&"object"==typeof error&&!Array.isArray(error)&&hasKey(error,"code")&&isValidCode(error.code)){const _error=error;serialized.code=_error.code,_error.message&&"string"==typeof _error.message?(serialized.message=_error.message,hasKey(_error,"data")&&(serialized.data=_error.data)):(serialized.message=getMessageFromCode(serialized.code),serialized.data={originalError:assignOriginalError(error)})}else{serialized.code=fallbackError.code;const message=null===(_a=error)||void 0===_a?void 0:_a.message;serialized.message=message&&"string"==typeof message?message:fallbackError.message,serialized.data={originalError:assignOriginalError(error)}}const stack=null===(_b=error)||void 0===_b?void 0:_b.stack;return shouldIncludeStack&&error&&stack&&"string"==typeof stack&&(serialized.stack=stack),serialized}}(utils);var errors={};Object.defineProperty(errors,"__esModule",{value:!0}),errors.ethErrors=void 0;const classes_1=classes,utils_1$3=utils,error_constants_1=errorConstants;function getEthJsonRpcError(code2,arg){const[message,data]=parseOpts(arg);return new classes_1.EthereumRpcError(code2,message||utils_1$3.getMessageFromCode(code2),data)}function getEthProviderError(code2,arg){const[message,data]=parseOpts(arg);return new classes_1.EthereumProviderError(code2,message||utils_1$3.getMessageFromCode(code2),data)}function parseOpts(arg){if(arg){if("string"==typeof arg)return[arg];if("object"==typeof arg&&!Array.isArray(arg)){const{message:message,data:data}=arg;if(message&&"string"!=typeof message)throw new Error("Must specify string message.");return[message||void 0,data]}}return[]}errors.ethErrors={rpc:{parse:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse,arg),invalidRequest:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest,arg),invalidParams:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams,arg),methodNotFound:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound,arg),internal:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal,arg),server:opts2=>{if(!opts2||"object"!=typeof opts2||Array.isArray(opts2))throw new Error("Ethereum RPC Server errors must provide single object argument.");const{code:code2}=opts2;if(!Number.isInteger(code2)||code2>-32005||code2<-32099)throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');return getEthJsonRpcError(code2,opts2)},invalidInput:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput,arg),resourceNotFound:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound,arg),resourceUnavailable:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable,arg),transactionRejected:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected,arg),methodNotSupported:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported,arg),limitExceeded:arg=>getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded,arg)},provider:{userRejectedRequest:arg=>getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest,arg),unauthorized:arg=>getEthProviderError(error_constants_1.errorCodes.provider.unauthorized,arg),unsupportedMethod:arg=>getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod,arg),disconnected:arg=>getEthProviderError(error_constants_1.errorCodes.provider.disconnected,arg),chainDisconnected:arg=>getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected,arg),custom:opts2=>{if(!opts2||"object"!=typeof opts2||Array.isArray(opts2))throw new Error("Ethereum Provider custom errors must provide single object argument.");const{code:code2,message:message,data:data}=opts2;if(!message||"string"!=typeof message)throw new Error('"message" must be a nonempty string');return new classes_1.EthereumProviderError(code2,message,data)}}},function(exports){Object.defineProperty(exports,"__esModule",{value:!0}),exports.getMessageFromCode=exports.serializeError=exports.EthereumProviderError=exports.EthereumRpcError=exports.ethErrors=exports.errorCodes=void 0;const classes_12=classes;Object.defineProperty(exports,"EthereumRpcError",{enumerable:!0,get:function(){return classes_12.EthereumRpcError}}),Object.defineProperty(exports,"EthereumProviderError",{enumerable:!0,get:function(){return classes_12.EthereumProviderError}});const utils_12=utils;Object.defineProperty(exports,"serializeError",{enumerable:!0,get:function(){return utils_12.serializeError}}),Object.defineProperty(exports,"getMessageFromCode",{enumerable:!0,get:function(){return utils_12.getMessageFromCode}});const errors_1=errors;Object.defineProperty(exports,"ethErrors",{enumerable:!0,get:function(){return errors_1.ethErrors}});const error_constants_12=errorConstants;Object.defineProperty(exports,"errorCodes",{enumerable:!0,get:function(){return error_constants_12.errorCodes}})}(dist);var __importDefault$4=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(JsonRpcEngine$1,"__esModule",{value:!0}),JsonRpcEngine$1.JsonRpcEngine=void 0;const safe_event_emitter_1$1=__importDefault$4(safeEventEmitter),eth_rpc_errors_1$2=dist;class JsonRpcEngine extends safe_event_emitter_1$1.default{constructor(){super(),this._middleware=[]}push(middleware){this._middleware.push(middleware)}handle(req,cb){if(cb&&"function"!=typeof cb)throw new Error('"callback" must be a function if provided.');return Array.isArray(req)?cb?this._handleBatch(req,cb):this._handleBatch(req):cb?this._handle(req,cb):this._promiseHandle(req)}asMiddleware(){return async(req,res,next,end)=>{try{const[middlewareError,isComplete,returnHandlers]=await JsonRpcEngine._runAllMiddleware(req,res,this._middleware);return isComplete?(await JsonRpcEngine._runReturnHandlers(returnHandlers),end(middlewareError)):next((async handlerCallback=>{try{await JsonRpcEngine._runReturnHandlers(returnHandlers)}catch(error){return handlerCallback(error)}return handlerCallback()}))}catch(error){return end(error)}}}async _handleBatch(reqs,cb){try{const responses=await Promise.all(reqs.map(this._promiseHandle.bind(this)));return cb?cb(null,responses):responses}catch(error){if(cb)return cb(error);throw error}}_promiseHandle(req){return new Promise((resolve=>{this._handle(req,((_err,res)=>{resolve(res)}))}))}async _handle(callerReq,cb){if(!callerReq||Array.isArray(callerReq)||"object"!=typeof callerReq){const error2=new eth_rpc_errors_1$2.EthereumRpcError(eth_rpc_errors_1$2.errorCodes.rpc.invalidRequest,"Requests must be plain objects. Received: "+typeof callerReq,{request:callerReq});return cb(error2,{id:void 0,jsonrpc:"2.0",error:error2})}if("string"!=typeof callerReq.method){const error2=new eth_rpc_errors_1$2.EthereumRpcError(eth_rpc_errors_1$2.errorCodes.rpc.invalidRequest,"Must specify a string method. Received: "+typeof callerReq.method,{request:callerReq});return cb(error2,{id:callerReq.id,jsonrpc:"2.0",error:error2})}const req=Object.assign({},callerReq),res={id:req.id,jsonrpc:req.jsonrpc};let error=null;try{await this._processRequest(req,res)}catch(_error){error=_error}return error&&(delete res.result,res.error||(res.error=eth_rpc_errors_1$2.serializeError(error))),cb(error,res)}async _processRequest(req,res){const[error,isComplete,returnHandlers]=await JsonRpcEngine._runAllMiddleware(req,res,this._middleware);if(JsonRpcEngine._checkForCompletion(req,res,isComplete),await JsonRpcEngine._runReturnHandlers(returnHandlers),error)throw error}static async _runAllMiddleware(req,res,middlewareStack){const returnHandlers=[];let error=null,isComplete=!1;for(const middleware of middlewareStack)if([error,isComplete]=await JsonRpcEngine._runMiddleware(req,res,middleware,returnHandlers),isComplete)break;return[error,isComplete,returnHandlers.reverse()]}static _runMiddleware(req,res,middleware,returnHandlers){return new Promise((resolve=>{const end=err=>{const error=err||res.error;error&&(res.error=eth_rpc_errors_1$2.serializeError(error)),resolve([error,!0])},next=returnHandler=>{res.error?end(res.error):(returnHandler&&("function"!=typeof returnHandler&&end(new eth_rpc_errors_1$2.EthereumRpcError(eth_rpc_errors_1$2.errorCodes.rpc.internal,`JsonRpcEngine: "next" return handlers must be functions. Received "${typeof returnHandler}" for request:\n${jsonify(req)}`,{request:req})),returnHandlers.push(returnHandler)),resolve([null,!1]))};try{middleware(req,res,next,end)}catch(error){end(error)}}))}static async _runReturnHandlers(handlers){for(const handler of handlers)await new Promise(((resolve,reject)=>{handler((err=>err?reject(err):resolve()))}))}static _checkForCompletion(req,res,isComplete){if(!("result"in res)&&!("error"in res))throw new eth_rpc_errors_1$2.EthereumRpcError(eth_rpc_errors_1$2.errorCodes.rpc.internal,`JsonRpcEngine: Response has no error or result for request:\n${jsonify(req)}`,{request:req});if(!isComplete)throw new eth_rpc_errors_1$2.EthereumRpcError(eth_rpc_errors_1$2.errorCodes.rpc.internal,`JsonRpcEngine: Nothing ended request:\n${jsonify(req)}`,{request:req})}}function jsonify(request){return JSON.stringify(request,null,2)}JsonRpcEngine$1.JsonRpcEngine=JsonRpcEngine;var mergeMiddleware$1={};Object.defineProperty(mergeMiddleware$1,"__esModule",{value:!0}),mergeMiddleware$1.mergeMiddleware=void 0;const JsonRpcEngine_1=JsonRpcEngine$1;mergeMiddleware$1.mergeMiddleware=function(middlewareStack){const engine=new JsonRpcEngine_1.JsonRpcEngine;return middlewareStack.forEach((middleware=>engine.push(middleware))),engine.asMiddleware()},function(exports){var __createBinding=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=commonjsGlobal&&commonjsGlobal.__exportStar||function(m,exports2){for(var p in m)"default"===p||Object.prototype.hasOwnProperty.call(exports2,p)||__createBinding(exports2,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(idRemapMiddleware,exports),__exportStar(createAsyncMiddleware$1,exports),__exportStar(createScaffoldMiddleware$1,exports),__exportStar(getUniqueId$1,exports),__exportStar(JsonRpcEngine$1,exports),__exportStar(mergeMiddleware$1,exports)}(dist$1);var createRpcWarningMiddleware$1={},__importDefault$3=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(createRpcWarningMiddleware$1,"__esModule",{value:!0}),createRpcWarningMiddleware$1.createRpcWarningMiddleware=void 0;const messages_1$3=__importDefault$3(messages$1);createRpcWarningMiddleware$1.createRpcWarningMiddleware=function(log){const sentWarnings={ethDecryptDeprecation:!1,ethGetEncryptionPublicKeyDeprecation:!1};return(req,_res,next)=>{!1===sentWarnings.ethDecryptDeprecation&&"eth_decrypt"===req.method?(log.warn(messages_1$3.default.warnings.rpc.ethDecryptDeprecation),sentWarnings.ethDecryptDeprecation=!0):!1===sentWarnings.ethGetEncryptionPublicKeyDeprecation&&"eth_getEncryptionPublicKey"===req.method&&(log.warn(messages_1$3.default.warnings.rpc.ethGetEncryptionPublicKeyDeprecation),sentWarnings.ethGetEncryptionPublicKeyDeprecation=!0),next()}},Object.defineProperty(utils$1,"__esModule",{value:!0}),utils$1.NOOP=utils$1.isValidNetworkVersion=utils$1.isValidChainId=getRpcPromiseCallback_1=utils$1.getRpcPromiseCallback=getDefaultExternalMiddleware_1=utils$1.getDefaultExternalMiddleware=EMITTED_NOTIFICATIONS=utils$1.EMITTED_NOTIFICATIONS=void 0;const json_rpc_engine_1$1=dist$1,eth_rpc_errors_1$1=dist,createRpcWarningMiddleware_1=createRpcWarningMiddleware$1;var EMITTED_NOTIFICATIONS=utils$1.EMITTED_NOTIFICATIONS=Object.freeze(["eth_subscription"]);var getDefaultExternalMiddleware_1=utils$1.getDefaultExternalMiddleware=(logger2=console)=>{return[json_rpc_engine_1$1.createIdRemapMiddleware(),(log=logger2,(req,res,next)=>{"string"==typeof req.method&&req.method||(res.error=eth_rpc_errors_1$1.ethErrors.rpc.invalidRequest({message:"The request 'method' must be a non-empty string.",data:req})),next((done2=>{const{error:error}=res;return error?(log.error(`MetaMask - RPC Error: ${error.message}`,error),done2()):done2()}))}),createRpcWarningMiddleware_1.createRpcWarningMiddleware(logger2)];var log};var getRpcPromiseCallback_1=utils$1.getRpcPromiseCallback=(resolve,reject,unwrapResult=!0)=>(error,response)=>{error||response.error?reject(error||response.error):!unwrapResult||Array.isArray(response)?resolve(response):resolve(response.result)};utils$1.isValidChainId=chainId=>Boolean(chainId)&&"string"==typeof chainId&&chainId.startsWith("0x");utils$1.isValidNetworkVersion=networkVersion=>Boolean(networkVersion)&&"string"==typeof networkVersion;utils$1.NOOP=()=>{};var BaseProvider$1={},isArray=Array.isArray,keyList=Object.keys,hasProp=Object.prototype.hasOwnProperty,__importDefault$2=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(BaseProvider$1,"__esModule",{value:!0}),BaseProvider$1.BaseProvider=void 0;const safe_event_emitter_1=__importDefault$2(safeEventEmitter),eth_rpc_errors_1=dist,fast_deep_equal_1=__importDefault$2((function equal(a,b){if(a===b)return!0;if(a&&b&&"object"==typeof a&&"object"==typeof b){var i2,length,key,arrA=isArray(a),arrB=isArray(b);if(arrA&&arrB){if((length=a.length)!=b.length)return!1;for(i2=length;0!=i2--;)if(!equal(a[i2],b[i2]))return!1;return!0}if(arrA!=arrB)return!1;var dateA=a instanceof Date,dateB=b instanceof Date;if(dateA!=dateB)return!1;if(dateA&&dateB)return a.getTime()==b.getTime();var regexpA=a instanceof RegExp,regexpB=b instanceof RegExp;if(regexpA!=regexpB)return!1;if(regexpA&&regexpB)return a.toString()==b.toString();var keys=keyList(a);if((length=keys.length)!==keyList(b).length)return!1;for(i2=length;0!=i2--;)if(!hasProp.call(b,keys[i2]))return!1;for(i2=length;0!=i2--;)if(!equal(a[key=keys[i2]],b[key]))return!1;return!0}return a!=a&&b!=b})),json_rpc_engine_1=dist$1,messages_1$2=__importDefault$2(messages$1),utils_1$2=utils$1;class BaseProvider extends safe_event_emitter_1.default{constructor({logger:logger2=console,maxEventListeners:maxEventListeners=100,rpcMiddleware:rpcMiddleware=[]}={}){super(),this._log=logger2,this.setMaxListeners(maxEventListeners),this._state=Object.assign({},BaseProvider._defaultState),this.selectedAddress=null,this.chainId=null,this._handleAccountsChanged=this._handleAccountsChanged.bind(this),this._handleConnect=this._handleConnect.bind(this),this._handleChainChanged=this._handleChainChanged.bind(this),this._handleDisconnect=this._handleDisconnect.bind(this),this._handleUnlockStateChanged=this._handleUnlockStateChanged.bind(this),this._rpcRequest=this._rpcRequest.bind(this),this.request=this.request.bind(this);const rpcEngine=new json_rpc_engine_1.JsonRpcEngine;rpcMiddleware.forEach((middleware=>rpcEngine.push(middleware))),this._rpcEngine=rpcEngine}isConnected(){return this._state.isConnected}async request(args){if(!args||"object"!=typeof args||Array.isArray(args))throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({message:messages_1$2.default.errors.invalidRequestArgs(),data:args});const{method:method,params:params}=args;if("string"!=typeof method||0===method.length)throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({message:messages_1$2.default.errors.invalidRequestMethod(),data:args});if(void 0!==params&&!Array.isArray(params)&&("object"!=typeof params||null===params))throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({message:messages_1$2.default.errors.invalidRequestParams(),data:args});return new Promise(((resolve,reject)=>{this._rpcRequest({method:method,params:params},utils_1$2.getRpcPromiseCallback(resolve,reject))}))}_initializeState(initialState){if(!0===this._state.initialized)throw new Error("Provider already initialized.");if(initialState){const{accounts:accounts,chainId:chainId,isUnlocked:isUnlocked,networkVersion:networkVersion}=initialState;this._handleConnect(chainId),this._handleChainChanged({chainId:chainId,networkVersion:networkVersion}),this._handleUnlockStateChanged({accounts:accounts,isUnlocked:isUnlocked}),this._handleAccountsChanged(accounts)}this._state.initialized=!0,this.emit("_initialized")}_rpcRequest(payload,callback){let cb=callback;return Array.isArray(payload)||(payload.jsonrpc||(payload.jsonrpc="2.0"),"eth_accounts"!==payload.method&&"eth_requestAccounts"!==payload.method||(cb=(err,res)=>{this._handleAccountsChanged(res.result||[],"eth_accounts"===payload.method),callback(err,res)})),this._rpcEngine.handle(payload,cb)}_handleConnect(chainId){this._state.isConnected||(this._state.isConnected=!0,this.emit("connect",{chainId:chainId}),this._log.debug(messages_1$2.default.info.connected(chainId)))}_handleDisconnect(isRecoverable,errorMessage){if(this._state.isConnected||!this._state.isPermanentlyDisconnected&&!isRecoverable){let error;this._state.isConnected=!1,isRecoverable?(error=new eth_rpc_errors_1.EthereumRpcError(1013,errorMessage||messages_1$2.default.errors.disconnected()),this._log.debug(error)):(error=new eth_rpc_errors_1.EthereumRpcError(1011,errorMessage||messages_1$2.default.errors.permanentlyDisconnected()),this._log.error(error),this.chainId=null,this._state.accounts=null,this.selectedAddress=null,this._state.isUnlocked=!1,this._state.isPermanentlyDisconnected=!0),this.emit("disconnect",error)}}_handleChainChanged({chainId:chainId}={}){utils_1$2.isValidChainId(chainId)?(this._handleConnect(chainId),chainId!==this.chainId&&(this.chainId=chainId,this._state.initialized&&this.emit("chainChanged",this.chainId))):this._log.error(messages_1$2.default.errors.invalidNetworkParams(),{chainId:chainId})}_handleAccountsChanged(accounts,isEthAccounts=!1){let _accounts=accounts;Array.isArray(accounts)||(this._log.error("MetaMask: Received invalid accounts parameter. Please report this bug.",accounts),_accounts=[]);for(const account of accounts)if("string"!=typeof account){this._log.error("MetaMask: Received non-string account. Please report this bug.",accounts),_accounts=[];break}fast_deep_equal_1.default(this._state.accounts,_accounts)||(isEthAccounts&&null!==this._state.accounts&&this._log.error("MetaMask: 'eth_accounts' unexpectedly updated accounts. Please report this bug.",_accounts),this._state.accounts=_accounts,this.selectedAddress!==_accounts[0]&&(this.selectedAddress=_accounts[0]||null),this._state.initialized&&this.emit("accountsChanged",_accounts))}_handleUnlockStateChanged({accounts:accounts,isUnlocked:isUnlocked}={}){"boolean"==typeof isUnlocked?isUnlocked!==this._state.isUnlocked&&(this._state.isUnlocked=isUnlocked,this._handleAccountsChanged(accounts||[])):this._log.error("MetaMask: Received invalid isUnlocked parameter. Please report this bug.")}}BaseProvider$1.BaseProvider=BaseProvider,BaseProvider._defaultState={accounts:null,isConnected:!1,isUnlocked:!1,initialized:!1,isPermanentlyDisconnected:!1};var __importDefault$1=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(StreamProvider$1,"__esModule",{value:!0}),StreamProvider$1.StreamProvider=StreamProvider$1.AbstractStreamProvider=void 0;const object_multiplex_1=__importDefault$1(dist$3),is_stream_1=isStream_1,json_rpc_middleware_stream_1=dist$2,pump_1=__importDefault$1(pump_1$1),messages_1$1=__importDefault$1(messages$1),utils_1$1=utils$1,BaseProvider_1=BaseProvider$1;class AbstractStreamProvider extends BaseProvider_1.BaseProvider{constructor(connectionStream,{jsonRpcStreamName:jsonRpcStreamName,logger:logger2,maxEventListeners:maxEventListeners,rpcMiddleware:rpcMiddleware}){if(super({logger:logger2,maxEventListeners:maxEventListeners,rpcMiddleware:rpcMiddleware}),!is_stream_1.duplex(connectionStream))throw new Error(messages_1$1.default.errors.invalidDuplexStream());this._handleStreamDisconnect=this._handleStreamDisconnect.bind(this);const mux=new object_multiplex_1.default;pump_1.default(connectionStream,mux,connectionStream,this._handleStreamDisconnect.bind(this,"MetaMask")),this._jsonRpcConnection=json_rpc_middleware_stream_1.createStreamMiddleware({retryOnMessage:"METAMASK_EXTENSION_CONNECT_CAN_RETRY"}),pump_1.default(this._jsonRpcConnection.stream,mux.createStream(jsonRpcStreamName),this._jsonRpcConnection.stream,this._handleStreamDisconnect.bind(this,"MetaMask RpcProvider")),this._rpcEngine.push(this._jsonRpcConnection.middleware),this._jsonRpcConnection.events.on("notification",(payload=>{const{method:method,params:params}=payload;"metamask_accountsChanged"===method?this._handleAccountsChanged(params):"metamask_unlockStateChanged"===method?this._handleUnlockStateChanged(params):"metamask_chainChanged"===method?this._handleChainChanged(params):utils_1$1.EMITTED_NOTIFICATIONS.includes(method)?this.emit("message",{type:method,data:params}):"METAMASK_STREAM_FAILURE"===method&&connectionStream.destroy(new Error(messages_1$1.default.errors.permanentlyDisconnected()))}))}async _initializeStateAsync(){let initialState;try{initialState=await this.request({method:"metamask_getProviderState"})}catch(error){this._log.error("MetaMask: Failed to get initial state. Please report this bug.",error)}this._initializeState(initialState)}_handleStreamDisconnect(streamName,error){let warningMsg=`MetaMask: Lost connection to "${streamName}".`;(null==error?void 0:error.stack)&&(warningMsg+=`\n${error.stack}`),this._log.warn(warningMsg),this.listenerCount("error")>0&&this.emit("error",warningMsg),this._handleDisconnect(!1,error?error.message:void 0)}_handleChainChanged({chainId:chainId,networkVersion:networkVersion}={}){utils_1$1.isValidChainId(chainId)&&utils_1$1.isValidNetworkVersion(networkVersion)?"loading"===networkVersion?this._handleDisconnect(!0):super._handleChainChanged({chainId:chainId}):this._log.error(messages_1$1.default.errors.invalidNetworkParams(),{chainId:chainId,networkVersion:networkVersion})}}var AbstractStreamProvider_1=StreamProvider$1.AbstractStreamProvider=AbstractStreamProvider;StreamProvider$1.StreamProvider=class extends AbstractStreamProvider{async initialize(){return this._initializeStateAsync()}};var siteMetadata={},__importDefault=commonjsGlobal&&commonjsGlobal.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(siteMetadata,"__esModule",{value:!0});var sendSiteMetadata_1=siteMetadata.sendSiteMetadata=void 0;const messages_1=__importDefault(messages$1),utils_1=utils$1;function getSiteName(windowObject){const{document:document2}=windowObject,siteName=document2.querySelector('head > meta[property="og:site_name"]');if(siteName)return siteName.content;const metaTitle=document2.querySelector('head > meta[name="title"]');return metaTitle?metaTitle.content:document2.title&&document2.title.length>0?document2.title:window.location.hostname}async function getSiteIcon(windowObject){const{document:document2}=windowObject,icons=document2.querySelectorAll('head > link[rel~="icon"]');for(const icon of icons)if(icon&&await imgExists(icon.href))return icon.href;return null}function imgExists(url){return new Promise(((resolve,reject)=>{try{const img=document.createElement("img");img.onload=()=>resolve(!0),img.onerror=()=>resolve(!1),img.src=url}catch(e){reject(e)}}))}sendSiteMetadata_1=siteMetadata.sendSiteMetadata=async function(engine,log){try{const domainMetadata=await async function(){return{name:getSiteName(window),icon:await getSiteIcon(window)}}();engine.handle({jsonrpc:"2.0",id:1,method:"metamask_sendDomainMetadata",params:domainMetadata},utils_1.NOOP)}catch(error){log.error({message:messages_1.default.errors.sendSiteMetadata(),originalError:error})}};class InpageProvider extends AbstractStreamProvider_1{constructor(connectionStream,{jsonRpcStreamName:jsonRpcStreamName="DOID-provider",logger:logger2=console,maxEventListeners:maxEventListeners,shouldSendMetadata:shouldSendMetadata}={}){if(super(connectionStream,{jsonRpcStreamName:jsonRpcStreamName,logger:logger2,maxEventListeners:maxEventListeners,rpcMiddleware:getDefaultExternalMiddleware_1(logger2)}),this._sentWarnings={enable:!1,experimentalMethods:!1,send:!1,events:{close:!1,data:!1,networkChanged:!1,notification:!1}},this._initializeStateAsync(),this.networkVersion=null,this.isDOID=!0,this._sendSync=this._sendSync.bind(this),this.enable=this.enable.bind(this),this.send=this.send.bind(this),this.sendAsync=this.sendAsync.bind(this),this._warnOfDeprecation=this._warnOfDeprecation.bind(this),this._DOID=this._getExperimentalApi(),this._jsonRpcConnection.events.on("notification",(payload=>{const{method:method}=payload;EMITTED_NOTIFICATIONS.includes(method)&&(this.emit("data",payload),this.emit("notification",payload.params.result))})),shouldSendMetadata)if("complete"===document.readyState)sendSiteMetadata_1(this._rpcEngine,this._log);else{const domContentLoadedHandler=()=>{sendSiteMetadata_1(this._rpcEngine,this._log),window.removeEventListener("DOMContentLoaded",domContentLoadedHandler)};window.addEventListener("DOMContentLoaded",domContentLoadedHandler)}}sendAsync(payload,callback){this._rpcRequest(payload,callback)}addListener(eventName,listener){return this._warnOfDeprecation(eventName),super.addListener(eventName,listener)}on(eventName,listener){return this._warnOfDeprecation(eventName),super.on(eventName,listener)}once(eventName,listener){return this._warnOfDeprecation(eventName),super.once(eventName,listener)}prependListener(eventName,listener){return this._warnOfDeprecation(eventName),super.prependListener(eventName,listener)}prependOnceListener(eventName,listener){return this._warnOfDeprecation(eventName),super.prependOnceListener(eventName,listener)}_handleDisconnect(isRecoverable,errorMessage){super._handleDisconnect(isRecoverable,errorMessage),this.networkVersion&&!isRecoverable&&(this.networkVersion=null)}_warnOfDeprecation(eventName){var _a;!1===(null==(_a=this._sentWarnings)?void 0:_a.events[eventName])&&(this._log.warn(_default.warnings.events[eventName]),this._sentWarnings.events[eventName]=!0)}enable(){return this._sentWarnings.enable||(this._log.warn(_default.warnings.enableDeprecation),this._sentWarnings.enable=!0),new Promise(((resolve,reject)=>{try{this._rpcRequest({method:"eth_requestAccounts",params:[]},getRpcPromiseCallback_1(resolve,reject))}catch(error){reject(error)}}))}send(methodOrPayload,callbackOrArgs){return this._sentWarnings.send||(this._log.warn(_default.warnings.sendDeprecation),this._sentWarnings.send=!0),"string"!=typeof methodOrPayload||callbackOrArgs&&!Array.isArray(callbackOrArgs)?methodOrPayload&&"object"==typeof methodOrPayload&&"function"==typeof callbackOrArgs?this._rpcRequest(methodOrPayload,callbackOrArgs):this._sendSync(methodOrPayload):new Promise(((resolve,reject)=>{try{this._rpcRequest({method:methodOrPayload,params:callbackOrArgs},getRpcPromiseCallback_1(resolve,reject,!1))}catch(error){reject(error)}}))}_sendSync(payload){let result;switch(payload.method){case"DOID_accounts":result=this.selectedAddress?[this.selectedAddress]:[];break;case"net_version":result=this.networkVersion||null;break;default:throw new Error(_default.errors.unsupportedSync(payload.method))}return{id:payload.id,jsonrpc:payload.jsonrpc,result:result}}_getExperimentalApi(){return new Proxy({isUnlocked:async()=>(this._state.initialized||await new Promise((resolve=>{this.on("_initialized",(()=>resolve()))})),this._state.isUnlocked),requestBatch:async requests=>{if(!Array.isArray(requests))throw new Error("Batch requests must be made with an array of request objects.");return new Promise(((resolve,reject)=>{this._rpcRequest(requests,getRpcPromiseCallback_1(resolve,reject))}))}},{get:(obj,prop,...args)=>(this._sentWarnings.experimentalMethods||(this._log.warn(_default.warnings.experimentalMethods),this._sentWarnings.experimentalMethods=!0),Reflect.get(obj,prop,...args))})}_handleChainChanged({chainId:chainId,networkVersion:networkVersion}={}){super._handleChainChanged({chainId:chainId,networkVersion:networkVersion}),this._state.isConnected&&networkVersion!==this.networkVersion&&(this.networkVersion=networkVersion,this._state.initialized&&this.emit("networkChanged",this.networkVersion))}}const injectType="contentscript";let __define;(()=>{__define=globalThis.define;try{globalThis.define=void 0}catch(_){console.warn("DOID - globalThis.define could not be deleted.")}})(),(()=>{try{globalThis.define=__define}catch(_){console.warn("DOID - globalThis.define could not be overwritten.")}})();const inpageStream=new browser$3.WindowPostMessageStream({name:"DOID-inpage",target:"DOID-contentscript"});var type2;type2&&type2!==injectType||!function(){const{doctype:doctype}=window.document;return!doctype||"html"===doctype.name}()||!function(){const prohibitedTypes=[/\.xml$/u,/\.pdf$/u],currentUrl=window.location.pathname;for(let i2=0;i2<prohibitedTypes.length;i2++)if(prohibitedTypes[i2].test(currentUrl))return!1;return!0}()||!function(){const documentElement=document.documentElement.nodeName;return!documentElement||"html"===documentElement.toLowerCase()}()||function({connectionStream:connectionStream,jsonRpcStreamName:jsonRpcStreamName,logger:logger2=console,maxEventListeners:maxEventListeners=100}){const provider=new InpageProvider(connectionStream,{jsonRpcStreamName:jsonRpcStreamName,logger:logger2,maxEventListeners:maxEventListeners}),providerInstance=new Proxy(provider,{deleteProperty:()=>!0});window.DOID??(window.DOID=providerInstance),window.dispatchEvent(new Event("DOID#initialized"))}({connectionStream:inpageStream});((...args)=>{console.info("[inpage]",...args)})("injected")}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
